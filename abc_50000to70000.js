                        }
                    },
                    "proj-frag-pin-02.img": {
                        frame: {
                            x: 700,
                            y: 247,
                            w: 56,
                            h: 62
                        },
                        rotated: !1,
                        trimmed: !0,
                        spriteSourceSize: {
                            x: 0,
                            y: 2,
                            w: 56,
                            h: 62
                        },
                        sourceSize: {
                            w: 64,
                            h: 64
                        }
                    }
                }
            }]
        }
    },
    af8ba00f: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }
        var r = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            o = a("6b42806d"),
            n = (a("10899aea"), a("c2a798c8")),
            s = {
                Line: 0,
                Ray: 1,
                Circle: 2,
                Aabb: 3
            },
            l = function() {
                function e() {
                    i(this, e), this.shapes = []
                }
                return r(e, [{
                    key: "addLine",
                    value: function(e, t, a, i) {
                        this.shapes.push({
                            type: s.Line,
                            start: n.copy(e),
                            end: n.copy(t),
                            color: a,
                            fill: i
                        })
                    }
                }, {
                    key: "addRay",
                    value: function(e, t, a, i, r) {
                        this.shapes.push({
                            type: s.Ray,
                            pos: n.copy(e),
                            dir: n.copy(t),
                            len: a,
                            color: i,
                            fill: r
                        })
                    }
                }, {
                    key: "addCircle",
                    value: function(e, t, a, i) {
                        this.shapes.push({
                            type: s.Circle,
                            pos: n.copy(e),
                            rad: t,
                            color: a,
                            fill: i
                        })
                    }
                }, {
                    key: "addAabb",
                    value: function(e, t, a, i) {
                        this.shapes.push({
                            type: s.Aabb,
                            min: n.copy(e),
                            max: n.copy(t),
                            color: a,
                            fill: i
                        })
                    }
                }, {
                    key: "addCollider",
                    value: function(e, t, a) {
                        e.type == o.Type.Aabb ? this.addAabb(e.min, e.max, t, a) : this.addCircle(e.pos, e.rad, t, a)
                    }
                }, {
                    key: "render",
                    value: function(e, t) {}
                }, {
                    key: "flush",
                    value: function() {
                        this.shapes = []
                    }
                }]), e
            }(),
            c = new l;
        e.exports = c
    },
    b198b546: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return t in e ? Object.defineProperty(e, t, {
                value: a,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : e[t] = a, e
        }
        var r, o = {
                None: 0,
                Danger: 1,
                Coming: 2,
                Help: 3,
                Ammo: 4,
                Medical: 5,
                Airdrop: 6,
                Airstrike: 7,
                WoodsKing: 8
            },
            n = (r = {}, i(r, o.None, {}), i(r, o.Danger, {
                texture: "ping-team-danger.img",
                mapTexture: "ping-map-danger.img",
                sound: "ping_danger_01",
                soundLeader: "ping_leader_01",
                pingMap: !0,
                pingLife: 4,
                mapLife: 4,
                mapEvent: !1,
                worldDisplay: !0
            }), i(r, o.Coming, {
                texture: "ping-team-coming.img",
                mapTexture: "ping-map-coming.img",
                sound: "ping_coming_01",
                soundLeader: "ping_leader_01",
                pingMap: !0,
                pingLife: 4,
                mapLife: 300,
                mapEvent: !1,
                worldDisplay: !0
            }), i(r, o.Help, {
                texture: "ping-team-help.img",
                mapTexture: "ping-map-help.img",
                sound: "ping_help_01",
                soundLeader: "ping_leader_01",
                pingMap: !0,
                pingLife: 4,
                mapLife: 4,
                mapEvent: !1,
                worldDisplay: !0
            }), i(r, o.Emote, {}), i(r, o.Airdrop, {
                texture: "ping-team-airdrop.img",
                mapTexture: "ping-map-airdrop.img",
                sound: "ping_airdrop_01",
                pingMap: !0,
                pingLife: 4,
                mapLife: 10,
                mapEvent: !0,
                worldDisplay: !1,
                tint: 16737792
            }), i(r, o.Airstrike, {
                texture: "ping-team-airstrike.img",
                mapTexture: "ping-map-airstrike.img",
                sound: "ping_airstrike_01",
                pingMap: !0,
                pingLife: 2,
                mapLife: 2,
                mapEvent: !0,
                worldDisplay: !0,
                tint: 15400704
            }), i(r, o.WoodsKing, {
                texture: "player-king-woods.img",
                mapTexture: "ping-map-woods-king.img",
                sound: "helmet03_forest_pickup_01",
                pingMap: !0,
                pingLife: 4,
                mapLife: 10,
                mapEvent: !0,
                worldDisplay: !1,
                tint: 1244928
            }), r);
        e.exports = {
            PingType: o,
            PingData: n
        }
    },
    b4f03d8a: function(e, t, a) {
        t = e.exports = a("95cc1214")(!1), t.push([e.i, '/* Breaks in Bootstrap 4 are:\n *\n * extra large devices (wide screens): 1200px,\n * large devices (desktops): 992px,\n * medium devices (tablets): 768px,\n * small devices (phones): 576px\n *\n * However... iPhone X landscape width: 812px\n * https://mydevice.io/devices/\n */\nimg {\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-user-drag: none;\n  -khtml-user-drag: none;\n  -moz-user-drag: none;\n  -o-user-drag: none;\n  user-drag: none;\n}\n#cvs {\n  -webkit-filter: none;\n          filter: none;\n}\n.click-through {\n  pointer-events: none;\n}\n#game-area-wrapper {\n  cursor: crosshair;\n  left: 0;\n  position: absolute !important;\n  top: 0;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n#ui-game {\n  -webkit-filter: none;\n          filter: none;\n  height: 100%;\n  left: 0px;\n  position: absolute;\n  top: 0px;\n  width: 100%;\n}\n#ui-center {\n  color: #FFF;\n  pointer-events: all;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translateX(-50%) translateY(-50%) scale(1);\n          transform: translateX(-50%) translateY(-50%) scale(1);\n  z-index: 10;\n}\n@media screen and (min-width: 851px) and (max-height: 768px), (max-width: 1200px) {\n  #ui-center {\n    -webkit-transform: translateX(-50%) translateY(-50%) scale(0.85);\n            transform: translateX(-50%) translateY(-50%) scale(0.85);\n  }\n}\n@media screen and (max-width: 850px) {\n  #ui-center {\n    pointer-events: all;\n    -webkit-transform: translateX(-50%) translateY(-50%) scale(0.85);\n            transform: translateX(-50%) translateY(-50%) scale(0.85);\n    z-index: 10;\n  }\n}\n@media (max-width: 850px) and (max-height: 300px) {\n  #ui-center {\n    -webkit-transform: translateX(-50%) translateY(-50%) scale(0.775);\n            transform: translateX(-50%) translateY(-50%) scale(0.775);\n  }\n}\n#ui-game-menu {\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 5px;\n  box-sizing: border-box;\n  display: none;\n  margin: 10px auto;\n  padding: 10px 15px;\n}\n@media screen and (max-width: 850px) {\n  #ui-game-menu {\n    height: initial;\n    padding: 4px 10px;\n    width: 190px;\n  }\n}\n@media (max-width: 850px) and (max-height: 300px) {\n  #ui-game-menu {\n    margin-top: 0px;\n  }\n}\n#ui-game-menu p {\n  bottom: 4px;\n  display: inline-block;\n  font-size: 14px;\n  position: relative;\n}\n@media screen and (max-width: 850px) {\n  #ui-game-menu p {\n    bottom: 0px;\n    font-size: 12px;\n    margin-bottom: 8px;\n    margin-top: 6px;\n  }\n}\n.ui-game-menu-desktop {\n  height: 495px;\n  width: 350px;\n}\n.btns-game-double-row {\n  display: flex;\n  position: relative;\n}\n.btns-game-double-row > .btn-game-container {\n  position: relative;\n  width: 100%;\n}\n.btns-game-double-row > .btn-game-container > .btn-double-row {\n  display: inline-block;\n}\n.btns-game-double-row > div:not(:last-child) {\n  margin-right: 2px;\n}\n.game-menu-icon-toggle {\n  background-size: 22px;\n  background-position: center;\n  background-repeat: no-repeat;\n  bottom: 13px;\n  display: inline-block;\n  height: 22px;\n  left: 60%;\n  pointer-events: none;\n  position: absolute;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  width: 22px;\n}\n.btn-game-touch-style {\n  background-color: #50afab;\n  background-position: 4px 4px;\n  background-repeat: no-repeat;\n  background-size: 20px;\n  border: 0px;\n  border-bottom: none;\n  border-radius: 5px;\n  box-shadow: inset 0 -2px #387c79;\n  box-sizing: border-box;\n  color: white;\n  cursor: pointer;\n  display: block;\n  font-size: 14px;\n  height: 30px;\n  line-height: 30px;\n  margin: auto;\n  margin-top: 2px;\n  margin-bottom: 4px;\n  position: relative;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n  width: 100%;\n}\n.movement-icon {\n  background-image: url(../img/gui/movement.svg);\n}\n.target-icon {\n  background-image: url(../img/gui/target.svg);\n}\n.aim-line-on-icon {\n  background-image: url(../img/gui/checked.svg);\n}\n.aim-line-off-icon {\n  background-image: url(../img/gui/close.svg);\n}\n#btn-game-tabs > .btn-game-container > .btn-game-menu {\n  text-align: center;\n  color: white;\n  line-height: 36px;\n  font-size: 16px;\n  background-color: transparent;\n  border: 2px solid;\n  border-color: white;\n  box-shadow: none;\n  cursor: pointer;\n  flex: 1;\n}\n#btn-game-tabs > .btn-game-container > .btn-game-menu-selected {\n  border: 2px solid !important;\n  border-color: #00ff00 !important;\n  background-color: rgba(0, 0, 0, 0.35);\n}\n.game-menu-icon-static {\n  background-size: 36px;\n  background-position: center;\n  background-repeat: no-repeat;\n  bottom: 13px;\n  display: inline-block;\n  height: 26px;\n  left: 50%;\n  pointer-events: none;\n  position: absolute;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  width: 36px;\n}\n.settings-icon {\n  background-image: url(../img/gui/cog.svg);\n}\n.keybind-icon {\n  background-image: url(../img/gui/keyboard.svg);\n}\n#ui-game-tab-settings {\n  display: block;\n  height: initial;\n}\n.ui-game-tab-settings-desktop {\n  height: 340px;\n}\n#ui-game-tab-keybinds {\n  display: none;\n  height: 345px;\n}\n#ui-game-tab-keybinds > .btn-keybind-restore {\n  margin-top: 20px;\n}\n#ui-game-tab-keybinds > #ui-keybind-list {\n  height: 295px;\n  overflow-y: scroll;\n  pointer-events: all;\n}\n#ui-map-container {\n  position: absolute;\n  bottom: 52px;\n}\n#ui-alive-info {\n  position: absolute;\n  color: white;\n  width: 92px;\n  height: 36px;\n  top: 174px;\n  left: 96px;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n}\n#ui-alive-info > #ui-map-counter-faction {\n  bottom: 3px;\n  display: none;\n  font-size: 24px;\n  left: 12px;\n  position: absolute;\n  text-align: center;\n  width: 92px;\n}\n#ui-alive-info > #ui-map-counter-faction > .ui-players-alive-red {\n  color: #ff0000;\n  display: inline-block;\n  font-size: 24px;\n  font-weight: bold;\n  position: relative;\n}\n#ui-alive-info > #ui-map-counter-faction > .ui-players-alive-blue {\n  color: #00d2ff;\n  display: inline-block;\n  font-size: 24px;\n  font-weight: bold;\n  position: relative;\n}\n#ui-map-expand-mobile {\n  height: 190px;\n  width: 190px;\n  left: -4px;\n  top: -22px;\n  z-index: 0;\n  background-color: transparent;\n}\n#ui-map-expand img {\n  display: none;\n}\n#ui-map-minimize {\n  left: 124px;\n}\n.ui-map-wrapper-mobile {\n  bottom: initial;\n  color: #FFF;\n  display: block;\n  font-size: 16px;\n  left: 6px;\n  top: 46px;\n}\n.ui-map-wrapper-mobile .ui-players-alive {\n  left: 4px;\n}\n.ui-map-wrapper-mobile #ui-map-counter-default {\n  position: relative;\n  display: inline-block;\n  font-size: 24px;\n  text-align: center;\n  bottom: 10px;\n  left: 9px;\n}\n.ui-map-wrapper-mobile .ui-map-icon {\n  padding: 6px;\n  display: inline-block;\n  height: 24px;\n  width: 18px;\n  margin-left: 0px;\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: 6px 6px;\n}\n.ui-map-wrapper-mobile #ui-map-info {\n  position: absolute;\n  color: white;\n  width: 92px;\n  height: 36px;\n  top: 174px;\n  left: -2px;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n}\n.ui-map-wrapper-mobile #ui-spec-counter {\n  position: absolute;\n  color: white;\n  width: 68px;\n  height: 28px;\n  top: 135px;\n  left: 60px;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n}\n.ui-map-wrapper-mobile #ui-spec-counter-icon {\n  padding: 6px;\n  display: inline-block;\n  height: 24px;\n  width: 18px;\n  margin-left: 2px;\n  background-size: 20px;\n  background-repeat: no-repeat;\n  background-position: 6px 4px;\n  background-image: url(../img/gui/eye.svg);\n}\n.ui-map-wrapper-mobile #ui-spec-counter-number {\n  position: relative;\n  display: inline-block;\n  font-size: 20px;\n  width: 24px;\n  text-align: center;\n  bottom: 15px;\n  left: 0px;\n}\n.ui-map-wrapper-mobile .gas-icon {\n  background-image: url(../img/gui/gas.svg);\n}\n.ui-map-wrapper-mobile .danger-icon {\n  background-image: url(../img/gui/danger.svg);\n}\n.ui-map-wrapper-mobile .alive-icon {\n  background-image: url(../img/gui/player-gui.svg);\n}\n.ui-map-wrapper-mobile .icon-pulse {\n  -webkit-animation: pulse 2s linear infinite;\n  animation: pulse 2s linear infinite;\n}\n.ui-map-wrapper-mobile .ui-settings-button {\n  position: absolute;\n  color: white;\n  border-radius: 5px;\n  pointer-events: all;\n}\n.ui-map-wrapper-mobile .ui-settings-button img {\n  position: absolute;\n  left: 6px;\n  top: 6px;\n  height: 36px;\n  width: 36px;\n  background-size: 36px;\n  background-repeat: no-repeat;\n  transform: scale(1);\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(1);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(1);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(1);\n  transition: all 100ms ease-in;\n  transition: opacity 0.25s ease-out;\n  -moz-transition: opacity 0.25s ease-out;\n  -webkit-transition: opacity 0.25s ease-out;\n  -o-transition: opacity 0.25s ease-out;\n}\n.ui-map-wrapper-mobile .ui-settings-button .map-img-after {\n  display: none;\n}\n.ui-map-wrapper-mobile .ui-settings-button:hover {\n  -webkit-transform: scale(1);\n          transform: scale(1);\n}\n.ui-map-wrapper-desktop {\n  position: absolute;\n  bottom: 12px;\n  left: 12px;\n}\n#ui-map-wrapper {\n  position: absolute;\n  z-index: 1;\n}\n#ui-settings-container-mobile {\n  position: relative;\n}\n#ui-menu-display {\n  cursor: pointer;\n  left: 2px;\n  top: -18px;\n  height: 48px;\n  width: 48px;\n  opacity: 0.8;\n  background-color: rgba(0, 0, 0, 0.4);\n  background-size: 48px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url(../img/gui/cog.svg);\n  z-index: 1;\n}\n/**\n * ui-big-map\n */\n#big-map {\n  display: none;\n  height: 100%;\n  width: 100%;\n}\n#big-map-collision {\n  height: 100%;\n  left: 50%;\n  margin: auto;\n  pointer-events: all;\n  position: fixed;\n  top: 0px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#big-map-close {\n  display: none;\n  position: absolute;\n  margin-left: auto;\n  height: 64px;\n  width: 64px;\n  right: 6px;\n  top: 6px;\n  border-radius: 6px;\n  background-color: rgba(0, 0, 0, 0.5);\n  background-repeat: no-repeat;\n  background-size: 48px;\n  background-position: center;\n  background-image: url(../img/gui/close.svg);\n  pointer-events: all;\n}\n/**\n * ui-right-center\n */\n#ui-right-center {\n  position: absolute;\n  color: #FFF;\n  opacity: 0.75;\n  transition: opacity 0.25s ease-out;\n  -moz-transition: opacity 0.25s ease-out;\n  -webkit-transition: opacity 0.25s ease-out;\n  -o-transition: opacity 0.25s ease-out;\n}\n.ui-right-center-desktop {\n  top: 40%;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n  right: 12px;\n}\n.ui-right-center-mobile {\n  height: 100%;\n  left: 50%;\n  top: 10px;\n  -webkit-transform: translateX(-50%) scale(1);\n          transform: translateX(-50%) scale(1);\n  width: 100%;\n}\n.ui-right-center-tablet {\n  height: initial;\n  left: initial;\n  top: 12px !important;\n  -webkit-transform: scale(0.8);\n          transform: scale(0.8);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n  right: 6px;\n  width: initial;\n}\n.ui-right-center-tablet-ipad-browser {\n  height: initial;\n  left: initial;\n  top: 12px !important;\n  -webkit-transform: scale(0.65);\n          transform: scale(0.65);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n  right: 6px;\n  width: initial;\n}\n@media (max-height: 600px) {\n  .ui-right-center-tablet {\n    -webkit-transform: scale(0.55);\n            transform: scale(0.55);\n  }\n  .ui-right-center-tablet-ipad-browser {\n    -webkit-transform: scale(0.55);\n            transform: scale(0.55);\n  }\n}\n/**\n * ui-bottom-right\n */\n.ui-bottom-right-tablet {\n  bottom: 25% !important;\n  right: 6px !important;\n  -webkit-transform: scale(0.8) !important;\n          transform: scale(0.8) !important;\n  -webkit-transform-origin: right !important;\n          transform-origin: right !important;\n}\n.ui-bottom-right-tablet-ipad-webview {\n  bottom: 25% !important;\n  right: 6px !important;\n  -webkit-transform: scale(0.75) !important;\n          transform: scale(0.75) !important;\n  -webkit-transform-origin: right !important;\n          transform-origin: right !important;\n}\n.ui-bottom-right-tablet-ipad-browser {\n  bottom: 30% !important;\n  right: 6px !important;\n  -webkit-transform: scale(0.65) !important;\n          transform: scale(0.65) !important;\n  -webkit-transform-origin: right !important;\n          transform-origin: right !important;\n}\n@media (max-height: 600px) {\n  .ui-bottom-right-tablet-webview {\n    bottom: 25% !important;\n    -webkit-transform: scale(0.65) !important;\n            transform: scale(0.65) !important;\n    -webkit-transform-origin: right !important;\n            transform-origin: right !important;\n  }\n  .ui-bottom-right-tablet-browser {\n    bottom: 30% !important;\n    -webkit-transform: scale(0.6) !important;\n            transform: scale(0.6) !important;\n    -webkit-transform-origin: right !important;\n            transform-origin: right !important;\n  }\n}\n/**\n * ui-bottom-center-right\n */\n.ui-bottom-center-right-tablet {\n  left: 72% !important;\n  -webkit-transform: scale(0.65) !important;\n          transform: scale(0.65) !important;\n}\n#ui-emote-button {\n  background: rgba(0, 0, 0, 0.4);\n  background-image: url(../img/gui/emote.svg);\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: 28px;\n  border-radius: 21px;\n  display: none;\n  height: 42px;\n  position: absolute;\n  right: 108px;\n  top: 0px;\n  width: 42px;\n}\n@media screen and (max-width: 850px) {\n  #ui-emote-button {\n    background-size: 20px;\n    border-radius: 14px;\n    bottom: 18px;\n    height: 28px;\n    right: 4px;\n    top: initial;\n    width: 28px;\n  }\n}\n/**\n * ui-top-left\n */\n.ui-top-left-tablet {\n  left: 120px !important;\n}\n/**\n * ui-spectate-options-wrapper\n */\n.ui-spectate-options-wrapper-tablet {\n  bottom: 12px !important;\n  top: initial !important;\n}\n.ui-killfeed-wrapper-tablet {\n  top: 60px !important;\n}\n@media (max-width: 850px) and (max-height: 320px) {\n  .ui-slider-container {\n    margin-bottom: 0px;\n  }\n}\n@media (max-width: 850px) and (max-height: 320px) {\n  .ui-slider-container > p {\n    width: 75px;\n  }\n}\n@media screen and (max-width: 850px) {\n  .ui-slider-container > .slider-text {\n    margin-bottom: 0px;\n  }\n}\n@media (max-width: 850px) and (max-height: 320px) {\n  .ui-slider-container > .slider {\n    bottom: 3px;\n    width: 85px;\n  }\n}\n@media screen and (max-width: 850px) {\n  .ui-slider-container > .slider::-webkit-slider-thumb {\n    width: 24px;\n    height: 24px;\n  }\n}\n@media screen and (max-width: 850px) {\n  .ui-slider-container > .slider::-moz-range-thumb {\n    width: 24px;\n    height: 24px;\n  }\n}\n#ui-stats-logo {\n  background-image: url("../img/surviv_logo_full.png");\n  background-repeat: no-repeat;\n  background-size: 250px;\n  background-position: center;\n  height: 125px;\n  position: absolute;\n  left: 20px;\n  top: 8px;\n  width: 250px;\n}\n@media (max-width: 1280px), (max-height: 768px) {\n  #ui-stats-logo {\n    background-size: 175px;\n    height: 90px;\n    width: 175px;\n  }\n}\n@media screen and (max-width: 850px) {\n  #ui-stats-logo {\n    background-size: 124px;\n    bottom: 4px;\n    height: 64px;\n    left: initial;\n    right: 8px;\n    top: initial;\n    width: 124px;\n  }\n}\n.ui-hidden {\n  display: none;\n}\n.btn-game-menu {\n  /* Added from .menu-option in menu.less */\n  text-align: center;\n  line-height: 38px;\n  display: block;\n  width: 100%;\n  height: 40px;\n  border: 0px;\n  border-radius: 5px;\n  box-sizing: border-box;\n  position: relative;\n  margin: auto;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  color: white;\n  font-size: 16px;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n  background-color: #50afab;\n  border-bottom: 2px solid #387c79;\n  box-shadow: inset 0 -2px #387c79;\n  background-repeat: no-repeat;\n  cursor: pointer;\n}\n#btn-game-fullscreen {\n  background-size: 34px;\n  background-position: 4px 2px;\n  background-image: url(../img/gui/minimize.svg);\n}\n#btn-game-sound {\n  background-size: 44px;\n  background-position: 2px -3px;\n}\n#btn-game-aim-line {\n  background-size: 24px;\n  background-position: 8px 6px;\n}\n#btn-game-quit {\n  margin-top: 40px;\n  background-size: 44px;\n  background-position: -2px -3px;\n  background-image: url(../img/gui/quit.svg);\n}\n#btn-game-resume {\n  margin-top: 30px;\n  background-size: 44px;\n  background-position: -2px -3px;\n  background-image: url(../img/gui/resume.svg);\n}\n/**\n     * ui-top-center\n     */\n#ui-top-center {\n  position: absolute;\n  color: #FFF;\n  top: 80px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#ui-top-center .top-center-text {\n  text-align: center;\n  width: 100vw;\n  padding: 8px;\n}\n#ui-waiting-text {\n  display: none;\n  color: white;\n  text-shadow: 2px 2px 0px #000000;\n  font-size: 32px;\n  font-weight: bold;\n}\n#ui-waiting-text span {\n  font-size: 32px;\n  font-weight: bold;\n}\n.top-center-text .spectate-text {\n  display: inline-block;\n  text-shadow: 2px 2px 0px #000000;\n  font-size: 24px;\n  font-weight: bold;\n  overflow: hidden;\n  height: 32px;\n}\n@media (max-width: 1024px) {\n  .top-center-text .spectate-text {\n    font-size: 18px;\n  }\n}\n.top-center-text .spectate-desc {\n  color: white;\n  margin-right: 8px;\n}\n.ui-spectate-mode {\n  display: none;\n}\n#ui-spectate-text {\n  position: relative;\n}\n#spectate-player {\n  max-width: 250px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  color: cyan;\n}\n/**\n     * ui-top-center-scopes\n     */\n#ui-top-center-scopes-wrapper {\n  /* Taken from ui-top-center */\n  position: absolute;\n  color: #FFF;\n  top: 0%;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  width: 100%;\n}\n#ui-top-center-scopes {\n  margin-top: 12px;\n  text-align: center;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-top-center-scopes {\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n}\n.ui-zoom {\n  background: rgba(0, 0, 0, 0.3);\n  border-radius: 36px;\n  width: 64px;\n  height: 64px;\n  opacity: 0.6;\n  display: inline-block;\n}\n.ui-zoom-hover:hover {\n  opacity: 1.0;\n}\n.ui-zoom-active {\n  vertical-align: baseline;\n  opacity: 1.0;\n  transform: scale(1);\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(1);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(1);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(1);\n  transition: all 100ms ease-in;\n  transition: opacity 0.25s ease-out;\n  -moz-transition: opacity 0.25s ease-out;\n  -webkit-transition: opacity 0.25s ease-out;\n  -o-transition: opacity 0.25s ease-out;\n}\n.ui-zoom .ui-zoom-image {\n  width: 64px;\n  height: 64px;\n  opacity: 0.4;\n  padding: 2px;\n}\n.ui-zoom .ui-zoom-text {\n  margin-top: 14px;\n  width: 100%;\n}\n.ui-zoom .ui-zoom-level {\n  font-size: 32px;\n  text-align: center;\n  width: 100%;\n  /*cursor: inherit;*/\n}\n.ui-zoom .ui-zoom-append {\n  font-size: 24px;\n}\n.ui-zoom-inactive {\n  display: none;\n  margin-left: -8px;\n  margin-right: -8px;\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(0.5);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(0.5);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(0.5);\n  transition: all 100ms ease-in;\n  transform: scale(0.5);\n}\n.ui-zoom-inactive:hover {\n  cursor: pointer !important;\n  opacity: 1.0;\n}\n/**\n     * ui-team-pings and ui-emotes\n     */\n.ui-emote-wheel {\n  z-index: 3;\n  display: none;\n  position: fixed;\n}\n.ui-emote-parent {\n  opacity: 0.75;\n}\n.ui-emote-hl {\n  z-index: 2;\n  display: none;\n}\n.ui-emote {\n  position: fixed;\n  width: 256px;\n  height: 256px;\n  background-size: 256px;\n  background-repeat: no-repeat;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n.ui-emote-bg-circle {\n  opacity: 0.5;\n  background-image: url(../img/gui/ping-part-circle.svg);\n}\n.ui-emote-bg-quarter {\n  opacity: 0.5;\n  background-image: url(../img/gui/ping-part-quarter.svg);\n}\n.ui-emote-bg-eighth {\n  opacity: 0.5;\n  background-image: url(../img/gui/ping-part-eighth.svg);\n}\n.ui-emote-middle .ui-emote-image {\n  width: 24px !important;\n  height: 24px !important;\n  background-size: 24px !important;\n  background-image: url(../img/gui/close.svg);\n}\n.ui-emote-top .ui-emote-image {\n  margin-top: -78px;\n  background-image: url(../img/gui/ping-team-danger.svg);\n}\n.ui-emote-right .ui-emote {\n  -webkit-transform: translate(-50%, -50%) rotate(90deg);\n          transform: translate(-50%, -50%) rotate(90deg);\n}\n.ui-emote-right .ui-emote-image {\n  margin-left: 78px;\n  background-image: url(../img/gui/ping-team-coming.svg);\n}\n.ui-emote-bottom .ui-emote {\n  -webkit-transform: translate(-50%, -50%) rotate(180deg);\n          transform: translate(-50%, -50%) rotate(180deg);\n}\n.ui-emote-bottom .ui-emote-image {\n  margin-top: 78px;\n  background-image: url(../img/gui/ping-team-help.svg);\n}\n.ui-emote-left .ui-emote {\n  -webkit-transform: translate(-50%, -50%) rotate(270deg);\n          transform: translate(-50%, -50%) rotate(270deg);\n}\n.ui-emote-left .ui-emote-image {\n  margin-left: -78px;\n  background-image: url(../img/gui/ping-team-help.svg);\n}\n.ui-emote-top-left .ui-emote-image {\n  margin-left: -80px;\n  margin-top: -30px;\n  background-image: url(../img/loot/loot-ammo-box.svg);\n}\n.ui-emote-bottom-left .ui-emote {\n  -webkit-transform: translate(-50%, -50%) rotate(-45deg);\n          transform: translate(-50%, -50%) rotate(-45deg);\n}\n.ui-emote-bottom-left .ui-emote-image {\n  margin-left: -80px;\n  margin-top: 30px;\n  background-image: url(../img/loot/loot-medical-healthkit.svg);\n}\n.ui-emote-circle .ui-emote-hl {\n  background-image: url(../img/gui/ping-part-circle-highlight.svg);\n}\n.ui-emote-quarter .ui-emote-hl {\n  background-image: url(../img/gui/ping-part-quarter-highlight.svg);\n}\n.ui-emote-eighth .ui-emote-hl {\n  background-image: url(../img/gui/ping-part-eighth-highlight.svg);\n}\n.ui-emote-image {\n  z-index: 1;\n  position: fixed;\n  background-repeat: no-repeat;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n.ui-emote-image-large {\n  width: 64px;\n  height: 64px;\n  background-size: 64px;\n}\n.ui-emote-image-small {\n  width: 35px;\n  height: 35px;\n  background-size: 35px;\n}\n/**\n     * ui-team-indicators\n     */\n.ui-team-indicator {\n  z-index: 2;\n  display: none;\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  border-radius: 32px;\n  width: 64px;\n  height: 64px;\n  background-size: 64px;\n  background-repeat: no-repeat;\n  background-image: url(../img/gui/indicator.svg);\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n.ui-team-indicator-pos {\n  opacity: 0.75;\n  position: relative;\n  border-radius: 24px;\n  width: 32px;\n  height: 32px;\n  top: 23px;\n  left: 32px;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n.ui-team-indicator-image {\n  width: 32px;\n  height: 32px;\n  background-size: 32px;\n  background-repeat: no-repeat;\n  background-image: url(../img/gui/ping-team-danger.svg);\n}\n.ui-indicator-ping-border {\n  z-index: 0;\n  display: none;\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  width: 160px;\n  height: 160px;\n  position: relative;\n  background-size: 160px;\n  background-repeat: no-repeat;\n  background-image: url(../img/gui/ping-border.svg);\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n/**\n     * ui-top-left\n     */\n#ui-top-left {\n  position: absolute;\n  color: #FFF;\n  font-size: 16px;\n  top: 12px;\n  left: 12px;\n  display: block;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-top-left {\n    -webkit-transform-origin: top left;\n            transform-origin: top left;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n}\n.ui-bg-standard {\n  background: rgba(0, 0, 0, 0.24);\n  border-radius: 5px;\n}\n.ui-team-member {\n  display: none;\n  position: relative;\n  width: 200px;\n  height: 32px;\n  padding: 4px;\n  margin-bottom: 8px;\n}\n.ui-team-member-name {\n  font-weight: bold;\n  text-shadow: 1px 1px 0px #000000;\n  font-size: 16px;\n  max-width: 180px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.ui-team-member-color {\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  border-radius: 7px;\n  width: 14px;\n  height: 14px;\n}\n.ui-background-yellow {\n  background-color: #ffff00;\n}\n.ui-background-blue {\n  background-color: blue;\n}\n.ui-background-red {\n  background-color: red;\n}\n.ui-background-purple {\n  background-color: #ff00ff;\n}\n.ui-background-cyan {\n  background-color: #00ffff;\n}\n.ui-background-orange {\n  background-color: #ff5400;\n}\n.ui-team-member-status {\n  display: none;\n  position: absolute;\n  top: 4px;\n  right: -38px;\n  width: 32px;\n  height: 32px;\n  background-size: 32px;\n  background-repeat: no-repeat;\n}\n.ui-team-member-status-downed {\n  border-radius: 16px;\n  display: block !important;\n  background-image: url(../img/gui/down.svg) !important;\n}\n.ui-team-member-status-dead {\n  display: block !important;\n  background-image: url(../img/gui/skull-team.svg) !important;\n  opacity: 0.5 !important;\n}\n.ui-team-member-status-disconnected {\n  display: block !important;\n  background-image: url(../img/gui/close.svg) !important;\n  opacity: 0.5 !important;\n}\n.ui-team-member-health {\n  margin-top: 4px;\n}\n.ui-team-member-health .ui-bar-inner {\n  background-color: white;\n  z-index: 1;\n  position: absolute;\n  border-radius: 4px;\n  width: 200px;\n  height: 10px;\n  transition: width 0.0s;\n  transition-property: width;\n  transition-duration: 0.0s;\n  transition-timing-function: ease-out;\n  transition-delay: initial;\n}\n.ui-team-member-health .ui-bar-danger {\n  background: rgba(255, 0, 0, 0.8);\n  -webkit-animation-name: pulse;\n          animation-name: pulse;\n  -webkit-animation-duration: 0.5s;\n          animation-duration: 0.5s;\n  -webkit-animation-timing-function: ease-out;\n          animation-timing-function: ease-out;\n  -webkit-animation-delay: 0;\n          animation-delay: 0;\n  -webkit-animation-direction: alternate;\n          animation-direction: alternate;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n  -webkit-animation-fill-mode: none;\n          animation-fill-mode: none;\n  -webkit-animation-play-state: running;\n          animation-play-state: running;\n}\n.ui-team-member-health .ui-health-depleted {\n  z-index: 0;\n  background: #929292;\n  transition: width 1.0s;\n  transition-property: width;\n  transition-duration: 1.0s;\n  transition-timing-function: ease-out;\n  transition-delay: initial;\n}\n#ui-spectate-options-wrapper {\n  color: #FFF;\n  display: block;\n  left: 12px;\n  position: absolute;\n  top: 12px;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-spectate-options-wrapper {\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n    -webkit-transform-origin: top left;\n            transform-origin: top left;\n  }\n}\n#ui-spectate-options {\n  position: relative;\n  pointer-events: all;\n  width: 100%;\n}\n#ui-spectate-buttons {\n  display: inline-block;\n  padding: 8px 8px 0px 8px;\n  text-align: center;\n  width: 192px;\n}\n#ui-spectate-options a {\n  position: relative;\n  color: white;\n  font-size: 16px;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n  background: #50afab;\n  border-bottom: 2px solid #387c79;\n  box-shadow: inset 0 -2px #387c79;\n  cursor: pointer;\n}\n#btn-spectate-prev-player {\n  margin-bottom: 24px;\n}\n#ui-spectate-stats {\n  vertical-align: top;\n  display: none;\n}\n#ui-spectate-stats-header {\n  text-align: center;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 8px;\n}\n#ui-spectate-stats-table {\n  width: 100%;\n  background-color: transparent;\n  margin: auto;\n  margin-right: 0px;\n  border-collapse: collapse;\n}\n#ui-spectate-stats tbody,\n#ui-spectate-stats td,\n#ui-spectate-stats th {\n  padding: 0px 8px 8px 16px;\n  font-size: 18px;\n}\n.ui-spectate-stats-category {\n  width: 130px;\n  color: rgba(255, 255, 255, 0.75);\n}\n.ui-spectate-stats-value {\n  width: 75px;\n  color: white;\n}\n#ui-leaderboard-wrapper {\n  position: absolute;\n  color: #FFF;\n  font-size: 16px;\n  top: 12px;\n  right: 12px;\n  display: flex;\n  font-weight: bold;\n  text-align: center;\n  width: 85px;\n  display: inline-block;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-leaderboard-wrapper {\n    -webkit-transform-origin: top right;\n            transform-origin: top right;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n}\n#ui-leaderboard-alive {\n  display: none;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  margin-bottom: 8px;\n  padding: 8px;\n  height: 64px;\n  width: 72px;\n}\n#ui-leaderboard-alive-faction {\n  display: none;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  height: 74px;\n  line-height: 38px;\n  margin-bottom: 8px;\n  padding: 4px;\n  width: 78px;\n}\n#ui-leaderboard-alive-faction .ui-players-alive-red {\n  color: #ff0000;\n  display: block;\n  font-size: 36px;\n  position: relative;\n}\n#ui-leaderboard-alive-faction .ui-players-alive-blue {\n  color: #00d2ff;\n  display: block;\n  font-size: 36px;\n  position: relative;\n}\n.ui-players-alive {\n  position: relative;\n  font-size: 54px;\n}\n.ui-leaderboard-header {\n  font-size: 24px;\n  margin-bottom: 8px;\n}\n#ui-kill-counter-wrapper {\n  display: none;\n  margin-top: 32px;\n}\n#ui-kill-counter {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  margin-bottom: 8px;\n  padding: 8px;\n  height: 64px;\n  width: 72px;\n}\n.ui-player-kills {\n  position: relative;\n  font-size: 54px;\n}\n.ui-kill-counter-header {\n  font-size: 24px;\n  margin-bottom: 8px;\n}\n#ui-killfeed-wrapper {\n  position: absolute;\n  color: #FFF;\n  font-size: 16px;\n  top: 12px;\n  right: 12px;\n  display: flex;\n}\n@media screen and (min-width: 851px) and (max-height: 768px), (max-width: 1200px) {\n  #ui-killfeed-wrapper {\n    -webkit-transform-origin: top right;\n            transform-origin: top right;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n}\n#ui-killfeed {\n  display: inline-block;\n  margin-left: 24px;\n  height: 100px;\n}\n#ui-killfeed-contents {\n  width: 800px;\n}\n#ui-killfeed-contents .killfeed-div {\n  position: absolute;\n  right: 100px;\n  background-color: rgba(0, 0, 0, 0.4);\n  padding: 4px 8px;\n  border-radius: 2px;\n  height: 22px;\n  line-height: 24px;\n}\n.killfeed-div div {\n  float: left;\n  font-size: 16px;\n  font-weight: bold;\n  color: #EFEEEE;\n}\n#ui-killfeed .killfeed-text {\n  max-width: 550px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n/**\n * ui-right-center\n */\n#ui-right-center:hover {\n  opacity: 1;\n}\n#ui-ammo-interactive {\n  width: 90px;\n}\n.ui-ammo {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  display: inline-block;\n  height: 52px;\n  margin-bottom: 5px;\n  margin-left: 3px;\n  margin-right: 3px;\n  width: 35px;\n}\n.ui-ammo > .ui-loot-count {\n  position: absolute;\n  font-size: 20px;\n  font-weight: bold;\n  top: 28px;\n  text-align: center;\n  width: 100%;\n}\n.ui-ammo-row {\n  display: flex;\n}\n.ui-ammo-row > div:not(:last-child) {\n  margin-right: 10px;\n}\n.ui-ammo > .ui-loot-image {\n  bottom: 0;\n  height: 22px;\n  margin-top: 5px;\n  position: absolute;\n  right: 6px;\n  top: 0;\n  width: 22px;\n}\n.ui-ammo > .ui-loot-overlay {\n  bottom: 0;\n  height: 22px;\n  margin-top: 5px;\n  position: absolute;\n  right: 6px;\n  top: 0;\n  width: 22px;\n}\n#ui-loot-ph1 {\n  opacity: 0 !important;\n}\n#ui-medical-interactive {\n  margin-bottom: 32px;\n}\n.ui-medical > .ui-loot-image {\n  position: absolute;\n  height: 30px;\n  width: 30px;\n  background-size: 30px;\n  background-repeat: no-repeat;\n  right: 5px;\n  margin-top: 1px;\n  top: 0;\n  bottom: 0;\n}\n.ui-medical:hover {\n  cursor: pointer !important;\n}\n.ui-loot {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  width: 85px;\n  height: 32px;\n  margin-left: auto;\n  margin-bottom: 5px;\n}\n.ui-loot:hover {\n  opacity: 1 !important;\n}\n.ui-outline-hover {\n  border: 2px solid rgba(0, 255, 0, 0);\n}\n.ui-outline-hover:hover {\n  -webkit-transition: border 100ms ease-out;\n  -moz-transition: border 100ms ease-out;\n  -o-transition: border 100ms ease-out;\n  border: 2px solid #00ff00;\n}\n.ui-scale-hover {\n  transform: scale(1);\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(1);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(1);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(1);\n  transition: all 100ms ease-in;\n}\n.ui-scale-hover:hover {\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(1.1);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(1.1);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(1.1);\n  transition: all 100ms ease-in;\n  transform: scale(1.1);\n}\n.ui-loot > .ui-loot-count {\n  position: absolute;\n  font-size: 24px;\n  font-weight: bold;\n  left: 10px;\n  top: 2px;\n  text-align: center;\n}\n@media (max-height: 864px), (max-width: 1024px) {\n  .ui-right-center-desktop {\n    top: 42%;\n    -webkit-transform-origin: right;\n            transform-origin: right;\n    -webkit-transform: translateY(-50%) scale(0.8);\n            transform: translateY(-50%) scale(0.8);\n  }\n  #ui-medical-interactive {\n    margin-bottom: 8px;\n  }\n}\n@media (max-height: 640px) {\n  .ui-right-center-desktop {\n    top: 42%;\n    -webkit-transform-origin: right;\n            transform-origin: right;\n    -webkit-transform: translateY(-50%) scale(0.7);\n            transform: translateY(-50%) scale(0.7);\n  }\n  #ui-medical-interactive {\n    margin-bottom: 8px;\n  }\n}\n/**\n     * ui-upper-center\n     */\n#ui-upper-center {\n  position: absolute;\n  display: flex;\n  color: #FFF;\n  top: 180px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#ui-announcement {\n  display: none;\n  color: yellow;\n  text-shadow: 2px 2px 0px #000000;\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  width: 100vw;\n}\n/**\n     * ui-lower-center\n     */\n#ui-lower-center {\n  position: absolute;\n  color: #FFF;\n  bottom: 40%;\n  left: 50%;\n}\n@media screen and (min-width: 851px) and (max-height: 768px), (max-width: 1200px) {\n  #ui-lower-center {\n    -webkit-transform-origin: left bottom;\n            transform-origin: left bottom;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n    bottom: 33%;\n  }\n}\n#ui-interaction {\n  display: flex;\n}\n#ui-interaction-press {\n  background: rgba(0, 0, 0, 0.4);\n  background-size: 80%;\n  background-position: center;\n  background-repeat: no-repeat;\n  border-radius: 5px;\n  font-weight: 700;\n  margin-left: -24px;\n  text-align: center;\n}\n.ui-interaction-large {\n  font-size: 42px;\n  height: 48px;\n  width: 48px;\n}\n.ui-interaction-small {\n  font-size: 26px;\n  height: 36px;\n  line-height: 36px;\n  min-width: 24px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n#ui-interaction-outer {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  margin-left: 10px;\n  padding: 0px 15px;\n  height: 48px;\n}\n#ui-interaction-outer #ui-interaction-description {\n  margin-top: 10px;\n  font-size: 24px;\n  text-align: center;\n}\n/**\n     * ui-bottom-left\n     */\n#ui-map-container {\n  position: absolute;\n  bottom: 52px;\n}\n#ui-map-info {\n  position: absolute;\n  color: white;\n  width: 100px;\n  height: 36px;\n  bottom: 218px;\n  left: 82px;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n}\n#ui-gas-icon {\n  padding: 6px;\n  display: inline-block;\n  height: 24px;\n  width: 24px;\n  margin-left: 2px;\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: 6px 6px;\n}\n.gas-icon {\n  background-image: url(../img/gui/gas.svg);\n}\n.danger-icon {\n  background-image: url(../img/gui/danger.svg);\n}\n.icon-pulse {\n  -webkit-animation: pulse 2s linear infinite;\n  animation: pulse 2s linear infinite;\n}\n#ui-gas-timer {\n  position: relative;\n  display: inline-block;\n  font-size: 24px;\n  text-align: center;\n  bottom: 10px;\n  left: 0px;\n}\n#ui-spec-counter {\n  position: absolute;\n  color: white;\n  width: 68px;\n  height: 28px;\n  bottom: 218px;\n  left: 6px;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n}\n#ui-spec-counter-icon {\n  padding: 6px;\n  display: inline-block;\n  height: 24px;\n  width: 18px;\n  margin-left: 2px;\n  background-size: 20px;\n  background-repeat: no-repeat;\n  background-position: 6px 4px;\n  background-image: url(../img/gui/eye.svg);\n}\n#ui-spec-counter-number {\n  position: relative;\n  display: inline-block;\n  font-size: 20px;\n  width: 24px;\n  text-align: center;\n  bottom: 15px;\n  left: 0px;\n}\n#ui-settings-container-desktop {\n  position: relative;\n  left: 16px;\n  bottom: 12px;\n}\n#ui-settings-container-desktop div {\n  cursor: pointer;\n}\n.ui-settings-button {\n  position: absolute;\n  color: white;\n  border-radius: 5px;\n  height: 48px;\n  width: 48px;\n  pointer-events: all;\n  opacity: 0.5;\n  background: rgba(0, 0, 0, 0.4);\n}\n#ui-map-minimize {\n  left: 185px;\n}\n.ui-settings-button img {\n  position: absolute;\n  left: 6px;\n  top: 6px;\n  height: 36px;\n  width: 36px;\n  background-size: 36px;\n  background-repeat: no-repeat;\n  transform: scale(1);\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(1);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(1);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(1);\n  transition: all 100ms ease-in;\n  transition: opacity 0.25s ease-out;\n  -moz-transition: opacity 0.25s ease-out;\n  -webkit-transition: opacity 0.25s ease-out;\n  -o-transition: opacity 0.25s ease-out;\n}\n.ui-settings-button .map-img-after {\n  display: none;\n}\n.ui-settings-button:hover {\n  opacity: 1;\n  -webkit-transition: all 100ms ease-in;\n  -webkit-transform: scale(1.1);\n  -ms-transition: all 100ms ease-in;\n  -ms-transform: scale(1.1);\n  -moz-transition: all 100ms ease-in;\n  -moz-transform: scale(1.1);\n  transition: all 100ms ease-in;\n  transform: scale(1.1);\n}\n/**\n     * ui-bottom-center-0\n     */\n#ui-bottom-center-0 {\n  position: absolute;\n  color: #FFF;\n  bottom: 12px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-bottom-center-0 {\n    -webkit-transform-origin: bottom;\n            transform-origin: bottom;\n    -webkit-transform: translateX(-50%) scale(0.85);\n            transform: translateX(-50%) scale(0.85);\n  }\n}\n#ui-equipped-ammo-wrapper {\n  /* Taken from ui-bottom-center-0 */\n  position: absolute;\n  color: #FFF;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  bottom: 62px;\n}\n#ui-equipped-ammo {\n  margin-bottom: 12px;\n  text-align: center;\n  opacity: 1.0;\n}\n#ui-bullet-counter {\n  display: inline-block;\n  width: 175px;\n  height: 56px;\n  text-align: center;\n  text-shadow: 2px 2px #000000;\n}\n#ui-bullet-counter #ui-current-clip {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  font-size: 44px;\n  font-weight: bold;\n  width: 100px;\n  height: 50px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  left: 50%;\n  position: relative;\n  text-align: center;\n}\n#ui-bullet-counter #ui-remaining-ammo {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 32px;\n  width: 65px;\n  height: 32px;\n  left: 82%;\n  position: absolute;\n  text-align: center;\n  top: 18px;\n}\n#ui-boost-counter {\n  display: inline-flex;\n  width: 412px;\n}\n#ui-boost-counter .ui-boost-base {\n  background: rgba(0, 0, 0, 0.4);\n  height: 10px;\n  margin-bottom: 8px;\n}\n#ui-boost-counter-0 {\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n  width: 100px;\n  margin-right: 3px;\n}\n#ui-boost-counter-0 .ui-bar-inner {\n  background: #ff901a;\n}\n#ui-boost-counter-1 {\n  width: 100px;\n  margin-left: 3px;\n  margin-right: 3px;\n}\n#ui-boost-counter-1 .ui-bar-inner {\n  background: #ff751a;\n}\n#ui-boost-counter-2 {\n  width: 150px;\n  margin-left: 3px;\n  margin-right: 3px;\n}\n#ui-boost-counter-2 .ui-bar-inner {\n  background: #ff6616;\n}\n#ui-boost-counter-3 {\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n  width: 50px;\n  margin-left: 3px;\n}\n#ui-boost-counter-3 .ui-bar-inner {\n  background: #ff5600;\n}\n.ui-boost-base .ui-bar-inner {\n  border-radius: inherit;\n  width: 0px;\n  height: 10px;\n}\n.ui-health-flair {\n  background-size: 64px;\n  background-repeat: no-repeat;\n  background-position: center;\n  display: none;\n  height: 64px;\n  position: absolute;\n  width: 64px;\n  z-index: 2;\n}\n#ui-health-flair-left {\n  left: -32px;\n  top: 13px;\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n#ui-health-flair-right {\n  right: -32px;\n  top: 13px;\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n#ui-health-counter {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  width: 400px;\n  height: 32px;\n  padding: 6px;\n}\n#ui-health-counter .ui-bar-inner {\n  z-index: 1;\n  position: absolute;\n  border-radius: 5px;\n  width: 100%;\n  height: 32px;\n  transition: width 0.0s;\n  transition-property: width;\n  transition-duration: 0.0s;\n  transition-timing-function: ease-out;\n  transition-delay: initial;\n}\n#ui-health-container {\n  width: 400px;\n  position: relative;\n}\n#ui-health-counter .ui-bar-danger {\n  background: rgba(255, 0, 0, 0.8);\n  -webkit-animation-name: pulse;\n          animation-name: pulse;\n  -webkit-animation-duration: 0.5s;\n          animation-duration: 0.5s;\n  -webkit-animation-timing-function: ease-out;\n          animation-timing-function: ease-out;\n  -webkit-animation-delay: 0;\n          animation-delay: 0;\n  -webkit-animation-direction: alternate;\n          animation-direction: alternate;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n  -webkit-animation-fill-mode: none;\n          animation-fill-mode: none;\n  -webkit-animation-play-state: running;\n          animation-play-state: running;\n}\n#ui-health-counter #ui-health-depleted {\n  z-index: 0;\n  background: #929292;\n  transition: width 1.0s;\n  transition-property: width;\n  transition-duration: 1.0s;\n  transition-timing-function: ease-out;\n  transition-delay: initial;\n}\n.health-bar-pulse {\n  -webkit-animation: pulsewhite 1s linear infinite;\n  animation: pulsewhite 1s linear infinite;\n}\n@-webkit-keyframes pulsewhite {\n  0% {\n    background-color: rgba(0, 0, 0, 0.6);\n  }\n  50% {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n  100% {\n    background-color: rgba(0, 0, 0, 0.6);\n  }\n}\n@keyframes pulsewhite {\n  0% {\n    background-color: rgba(0, 0, 0, 0.6);\n  }\n  50% {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n  100% {\n    background-color: rgba(0, 0, 0, 0.6);\n  }\n}\n@-webkit-keyframes pulse {\n  0% {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n  50% {\n    background-color: rgba(255, 0, 0, 0.8);\n  }\n  100% {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n}\n@keyframes pulse {\n  0% {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n  50% {\n    background-color: rgba(255, 0, 0, 0.8);\n  }\n  100% {\n    background-color: rgba(0, 0, 0, 0.8);\n  }\n}\n/**\n     * ui-bottom-center-1\n     */\n#ui-bottom-center-1 {\n  z-index: 3;\n  position: absolute;\n  color: #FFF;\n  bottom: 220px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-bottom-center-1 {\n    -webkit-transform-origin: bottom;\n            transform-origin: bottom;\n    -webkit-transform: translateX(-50%) scale(0.85);\n            transform: translateX(-50%) scale(0.85);\n    bottom: 138px;\n  }\n}\n#ui-kills {\n  display: none;\n  text-align: center;\n  background: rgba(0, 0, 0, 0.4);\n  color: #FFF;\n  border-radius: 5px;\n  padding: 8px;\n}\n#ui-kill-text {\n  font-size: 18px;\n}\n#ui-kill-count {\n  font-weight: bold;\n  color: #ff4100;\n  font-size: 32px;\n  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n}\n/**\n     * ui-bottom-center-2\n     */\n#ui-bottom-center-2 {\n  position: absolute;\n  color: #FFF;\n  bottom: 160px;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#ui-pickup-message {\n  color: white;\n  opacity: 0;\n  text-shadow: 2px 2px 0px #000000;\n  font-size: 32px;\n  font-weight: bold;\n  text-align: center;\n  width: 100vw;\n}\n/**\n * ui-bottom-center-left\n */\n#ui-bottom-center-left {\n  bottom: 12px;\n  color: #FFF;\n  pointer-events: auto;\n  position: absolute;\n  right: 73%;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-bottom-center-left {\n    right: 75%;\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7);\n  }\n}\n#ui-perk-0 {\n  border: 2px solid transparent;\n  display: none;\n  left: 4px;\n}\n#ui-perk-1 {\n  border: 2px solid transparent;\n  display: none;\n  right: 0px;\n}\n.ui-perk-pulse {\n  -webkit-animation-name: perkPulse;\n  -webkit-animation-duration: 1.5s;\n  -webkit-animation-iteration-count: 2;\n}\n@-webkit-keyframes perkPulse {\n  from {\n    background-color: rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0px 0px 30px rgba(0, 0, 0, 0);\n  }\n  50% {\n    background-color: rgba(255, 210, 0, 0.75);\n    -webkit-box-shadow: 0px 0px 30px #ffd200;\n  }\n  to {\n    background-color: rgba(0, 0, 0, 0.4);\n    -webkit-box-shadow: 0px 0px 30px rgba(0, 0, 0, 0);\n  }\n}\n/* Tooltip container */\n.tooltip-perk {\n  position: relative;\n}\n/* Tooltip text */\n.tooltip-perk .tooltip-text {\n  visibility: hidden;\n  width: 180px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  padding: 5px 0;\n  border-radius: 6px;\n  position: absolute;\n  z-index: 1;\n  left: 50%;\n  opacity: 0.75;\n  bottom: 115%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n.tooltip-perk .tooltip-text::after {\n  content: " ";\n  position: absolute;\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: black transparent transparent transparent;\n}\n.tooltip-perk-title {\n  font-size: 18px;\n  font-weight: bold;\n  padding: 4px;\n  color: yellow;\n}\n.tooltip-perk-description {\n  font-size: 16px;\n  padding: 4px;\n}\n.tooltip-perk-description span {\n  font-size: 16px;\n}\n.tooltip-perk:hover .tooltip-text {\n  visibility: visible;\n}\n/**\n * ui-bottom-center-right\n */\n#ui-bottom-center-right {\n  position: absolute;\n  color: #FFF;\n  bottom: 12px;\n  left: 73%;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-bottom-center-right {\n    left: 75%;\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7);\n  }\n}\n.ui-armor-counter {\n  position: absolute;\n  bottom: 0px;\n  display: block;\n  width: 48px;\n  height: 60px;\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  margin-left: 4px;\n}\n#ui-armor-helmet {\n  right: 4px;\n}\n#ui-armor-backpack {\n  left: 60px;\n  border: 2px solid transparent;\n}\n.ui-armor-level {\n  position: relative;\n  font-size: 16px;\n  font-weight: bold;\n  bottom: 24px;\n  text-align: center;\n  text-shadow: 1px 1px #000000;\n  /*cursor: inherit;*/\n}\n.ui-armor-counter-inner {\n  z-index: 1;\n  position: absolute;\n  background: rgba(25, 25, 25, 0.75);\n  border-radius: 5px;\n  width: 100%;\n  height: 0px;\n  bottom: 0px;\n}\n.ui-armor-counter .ui-armor-count {\n  z-index: 2;\n  text-shadow: 2px 2px #000000;\n  position: relative;\n  font-size: 18px;\n  font-weight: bold;\n  margin-top: -28px;\n  text-align: center;\n}\n.ui-armor-counter .ui-armor-image {\n  margin: auto;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  z-index: 0;\n  position: absolute;\n  height: 36px;\n  width: 36px;\n}\n.ui-ability-cooldown {\n  font-size: 38px;\n  font-weight: bold;\n  left: 50%;\n  position: absolute;\n  text-align: center;\n  text-shadow: 2px 2px #000000;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  width: 100%;\n  z-index: 2;\n}\n@media screen and (max-width: 850px) {\n  .ui-ability-cooldown {\n    font-size: 20px;\n  }\n}\n.ui-ability-key {\n  font-size: 20px;\n  font-weight: bold;\n  left: 2px;\n  position: absolute;\n  bottom: -2px;\n}\n.ui-perk-mobile {\n  bottom: 0px !important;\n  left: -50px;\n  pointer-events: all;\n  top: 4px !important;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n/**\n * ui-bottom-right\n */\n#ui-bottom-right {\n  position: absolute;\n  color: #FFF;\n  bottom: 12px;\n  right: 12px;\n}\n@media (max-height: 768px), (max-width: 1200px) {\n  #ui-bottom-right {\n    -webkit-transform-origin: bottom right;\n            transform-origin: bottom right;\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7);\n  }\n}\n#ui-weapon-container {\n  width: 192px;\n}\n.ui-weapon-info {\n  margin-bottom: 5px;\n  border-radius: 5px;\n  border: 2px solid transparent;\n}\n.ui-weapon-switch {\n  position: absolute;\n  right: 0px;\n  opacity: 0.6;\n  border-radius: 5px;\n  border: 2px solid transparent;\n  width: 160px;\n  height: 60px;\n  margin-left: auto;\n  pointer-events: all;\n  cursor: pointer !important;\n}\n#ui-weapon-id-1 {\n  bottom: 210px;\n}\n#ui-weapon-id-2 {\n  bottom: 140px;\n}\n#ui-weapon-id-3 {\n  bottom: 70px;\n}\n#ui-weapon-id-4 {\n  bottom: 0px;\n}\n.ui-weapon-name {\n  position: absolute;\n  font-size: 18px;\n  font-weight: bold;\n  right: 8px;\n  margin-top: 38px;\n  text-align: center;\n}\n.ui-weapon-number {\n  position: absolute;\n  font-size: 24px;\n  font-weight: bold;\n  right: 8px;\n  text-align: center;\n}\n.ui-weapon-exp {\n  display: none;\n  position: absolute;\n  height: 32px;\n  width: 32px;\n  font-size: 18px;\n  font-weight: bold;\n  line-height: 34px;\n  right: 78px;\n  margin-top: 26px;\n  text-align: center;\n}\n.ui-weapon-image {\n  display: none;\n  position: relative;\n  height: 60px;\n  width: 60px;\n  left: 4px;\n  background-size: 60px;\n  background-repeat: no-repeat;\n}\n#ui-weapon-id-4 .ui-weapon-image {\n  height: 52px;\n  width: 52px;\n  left: 4px;\n  top: 4px;\n  background-size: 52px;\n}\n.ui-weapon-dragged {\n  position: fixed !important;\n  width: 160px !important;\n  right: initial !important;\n  bottom: initial !important;\n  pointer-events: none !important;\n}\n/**\n     * ui-stats, end game screen\n     */\n#ui-stats {\n  display: none;\n}\n#ui-stats-bg {\n  display: none;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.75);\n  pointer-events: none;\n  z-index: 2;\n}\n#ui-stats-contents {\n  border-radius: 5px;\n  color: #FFF;\n  height: 100%;\n  left: 50%;\n  position: absolute;\n  text-align: center;\n  top: 0%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  width: 100%;\n  z-index: 3;\n}\n@media (max-height: 860px) {\n  #ui-stats-contents {\n    top: 0%;\n  }\n}\n#ui-stats-contents-inner {\n  margin-top: 75px;\n}\n@media (max-height: 768px) {\n  #ui-stats-contents-inner {\n    margin-top: 25px;\n  }\n}\n@media screen and (max-width: 850px) {\n  #ui-stats-contents-inner {\n    margin-top: 0px;\n  }\n}\n@media (max-height: 768px) {\n  #ui-stats-header {\n    -webkit-transform: scale(0.75);\n            transform: scale(0.75);\n    -webkit-transform-origin: top;\n            transform-origin: top;\n  }\n}\n.ui-stats-header-title {\n  font-weight: bold;\n  font-size: 48px;\n  margin: 20px;\n  color: gold;\n}\n.ui-stats-header-reason {\n  font-size: 24px;\n}\n.ui-stats-header-overview {\n  display: inline;\n  margin: 10px;\n}\n.ui-stats-header-overview div {\n  display: inline;\n  padding-bottom: 12px;\n  border-bottom: 2px solid rgba(255, 255, 255, 0.25);\n}\n.ui-stats-header-overview div:not(:first-child) {\n  margin-left: 100px;\n}\n.ui-stats-header-red-team {\n  color: #cc0000;\n  font-weight: bold;\n}\n.ui-stats-header-blue-team {\n  color: #007eff;\n  font-weight: bold;\n}\nspan.ui-stats-header-stat {\n  font-size: 32px;\n}\nspan.ui-stats-header-value {\n  margin-left: 24px;\n  font-size: 48px;\n  font-weight: bold;\n}\n#ui-stats-info-box {\n  position: relative;\n  left: 50%;\n  margin: auto;\n  margin-top: 50px;\n  height: 190px;\n  display: flex;\n}\n@media (max-height: 768px) {\n  #ui-stats-info-box {\n    margin-top: -30px;\n    -webkit-transform: scale(0.9);\n            transform: scale(0.9);\n    -webkit-transform-origin: left;\n            transform-origin: left;\n  }\n}\n@media (max-width: 1024px) {\n  #ui-stats-info-box {\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n    -webkit-transform-origin: left;\n            transform-origin: left;\n  }\n}\n.ui-stats-info-player {\n  position: relative;\n  width: 250px;\n  background-color: rgba(0, 0, 0, 0.75);\n  border-radius: 4px;\n  border: 2px solid black;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n.ui-stats-info-status:after {\n  content: "";\n  display: block;\n  position: absolute;\n  top: 15%;\n  left: 25%;\n  background-image: url(../img/gui/skull.svg);\n  background-repeat: no-repeat;\n  background-size: 128px;\n  width: 100%;\n  height: 100%;\n  opacity: 0.1;\n  z-index: -1;\n}\n.ui-stats-info-player-name {\n  color: gold;\n  font-size: 24px;\n  font-weight: bold;\n  font-style: italic;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 240px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.ui-stats-info-player-badge {\n  background-size: 56px;\n  background-repeat: no-repeat;\n  background-position: center;\n  height: 56px;\n  left: auto;\n  position: absolute;\n  top: -40px;\n  width: 100%;\n}\n.ui-stats-info-player-red-leader {\n  background-image: url(../img/gui/star-red.svg);\n}\n.ui-stats-info-player-red-ribbon {\n  background-image: url(../img/gui/ribbon-red.svg);\n}\n.ui-stats-info-player-blue-leader {\n  background-image: url(../img/gui/star-blue.svg);\n}\n.ui-stats-info-player-blue-ribbon {\n  background-image: url(../img/gui/ribbon-blue.svg);\n}\n.ui-stats-info {\n  display: flex;\n  height: 36px;\n  margin: auto;\n}\n.ui-stats-info > div {\n  padding: 8px;\n  font-size: 18px;\n  line-height: 12px;\n  text-align: left;\n  font-weight: bold;\n}\n.ui-stats-info > div:first-child {\n  width: 55%;\n  margin-right: 4px;\n  text-align: right;\n  font-weight: normal;\n}\n.ui-stats-reason {\n  display: flex;\n  height: 72px;\n  margin: auto;\n}\n.ui-stats-reason div {\n  padding: 8px;\n  margin: auto;\n  width: 100%;\n  text-align: center;\n  font-size: 16px;\n}\n.ui-stats-reason .ui-stats-reason-dead {\n  color: red;\n}\n.ui-stats-reason .ui-stats-reason-alive {\n  color: lawngreen;\n}\n#ui-stats-options {\n  position: absolute;\n  left: 50%;\n  margin-top: 20px;\n  min-height: 60px;\n  z-index: 1;\n}\n@media (max-height: 768px) {\n  #ui-stats-options {\n    margin-top: 8px;\n    -webkit-transform: scale(0.9);\n            transform: scale(0.9);\n    -webkit-transform-origin: top;\n            transform-origin: top;\n  }\n}\n.ui-stats-restart {\n  position: absolute;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  width: 200px;\n  margin: auto;\n  margin-bottom: 20px;\n}\n.ui-stats-spectate {\n  position: absolute;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  left: 102px;\n  width: 125px;\n  background: #50afab;\n  border-bottom: 2px solid #387c79;\n  box-shadow: inset 0 -2px #387c79;\n}\n.ui-stats-ad-container {\n  display: none;\n  margin-top: 80px;\n}\n@media (max-height: 768px) {\n  .ui-stats-ad-container {\n    margin-top: 70px;\n  }\n}\n/* Tooltip container */\n.tooltip {\n  position: relative;\n}\n/* Tooltip text */\n.tooltip .tooltip-text {\n  visibility: hidden;\n  width: 240px;\n  background-color: black;\n  color: #fff;\n  text-align: center;\n  padding: 5px 0;\n  border-radius: 6px;\n  position: absolute;\n  z-index: 1;\n  right: 110%;\n  opacity: 0.75;\n  top: 50%;\n  -webkit-transform: translateY(-50%);\n          transform: translateY(-50%);\n}\n.tooltip .tooltip-text::after {\n  content: " ";\n  position: absolute;\n  top: 50%;\n  left: 100%;\n  margin-top: -5px;\n  border-width: 5px;\n  border-style: solid;\n  border-color: transparent transparent transparent black;\n}\n.tooltip-title {\n  font-size: 18px;\n  font-weight: bold;\n  padding: 4px;\n  color: yellow;\n}\n.tooltip-description {\n  font-size: 16px;\n  padding: 4px;\n}\n.tooltip-description span {\n  font-size: 16px;\n}\n.tooltip:hover .tooltip-text {\n  visibility: visible;\n}\n/**\n     * editor\n     */\n#ui-editor-top-center {\n  position: absolute;\n  color: #FFF;\n  top: 0%;\n  left: 50%;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n}\n#ui-editor-top-right {\n  position: absolute;\n  color: #FFF;\n  font-size: 16px;\n  top: 12px;\n  right: 12px;\n}\n.ui-editor-header {\n  text-align: center;\n  font-weight: bold;\n  font-size: 16px;\n  padding: 8px;\n}\n.ui-editor-info {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  font-size: 36px;\n  margin-bottom: 8px;\n  padding: 8px;\n}\n.ui-editor-list {\n  margin: 0px;\n  list-style: none;\n}\n#ui-editor-info-list {\n  padding: 0px;\n}\n/*\n     * Profiler\n     */\n#ui-profiler-top-left {\n  position: absolute;\n  color: #FFF;\n  font-size: 16px;\n  top: 12px;\n  left: 12px;\n  text-align: center;\n  display: flex;\n}\n.ui-profiler-list {\n  background: rgba(0, 0, 0, 0.4);\n  border-radius: 5px;\n  margin-right: 16px;\n  padding: 8px;\n}\n.ui-profiler-list-header {\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n.ui-profiler-list ul {\n  list-style: none;\n  text-align: left;\n  padding: 0px;\n  margin: 0px;\n}\n.ui-profiler-list li {\n  display: flex;\n}\n.kv {\n  font-family: monospace;\n  font-size: 14px;\n  font-weight: normal;\n}\n.kv:last-child {\n  width: 100%;\n  text-align: right;\n}\n/* Hide mobile-only elements */\n#ui-settings-container-mobile {\n  display: none;\n}\n@media screen and (max-width: 850px) {\n  * {\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n  }\n  /**\n * ui-touches\n */\n  .ui-touch-down {\n    display: none;\n    position: fixed;\n    background-color: rgba(0, 0, 0, 0.5);\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .ui-touch-down-landscape {\n    width: 112px;\n    height: 112px;\n    border-radius: 56px;\n  }\n  .ui-touch-down-portrait {\n    width: 96px;\n    height: 96px;\n    border-radius: 48px;\n  }\n  .ui-touch-pos {\n    display: none;\n    position: fixed;\n    background-color: rgba(0, 0, 0, 0.5);\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .ui-touch-pos-landscape {\n    width: 64px;\n    height: 64px;\n    border-radius: 32px;\n  }\n  .ui-touch-pos-portrait {\n    width: 48px;\n    height: 48px;\n    border-radius: 24px;\n  }\n  .btn-game-menu {\n    position: relative;\n    margin: auto;\n    margin-top: 2px;\n    margin-bottom: 4px;\n    color: white;\n    font-size: 14px;\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n    background-color: #50afab;\n    border-bottom: 2px solid #387c79;\n    box-shadow: inset 0 -2px #387c79;\n    background-repeat: no-repeat;\n    cursor: pointer;\n    text-align: center;\n    line-height: 30px;\n    display: block;\n    width: 100%;\n    height: 30px;\n    border: 0px;\n    border-radius: 5px;\n    -moz-border-radius: 5px;\n    -webkit-border-radius: 5px;\n    box-sizing: border-box;\n  }\n  #btn-game-fullscreen {\n    background-size: 22px;\n    background-position: 4px 2px;\n    background-image: url(../img/gui/minimize.svg);\n  }\n  #btn-game-aim-line {\n    background-size: 18px;\n    background-position: 6px 5px;\n    margin-bottom: 8px;\n  }\n  #btn-game-sound {\n    background-size: 30px;\n    background-position: 3px 0px;\n    margin-bottom: 8px;\n  }\n  #btn-game-quit {\n    margin-top: 20px;\n    background-size: 34px;\n    background-position: -2px -3px;\n    background-image: url(../img/gui/quit.svg);\n  }\n  #btn-game-resume {\n    margin-top: 20px;\n    background-size: 34px;\n    background-position: -1px -1px;\n    background-image: url(../img/gui/resume.svg);\n  }\n  /**\n     * ui-top-center\n     */\n  #ui-top-center {\n    position: absolute;\n    color: #FFF;\n    top: 15%;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  #ui-top-center .top-center-text {\n    text-align: center;\n    width: 100vw;\n    padding: 4px;\n  }\n  #ui-waiting-text {\n    display: none;\n    color: white;\n    text-shadow: 1px 1px 0px #000000;\n    font-size: 16px;\n    font-weight: bold;\n  }\n  #ui-waiting-text span {\n    font-size: 16px;\n    font-weight: bold;\n  }\n  .top-center-text .spectate-text {\n    display: inline-block;\n    text-shadow: 1px 1px 0px #000000;\n    font-size: 16px;\n    font-weight: bold;\n    overflow: hidden;\n    height: 32px;\n  }\n  .top-center-text .spectate-desc {\n    color: white;\n    margin-right: 8px;\n  }\n  .ui-spectate-mode {\n    display: none;\n  }\n  #ui-spectate-text {\n    position: relative;\n  }\n  #spectate-player {\n    max-width: 250px;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    color: cyan;\n  }\n  /**\n * ui-top-center-scopes\n */\n  #ui-top-center-scopes-wrapper {\n    position: absolute;\n    color: #FFF;\n    left: 6px;\n    top: 132px;\n    -webkit-transform: initial;\n            transform: initial;\n    width: initial;\n  }\n  #ui-top-center-scopes {\n    margin-top: 6px;\n    text-align: center;\n    color: white;\n  }\n  .ui-zoom {\n    display: inline-block;\n    margin-left: -12px;\n    margin-right: -12px;\n    -webkit-transform: scale(0.6);\n            transform: scale(0.6);\n    background: rgba(0, 0, 0, 0.3);\n    border-radius: 32px;\n    width: 42px;\n    height: 42px;\n    opacity: 0.3;\n    pointer-events: all;\n  }\n  .ui-zoom-active {\n    vertical-align: baseline;\n    opacity: 1.0;\n    margin-left: 0px;\n    margin-right: 0px;\n    -webkit-transition: all 100ms ease-in;\n    -webkit-transform: scale(1);\n    -ms-transition: all 100ms ease-in;\n    -ms-transform: scale(1);\n    -moz-transition: all 100ms ease-in;\n    -moz-transform: scale(1);\n    transition: all 100ms ease-in;\n    transition: opacity 0.25s ease-out;\n    -moz-transition: opacity 0.25s ease-out;\n    -webkit-transition: opacity 0.25s ease-out;\n    -o-transition: opacity 0.25s ease-out;\n  }\n  .ui-zoom .ui-zoom-image {\n    width: 48px;\n    height: 48px;\n    opacity: 0.4;\n    padding: 2px;\n  }\n  .ui-zoom .ui-zoom-text {\n    margin-top: 14px;\n    width: 100%;\n  }\n  .ui-zoom .ui-zoom-level {\n    font-size: 24px;\n    line-height: 16px;\n    text-align: center;\n    width: 100%;\n    /*cursor: inherit;*/\n  }\n  .ui-zoom .ui-zoom-append {\n    font-size: 24px;\n  }\n  .ui-zoom-inactive {\n    display: none;\n    margin-left: -8px;\n    margin-right: -8px;\n    transition: all 100ms ease-in;\n    -webkit-transform: scale(0.6);\n            transform: scale(0.6);\n  }\n  /**\n     * ui-team-pings and ui-emotes\n     */\n  .ui-emote-wheel {\n    z-index: 3;\n    display: none;\n    position: fixed;\n  }\n  .ui-emote-parent {\n    opacity: 1.0;\n  }\n  .ui-emote-hl {\n    z-index: 2;\n    display: none;\n  }\n  .ui-emote {\n    position: fixed;\n    width: 256px;\n    height: 256px;\n    background-size: 256px;\n    background-repeat: no-repeat;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .ui-emote-bg-circle {\n    opacity: 0.65;\n    background-image: url(../img/gui/ping-part-circle.svg);\n  }\n  .ui-emote-bg-quarter {\n    opacity: 0.65;\n    background-image: url(../img/gui/ping-part-quarter.svg);\n  }\n  .ui-emote-bg-eighth {\n    opacity: 0.65;\n    background-image: url(../img/gui/ping-part-eighth.svg);\n  }\n  .ui-emote-middle .ui-emote-image {\n    width: 24px !important;\n    height: 24px !important;\n    background-size: 24px !important;\n    background-image: none !important;\n  }\n  .ui-emote-top .ui-emote-image {\n    margin-top: -78px;\n    background-image: url(../img/gui/ping-team-danger.svg);\n  }\n  .ui-emote-right .ui-emote {\n    -webkit-transform: translate(-50%, -50%) rotate(90deg);\n            transform: translate(-50%, -50%) rotate(90deg);\n  }\n  .ui-emote-right .ui-emote-image {\n    margin-left: 78px;\n    background-image: url(../img/gui/ping-team-coming.svg);\n  }\n  .ui-emote-bottom .ui-emote {\n    -webkit-transform: translate(-50%, -50%) rotate(180deg);\n            transform: translate(-50%, -50%) rotate(180deg);\n  }\n  .ui-emote-bottom .ui-emote-image {\n    margin-top: 78px;\n    background-image: url(../img/gui/ping-team-help.svg);\n  }\n  .ui-emote-left .ui-emote {\n    -webkit-transform: translate(-50%, -50%) rotate(270deg);\n            transform: translate(-50%, -50%) rotate(270deg);\n  }\n  .ui-emote-left .ui-emote-image {\n    margin-left: -78px;\n    background-image: url(../img/gui/ping-team-help.svg);\n  }\n  .ui-emote-top-left .ui-emote-image {\n    margin-left: -80px;\n    margin-top: -30px;\n    background-image: url(../img/loot/loot-ammo-box.svg);\n  }\n  .ui-emote-bottom-left .ui-emote {\n    -webkit-transform: translate(-50%, -50%) rotate(-45deg);\n            transform: translate(-50%, -50%) rotate(-45deg);\n  }\n  .ui-emote-bottom-left .ui-emote-image {\n    margin-left: -80px;\n    margin-top: 30px;\n    background-image: url(../img/loot/loot-medical-healthkit.svg);\n  }\n  .ui-emote-circle .ui-emote-hl {\n    background-image: url(../img/gui/ping-part-circle-highlight.svg);\n  }\n  .ui-emote-quarter .ui-emote-hl {\n    background-image: url(../img/gui/ping-part-quarter-highlight.svg);\n  }\n  .ui-emote-eighth .ui-emote-hl {\n    background-image: url(../img/gui/ping-part-eighth-highlight.svg);\n  }\n  .ui-emote-image {\n    z-index: 1;\n    position: fixed;\n    background-repeat: no-repeat;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .ui-emote-image-large {\n    width: 80px;\n    height: 80px;\n    background-size: 64px;\n    background-position: center;\n  }\n  .ui-emote-image-small {\n    width: 35px;\n    height: 35px;\n    background-size: 35px;\n  }\n  /**\n     * ui-team-indicators\n     */\n  .ui-team-indicator {\n    z-index: 2;\n    display: none;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    border-radius: 32px;\n    width: 64px;\n    height: 64px;\n    background-size: 64px;\n    background-repeat: no-repeat;\n    background-image: url(../img/gui/indicator.svg);\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .ui-team-indicator-pos {\n    opacity: 0.75;\n    position: relative;\n    border-radius: 24px;\n    width: 32px;\n    height: 32px;\n    top: 23px;\n    left: 32px;\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  .ui-team-indicator-image {\n    width: 32px;\n    height: 32px;\n    background-size: 32px;\n    background-repeat: no-repeat;\n    background-image: url(../img/gui/ping-team-danger.svg);\n  }\n  .ui-indicator-ping-border {\n    z-index: 0;\n    display: none;\n    position: fixed;\n    top: 0px;\n    left: 0px;\n    width: 160px;\n    height: 160px;\n    position: relative;\n    background-size: 160px;\n    background-repeat: no-repeat;\n    background-image: url(../img/gui/ping-border.svg);\n    -webkit-transform: translate(-50%, -50%);\n            transform: translate(-50%, -50%);\n  }\n  /**\n * ui-top-left\n */\n  #ui-top-left {\n    position: absolute;\n    color: #FFF;\n    font-size: 16px;\n    top: 6px;\n    left: 6px;\n    display: block;\n  }\n  .ui-bg-standard {\n    background: rgba(0, 0, 0, 0.24);\n    border-radius: 5px;\n  }\n  #ui-team {\n    position: fixed;\n    left: 128px;\n  }\n  .ui-team-member {\n    display: none;\n    position: relative;\n    width: 110px;\n    height: 20px;\n    padding: 4px;\n    margin-bottom: 4px;\n  }\n  .ui-team-member-name {\n    font-weight: bold;\n    text-shadow: 1px 1px 0px #000000;\n    font-size: 10px;\n    max-width: 100px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .ui-team-member-color {\n    position: absolute;\n    top: 4px;\n    right: 4px;\n    border-radius: 9px;\n    width: 9px;\n    height: 9px;\n  }\n  .ui-background-yellow {\n    background-color: yellow;\n  }\n  .ui-background-blue {\n    background-color: blue;\n  }\n  .ui-background-red {\n    background-color: red;\n  }\n  .ui-background-purple {\n    background-color: purple;\n  }\n  .ui-background-cyan {\n    background-color: cyan;\n  }\n  .ui-team-member-status {\n    display: none;\n    position: absolute;\n    top: 2px;\n    right: -24px;\n    width: 20px;\n    height: 20px;\n    background-size: 20px;\n    background-repeat: no-repeat;\n  }\n  .ui-team-member-status-downed {\n    border-radius: 16px;\n    display: block !important;\n    background-image: url(../img/gui/down.svg) !important;\n  }\n  .ui-team-member-status-dead {\n    display: block !important;\n    background-image: url(../img/gui/skull-team.svg) !important;\n    opacity: 0.5 !important;\n  }\n  .ui-team-member-status-disconnected {\n    display: block !important;\n    background-image: url(../img/gui/close.svg) !important;\n    opacity: 0.5 !important;\n  }\n  .ui-team-member-health {\n    margin-top: 2px;\n  }\n  .ui-team-member-health .ui-bar-inner {\n    background-color: white;\n    z-index: 1;\n    position: absolute;\n    border-radius: 4px;\n    width: 110px;\n    height: 5px;\n    transition: width 0.0s;\n    transition-property: width;\n    transition-duration: 0.0s;\n    transition-timing-function: ease-out;\n    transition-delay: initial;\n  }\n  .ui-team-member-health .ui-bar-danger {\n    background: rgba(255, 0, 0, 0.8);\n    -webkit-animation-name: pulse;\n            animation-name: pulse;\n    -webkit-animation-duration: 0.5s;\n            animation-duration: 0.5s;\n    -webkit-animation-timing-function: ease-out;\n            animation-timing-function: ease-out;\n    -webkit-animation-delay: 0;\n            animation-delay: 0;\n    -webkit-animation-direction: alternate;\n            animation-direction: alternate;\n    -webkit-animation-iteration-count: infinite;\n            animation-iteration-count: infinite;\n    -webkit-animation-fill-mode: none;\n            animation-fill-mode: none;\n    -webkit-animation-play-state: running;\n            animation-play-state: running;\n  }\n  .ui-team-member-health .ui-health-depleted {\n    z-index: 0;\n    background: #929292;\n    transition: width 1.0s;\n    transition-property: width;\n    transition-duration: 1.0s;\n    transition-timing-function: ease-out;\n    transition-delay: initial;\n  }\n  #ui-spectate-options-wrapper {\n    bottom: 6px;\n    position: fixed;\n    left: 6px;\n    top: initial !important;\n  }\n  #ui-spectate-options {\n    bottom: 0px;\n    z-index: 1;\n    position: absolute;\n    pointer-events: all;\n    width: 100%;\n  }\n  #ui-spectate-buttons {\n    display: inline-block;\n    width: 124px;\n    padding: 8px 8px 4px 8px;\n    text-align: center;\n  }\n  #ui-spectate-options a {\n    position: relative;\n    color: white;\n    height: 28px;\n    margin-bottom: 2px;\n    line-height: 26px;\n    font-size: 12px;\n    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);\n    background: #50afab;\n    border-bottom: 2px solid #387c79;\n    box-shadow: none;\n    cursor: pointer;\n  }\n  #btn-spectate-prev-player {\n    margin-bottom: 12px !important;\n  }\n  #btn-spectate-view-stats {\n    margin-bottom: 12px !important;\n  }\n  #ui-spectate-stats {\n    position: absolute;\n    top: 0px;\n    left: 146px;\n    width: 160px;\n    display: none;\n  }\n  #ui-spectate-stats-header {\n    text-align: center;\n    font-size: 16px;\n    font-weight: bold;\n    padding: 6px;\n    color: white;\n  }\n  #ui-spectate-stats-table {\n    width: 100%;\n    background-color: transparent;\n    margin: auto;\n    margin-right: 0px;\n    margin-bottom: 4px;\n    border-collapse: collapse;\n  }\n  #ui-spectate-stats tbody,\n  #ui-spectate-stats td,\n  #ui-spectate-stats th {\n    padding: 0px 2px 2px 14px;\n    font-size: 10px;\n  }\n  .ui-spectate-stats-category {\n    width: 75px;\n    color: rgba(255, 255, 255, 0.75);\n  }\n  .ui-spectate-stats-value {\n    width: 75px;\n    color: white;\n  }\n  /**\n     * ui-top-right\n     */\n  #ui-top-right {\n    position: absolute;\n    color: #FFF;\n    font-size: 16px;\n    top: 6px;\n    left: 6px;\n    display: flex;\n  }\n  #ui-leaderboard {\n    font-weight: bold;\n    text-align: center;\n    width: 56px;\n    display: inline-block;\n  }\n  #ui-leaderboard-alive {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    margin-bottom: -16px;\n    padding: 8px;\n    height: 32px;\n    width: 40px;\n  }\n  .ui-players-alive-pulse {\n    -webkit-animation-name: pulseAlive;\n            animation-name: pulseAlive;\n    -webkit-animation-duration: 2.0s;\n            animation-duration: 2.0s;\n    -webkit-animation-timing-function: ease-out;\n            animation-timing-function: ease-out;\n    -webkit-animation-delay: 0s;\n            animation-delay: 0s;\n    -webkit-animation-iteration-count: infinite;\n            animation-iteration-count: infinite;\n    -webkit-animation-fill-mode: none;\n            animation-fill-mode: none;\n    -webkit-animation-play-state: running;\n            animation-play-state: running;\n  }\n  @-webkit-keyframes pulseAlive {\n    0% {\n      color: #ffffff;\n    }\n    20% {\n      color: #ff0000;\n    }\n    40% {\n      color: #ffffff;\n    }\n    100% {\n      color: #ffffff;\n    }\n  }\n  @keyframes pulseAlive {\n    0% {\n      color: #ffffff;\n    }\n    20% {\n      color: #ff0000;\n    }\n    40% {\n      color: #ffffff;\n    }\n    100% {\n      color: #ffffff;\n    }\n  }\n  .ui-leaderboard-header {\n    font-size: 12px;\n  }\n  #ui-killfeed-wrapper {\n    top: 24px;\n    left: 6px;\n    right: initial;\n  }\n  #ui-killfeed {\n    position: absolute;\n    margin: initial;\n    top: 135px;\n  }\n  #ui-killfeed-contents {\n    width: 800px;\n  }\n  #ui-killfeed-contents .killfeed-div {\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.4);\n    padding: 3px 3px;\n    border-radius: 2px;\n    height: 8px;\n    line-height: 8px;\n    right: initial;\n  }\n  .killfeed-div span,\n  .killfeed-div div {\n    float: left;\n    font-size: 8px;\n    line-height: 8px;\n    font-weight: bold;\n    color: #EFEEEE;\n  }\n  .killfeed-red span,\n  .killfeed-red div {\n    color: #d1777c !important;\n  }\n  .killfeed-blue span,\n  .killfeed-blue div {\n    color: deepskyblue !important;\n  }\n  #ui-killfeed-contents .killfeed-red {\n    color: #d1777c;\n  }\n  #ui-killfeed-contents .killfeed-blue {\n    color: deepskyblue;\n  }\n  #ui-killfeed .killfeed-name {\n    max-width: 180px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  /**\n * ui-right-center\n */\n  #ui-ammo-interactive {\n    position: absolute;\n    right: 4px;\n    top: 0px;\n    width: 90px;\n  }\n  .ui-ammo > .ui-loot-image {\n    position: absolute;\n    height: 11px;\n    width: 11px;\n    right: 2px;\n    margin-top: 2px;\n  }\n  .ui-ammo > .ui-loot-overlay {\n    position: absolute;\n    height: 11px;\n    width: 11px;\n    right: 2px;\n    margin-top: 2px;\n  }\n  .ui-ammo {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    width: 85px;\n    height: 32px;\n    margin-left: auto;\n    margin-bottom: 5px;\n  }\n  .ui-ammo > .ui-loot-count {\n    position: absolute;\n    font-size: 24px;\n    font-weight: bold;\n    left: 10px;\n    top: 2px;\n    text-align: center;\n  }\n  .ui-ammo-row {\n    display: flex;\n  }\n  .ui-ammo-row > div:not(:last-child) {\n    margin-right: 10px;\n  }\n  #ui-loot-ph1 {\n    opacity: 0 !important;\n  }\n  #ui-ammo-interactive > .ui-ammo {\n    display: inline-block;\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    width: 38px;\n    height: 14px;\n    margin-left: auto;\n    margin-bottom: 2px;\n  }\n  .ui-ammo > .ui-loot-count {\n    position: absolute;\n    font-size: 12px;\n    font-weight: bold;\n    width: 16px;\n    left: 3px;\n    margin-top: -1px;\n    text-align: center;\n  }\n  #ui-medical-interactive {\n    display: inline-flex;\n    left: 68%;\n    position: absolute;\n    top: 0px;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  #ui-medical-interactive > .ui-loot {\n    display: inline-block;\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    width: 44px;\n    height: 18px;\n    margin-left: 6px;\n    margin-bottom: 2px;\n  }\n  .ui-medical > .ui-loot-image {\n    position: absolute;\n    height: 18px;\n    width: 18px;\n    background-size: 18px;\n    background-repeat: no-repeat;\n    right: 2px;\n    margin-top: 0px;\n  }\n  .ui-medical > .ui-loot-count {\n    position: absolute;\n    font-size: 16px;\n    font-weight: bold;\n    left: 4px;\n    width: 16px;\n    margin-top: -3px;\n    text-align: center;\n  }\n  .ui-loot {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    width: 85px;\n    height: 32px;\n    margin-left: auto;\n    margin-bottom: 5px;\n  }\n  .ui-loot:hover {\n    opacity: 1 !important;\n  }\n  .ui-outline-hover {\n    border: 2px solid rgba(0, 255, 0, 0);\n  }\n  .ui-outline-hover:hover {\n    -webkit-transition: border 100ms ease-out;\n    -moz-transition: border 100ms ease-out;\n    -o-transition: border 100ms ease-out;\n    border: 2px solid rgba(0, 255, 0, 0);\n  }\n  .ui-scale-hover {\n    transform: scale(1);\n    -webkit-transition: all 100ms ease-in;\n    -webkit-transform: scale(1);\n    -ms-transition: all 100ms ease-in;\n    -ms-transform: scale(1);\n    -moz-transition: all 100ms ease-in;\n    -moz-transform: scale(1);\n    transition: all 100ms ease-in;\n  }\n  .ui-scale-hover:hover {\n    -webkit-transition: all 100ms ease-in;\n    -webkit-transform: scale(1.1);\n    -ms-transition: all 100ms ease-in;\n    -ms-transform: scale(1.1);\n    -moz-transition: all 100ms ease-in;\n    -moz-transform: scale(1.1);\n    transition: all 100ms ease-in;\n    transform: scale(1.1);\n  }\n  #ui-debug-button {\n    display: none;\n    background: rgba(0, 0, 0, 0.4);\n    position: absolute;\n    border-radius: 13px;\n    height: 26px;\n    width: 26px;\n    background-size: 18px;\n    bottom: 10px;\n    right: 38px;\n    background-position: center;\n    background-image: url(../img/gui/mag-glass.svg);\n    background-repeat: no-repeat;\n    pointer-events: auto;\n    z-index: 1;\n  }\n  /**\n * ui-upper-center\n */\n  #ui-upper-center {\n    position: absolute;\n    display: flex;\n    color: #FFF;\n    top: 84px;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  #ui-announcement {\n    display: none;\n    color: yellow;\n    text-shadow: 1px 1px 0px #000000;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    width: 100vw;\n  }\n  /**\n     * ui-lower-center\n     */\n  #ui-lower-center {\n    bottom: 44%;\n    color: #FFF;\n    left: 60%;\n    position: absolute;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  #ui-interaction {\n    display: flex;\n  }\n  #ui-interaction-press {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    margin-left: -20px;\n    font-size: 34px;\n    width: 44px;\n    height: 44px;\n    background-size: 36px;\n    background-position: center;\n    background-repeat: no-repeat;\n  }\n  #ui-interaction-outer {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    margin-left: 6px;\n    padding: 0px 6px;\n    height: 28px;\n  }\n  #ui-interaction-outer #ui-interaction-description {\n    margin-top: 5px;\n    font-size: 16px;\n    text-align: center;\n  }\n  /**\n * ui-bottom-center-0\n */\n  #ui-bottom-center-0 {\n    position: absolute;\n    color: #FFF;\n    bottom: 6px;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  /**\n * ui-equipped-ammo\n */\n  #ui-equipped-ammo-wrapper {\n    /* Taken from ui-bottom-center-0 */\n    position: absolute;\n    color: #FFF;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n    bottom: 78px;\n  }\n  #ui-equipped-ammo {\n    position: absolute;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n    text-align: center;\n    opacity: 1.0;\n  }\n  #ui-bullet-counter {\n    display: inline-block;\n    width: 175px;\n    height: 28px;\n    text-align: center;\n    text-shadow: 1px 1px #000000;\n  }\n  #ui-bullet-counter > #ui-current-clip {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    font-size: 28px;\n    font-weight: bold;\n    line-height: 30px;\n    width: 60px;\n    height: 32px;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n    left: 50%;\n    position: relative;\n    text-align: center;\n  }\n  #ui-bullet-counter > #ui-remaining-ammo {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    font-size: 16px;\n    font-weight: bold;\n    line-height: 22px;\n    width: 44px;\n    height: 22px;\n    left: 122px;\n    position: absolute;\n    text-align: center;\n    top: 10px;\n  }\n  #ui-bullet-counter > #ui-reload-button-container {\n    height: 36px;\n    left: 162px;\n    position: absolute;\n    top: 3px;\n    width: 36px;\n  }\n  #ui-reload-button-container > #ui-reload-button {\n    background: rgba(0, 0, 0, 0.4);\n    background-position: 4px 3px;\n    background-image: url(../img/gui/bullets.svg);\n    background-repeat: no-repeat;\n    background-size: 14px;\n    border-radius: 11px;\n    height: 22px;\n    left: 50%;\n    position: absolute;\n    top: 50%;\n    -webkit-transform: translateX(-50%) translateY(-50%);\n            transform: translateX(-50%) translateY(-50%);\n    width: 22px;\n  }\n  #ui-boost-counter {\n    display: inline-flex;\n    width: 206px;\n  }\n  #ui-boost-counter .ui-boost-base {\n    background: rgba(0, 0, 0, 0.4);\n    height: 6px;\n    margin-bottom: 0px;\n  }\n  #ui-boost-counter-0 {\n    border-top-left-radius: 3px;\n    border-bottom-left-radius: 3px;\n    width: 50px;\n    margin-right: 3px;\n  }\n  #ui-boost-counter-0 .ui-bar-inner {\n    background: #ff901a;\n  }\n  #ui-boost-counter-1 {\n    width: 50px;\n    margin-left: 3px;\n    margin-right: 3px;\n  }\n  #ui-boost-counter-1 .ui-bar-inner {\n    background: #ff751a;\n  }\n  #ui-boost-counter-2 {\n    width: 75px;\n    margin-left: 3px;\n    margin-right: 3px;\n  }\n  #ui-boost-counter-2 .ui-bar-inner {\n    background: #ff6616;\n  }\n  #ui-boost-counter-3 {\n    border-top-right-radius: 3px;\n    border-bottom-right-radius: 3px;\n    width: 25px;\n    margin-left: 3px;\n  }\n  #ui-boost-counter-3 .ui-bar-inner {\n    background: #ff5600;\n  }\n  .ui-boost-base .ui-bar-inner {\n    border-radius: inherit;\n    width: 0px;\n    height: 6px;\n  }\n  .ui-health-flair {\n    background-size: 36px;\n    background-repeat: no-repeat;\n    background-position: center;\n    display: none;\n    height: 36px;\n    position: absolute;\n    width: 36px;\n    z-index: 2;\n  }\n  #ui-health-flair-left {\n    left: -17px;\n    top: 14px;\n    -webkit-transform: rotate(270deg);\n            transform: rotate(270deg);\n  }\n  #ui-health-flair-right {\n    right: -17px;\n    top: 14px;\n    -webkit-transform: rotate(90deg);\n            transform: rotate(90deg);\n  }\n  #ui-health-counter {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    width: 200px;\n    height: 18px;\n    padding: 4px;\n  }\n  #ui-health-counter .ui-bar-inner {\n    z-index: 1;\n    position: absolute;\n    border-radius: 5px;\n    width: 100%;\n    height: 18px;\n    transition: width 0.0s;\n    transition-property: width;\n    transition-duration: 0.0s;\n    transition-timing-function: ease-out;\n    transition-delay: initial;\n  }\n  #ui-health-container {\n    width: 200px;\n    position: relative;\n  }\n  #ui-health-counter .ui-bar-danger {\n    background: rgba(255, 0, 0, 0.8);\n    -webkit-animation-name: pulse;\n            animation-name: pulse;\n    -webkit-animation-duration: 0.5s;\n            animation-duration: 0.5s;\n    -webkit-animation-timing-function: ease-out;\n            animation-timing-function: ease-out;\n    -webkit-animation-delay: 0;\n            animation-delay: 0;\n    -webkit-animation-direction: alternate;\n            animation-direction: alternate;\n    -webkit-animation-iteration-count: infinite;\n            animation-iteration-count: infinite;\n    -webkit-animation-fill-mode: none;\n            animation-fill-mode: none;\n    -webkit-animation-play-state: running;\n            animation-play-state: running;\n  }\n  #ui-health-counter #ui-health-depleted {\n    z-index: 0;\n    background: #929292;\n    transition: width 1.0s;\n    transition-property: width;\n    transition-duration: 1.0s;\n    transition-timing-function: ease-out;\n    transition-delay: initial;\n  }\n  .health-bar-pulse {\n    -webkit-animation: pulsewhite 1s linear infinite;\n    animation: pulsewhite 1s linear infinite;\n  }\n  @-webkit-keyframes pulsewhite {\n    0% {\n      background-color: rgba(0, 0, 0, 0.6);\n    }\n    50% {\n      background-color: rgba(255, 255, 255, 0.6);\n    }\n    100% {\n      background-color: rgba(0, 0, 0, 0.6);\n    }\n  }\n  @keyframes pulsewhite {\n    0% {\n      background-color: rgba(0, 0, 0, 0.6);\n    }\n    50% {\n      background-color: rgba(255, 255, 255, 0.6);\n    }\n    100% {\n      background-color: rgba(0, 0, 0, 0.6);\n    }\n  }\n  @-webkit-keyframes pulse {\n    0% {\n      background-color: rgba(0, 0, 0, 0.8);\n    }\n    50% {\n      background-color: rgba(255, 0, 0, 0.8);\n    }\n    100% {\n      background-color: rgba(0, 0, 0, 0.8);\n    }\n  }\n  @keyframes pulse {\n    0% {\n      background-color: rgba(0, 0, 0, 0.8);\n    }\n    50% {\n      background-color: rgba(255, 0, 0, 0.8);\n    }\n    100% {\n      background-color: rgba(0, 0, 0, 0.8);\n    }\n  }\n  /**\n     * ui-bottom-center-1\n     */\n  #ui-bottom-center-1 {\n    z-index: 3;\n    position: absolute;\n    color: #FFF;\n    bottom: 23%;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  #ui-kills {\n    display: none;\n    text-align: center;\n    background: rgba(0, 0, 0, 0.4);\n    color: #FFF;\n    border-radius: 5px;\n    padding: 6px;\n  }\n  #ui-kill-text {\n    font-size: 10px;\n  }\n  #ui-kill-count {\n    font-weight: bold;\n    color: #ff4100;\n    font-size: 18px;\n    margin-bottom: -3px;\n    text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);\n  }\n  /**\n     * ui-bottom-center-2\n     */\n  #ui-bottom-center-2 {\n    position: absolute;\n    color: #FFF;\n    bottom: 82px;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  #ui-pickup-message {\n    color: white;\n    text-shadow: 1px 1px 0px #000000;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    width: 100vw;\n  }\n  /**\n * ui-bottom-center-left\n */\n  #ui-bottom-center-left {\n    bottom: initial;\n    color: #FFF;\n    right: 70%;\n    opacity: 0.75;\n    position: absolute;\n    bottom: 6px;\n  }\n  /**\n * ui-bottom-center-right\n */\n  #ui-bottom-center-right {\n    bottom: initial;\n    color: #FFF;\n    left: 70%;\n    opacity: 0.75;\n    position: absolute;\n    bottom: 6px;\n  }\n  .ui-armor-counter {\n    position: absolute;\n    bottom: 0px;\n    display: block;\n    width: 20px;\n    height: 24px;\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    margin-left: 2px;\n  }\n  #ui-armor-helmet {\n    right: 4px;\n  }\n  #ui-armor-backpack {\n    left: 30px;\n  }\n  .ui-armor-level {\n    display: none;\n  }\n  .ui-armor-counter-inner {\n    z-index: 1;\n    position: absolute;\n    background: rgba(25, 25, 25, 0.75);\n    border-radius: 5px;\n    width: 100%;\n    height: 0px;\n    bottom: 0px;\n  }\n  .ui-armor-counter .ui-armor-count {\n    z-index: 2;\n    text-shadow: 1px 1px #000000;\n    position: relative;\n    font-size: 18px;\n    font-weight: bold;\n    margin-top: -28px;\n    text-align: center;\n  }\n  .ui-armor-counter .ui-armor-image {\n    margin: auto;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    top: 0;\n    z-index: 0;\n    position: absolute;\n    height: 18px;\n    width: 18px;\n  }\n  /**\n * ui-bottom-right\n */\n  #ui-bottom-right {\n    bottom: initial;\n    color: #FFF;\n    position: absolute;\n    right: 6px;\n    top: 225px;\n    -webkit-transform-origin: bottom right;\n            transform-origin: bottom right;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  #ui-weapon-container {\n    width: 88px;\n  }\n  .ui-weapon-info {\n    margin-bottom: 5px;\n    border-radius: 5px;\n    border: 2px solid transparent;\n  }\n  .ui-weapon-switch {\n    position: absolute;\n    right: 0px;\n    opacity: 0.6;\n    border-radius: 5px;\n    border: 2px solid transparent;\n    width: 68px;\n    height: 28px;\n    margin-left: auto;\n    pointer-events: all;\n  }\n  #ui-weapon-id-1 {\n    bottom: 105px;\n  }\n  #ui-weapon-id-2 {\n    bottom: 70px;\n  }\n  #ui-weapon-id-3 {\n    bottom: 35px;\n  }\n  #ui-weapon-id-4 {\n    bottom: 0px;\n  }\n  .ui-weapon-name {\n    position: absolute;\n    font-size: 10px;\n    font-weight: bold;\n    right: 4px;\n    width: 48px;\n    margin-top: 14px;\n    text-align: right;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%);\n  }\n  .ui-weapon-number {\n    display: none;\n    position: absolute;\n    font-size: 24px;\n    font-weight: bold;\n    right: 8px;\n    text-align: center;\n  }\n  .ui-weapon-exp {\n    display: none;\n    position: absolute;\n    height: 16px;\n    width: 16px;\n    font-size: 8px;\n    font-weight: bold;\n    line-height: 18px;\n    right: 34px;\n    margin-top: 10px;\n    text-align: center;\n  }\n  .ui-weapon-image {\n    display: none;\n    position: relative;\n    height: 28px;\n    width: 28px;\n    left: 2px;\n    bottom: 0px;\n    -webkit-transform: rotate(10deg);\n            transform: rotate(10deg);\n  }\n  #ui-weapon-id-4 .ui-weapon-image {\n    height: 24px;\n    width: 24px;\n    left: 0px;\n    top: 0px;\n    background-size: 24px;\n  }\n  #ui-emote-button {\n    background-size: 20px;\n    border-radius: 14px;\n    bottom: 18px;\n    height: 28px;\n    right: 4px;\n    top: initial;\n    width: 28px;\n  }\n  /**\n * ui-stats, end game screen\n */\n  #ui-stats-contents {\n    border-radius: 5px;\n    color: #FFF;\n    height: 100%;\n    left: 50%;\n    position: absolute;\n    text-align: center;\n    top: 0%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n    width: 100%;\n  }\n  #ui-stats-header {\n    margin-top: 14px;\n  }\n  .ui-stats-header-title {\n    font-weight: bold;\n    font-size: 24px;\n    margin: 6px;\n    color: gold;\n  }\n  .ui-stats-header-reason {\n    font-size: 12px;\n  }\n  .ui-stats-header-overview {\n    position: fixed;\n    top: 4px;\n    right: 12px;\n    margin: 5px;\n  }\n  .ui-stats-header-overview div {\n    display: block;\n    padding-bottom: 6px;\n    border-bottom: 2px solid rgba(255, 255, 255, 0.25);\n  }\n  .ui-stats-header-overview div:not(:first-child) {\n    margin: initial;\n  }\n  span.ui-stats-header-stat {\n    font-size: 22px;\n  }\n  span.ui-stats-header-value {\n    margin-left: 12px;\n    font-size: 28px;\n    font-weight: bold;\n  }\n  #ui-stats-info-box {\n    position: relative;\n    left: 50%;\n    margin: auto;\n    margin-top: -8px;\n    height: 100px;\n    display: flex;\n  }\n  .ui-stats-info-player {\n    position: relative;\n    width: 125px;\n    background-color: rgba(0, 0, 0, 0.75);\n    border-radius: 4px;\n    border: 2px solid black;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  .ui-stats-info-status:after {\n    background-image: url(../img/gui/skull.svg);\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70px;\n    content: "";\n    display: block;\n    height: 100%;\n    left: initial;\n    opacity: 0.1;\n    position: absolute;\n    top: 0%;\n    width: 100%;\n    z-index: -1;\n  }\n  .ui-stats-info-player-name {\n    color: gold;\n    font-size: 12px;\n    font-weight: bold;\n    font-style: italic;\n    margin-top: 4px;\n    margin-bottom: 4px;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 120px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n  .ui-stats-info-player-badge {\n    background-size: 24px;\n    background-repeat: no-repeat;\n    background-position: center;\n    height: 56px;\n    left: auto;\n    position: absolute;\n    top: -34px;\n    width: 100%;\n  }\n  .ui-stats-info {\n    display: flex;\n    height: 18px;\n    margin: auto;\n  }\n  .ui-stats-info > div {\n    padding: 4px;\n    font-size: 9px;\n    line-height: 6px;\n    text-align: left;\n    font-weight: bold;\n  }\n  .ui-stats-info > div:first-child {\n    width: 55%;\n    margin-right: 4px;\n    text-align: right;\n    font-weight: normal;\n  }\n  .ui-stats-reason {\n    display: flex;\n    height: 72px;\n    margin: auto;\n  }\n  .ui-stats-reason div {\n    padding: 8px;\n    margin: auto;\n    width: 100%;\n    text-align: center;\n    font-size: 16px;\n  }\n  .ui-stats-reason .ui-stats-reason-dead {\n    color: red;\n  }\n  .ui-stats-reason .ui-stats-reason-alive {\n    color: lawngreen;\n  }\n  #ui-stats-options {\n    position: absolute;\n    left: 50%;\n    margin-top: 2px;\n    min-height: 30px;\n    -webkit-transform: scale(1.1);\n            transform: scale(1.1);\n    z-index: 1;\n  }\n  .ui-stats-restart {\n    position: absolute;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n    width: 130px;\n    margin: auto;\n    margin-bottom: 20px;\n  }\n  .ui-stats-spectate {\n    position: absolute;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n    left: 68px;\n    width: 88px;\n    background: #50afab;\n    border-bottom: 2px solid #387c79;\n    box-shadow: none;\n  }\n  .ui-stats-ad-container {\n    display: none;\n    margin-top: 8px;\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7);\n  }\n  /* Tooltip container */\n  .tooltip {\n    position: relative;\n  }\n  /* Tooltip text */\n  .tooltip .tooltip-text {\n    visibility: hidden !important;\n    width: 240px;\n    background-color: black;\n    color: #fff;\n    text-align: center;\n    padding: 5px 0;\n    border-radius: 6px;\n    position: absolute;\n    z-index: 1;\n    right: 110%;\n    opacity: 0.75;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%);\n  }\n  .tooltip .tooltip-text::after {\n    content: " ";\n    position: absolute;\n    top: 50%;\n    left: 100%;\n    margin-top: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent transparent black;\n  }\n  .tooltip-title {\n    font-size: 18px;\n    font-weight: bold;\n    padding: 4px;\n    color: yellow;\n  }\n  .tooltip-description {\n    font-size: 16px;\n    padding: 4px;\n  }\n  .tooltip-description span {\n    font-size: 16px;\n  }\n  .tooltip-perk .tooltip-text {\n    visibility: hidden !important;\n  }\n  .tooltip-perk:hover .tooltip-text {\n    visibility: hidden !important;\n  }\n  /**\n     * editor\n     */\n  #ui-editor-top-center {\n    position: absolute;\n    color: #FFF;\n    top: 0%;\n    left: 50%;\n    -webkit-transform: translateX(-50%);\n            transform: translateX(-50%);\n  }\n  #ui-editor-top-right {\n    position: absolute;\n    color: #FFF;\n    font-size: 16px;\n    top: 6px;\n    right: 6px;\n  }\n  .ui-editor-header {\n    text-align: center;\n    font-weight: bold;\n    font-size: 16px;\n    padding: 8px;\n  }\n  .ui-editor-info {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    font-size: 36px;\n    margin-bottom: 8px;\n    padding: 8px;\n  }\n  .ui-editor-list {\n    margin: 0px;\n    padding: 0px;\n    list-style: none;\n  }\n  .ui-editor-list li div {\n    font-family: monospace;\n    font-size: 14px;\n  }\n  /*\n     * Profiler\n     */\n  #ui-profiler-top-left {\n    position: absolute;\n    color: #FFF;\n    font-size: 16px;\n    top: 6px;\n    left: 6px;\n    text-align: center;\n    display: flex;\n  }\n  .ui-profiler-list {\n    background: rgba(0, 0, 0, 0.4);\n    border-radius: 5px;\n    margin-right: 16px;\n    padding: 8px;\n  }\n  .ui-profiler-list-header {\n    font-size: 16px;\n    font-weight: bold;\n    margin-bottom: 8px;\n  }\n  .ui-profiler-list ul {\n    list-style: none;\n    text-align: left;\n    padding: 0px;\n    margin: 0px;\n  }\n  .ui-profiler-list li {\n    display: flex;\n  }\n  .kv {\n    font-family: monospace;\n    font-size: 14px;\n    font-weight: normal;\n  }\n  .kv:last-child {\n    width: 100%;\n    text-align: right;\n  }\n  /* Hide desktop-only elements */\n  #ui-settings-container-desktop,\n  #ui-leaderboard-wrapper {\n    display: none;\n  }\n  /* Show mobile-only elements */\n  #ui-settings-container-mobile {\n    display: block;\n  }\n}\n@media screen and (max-width: 850px) and (max-height: 360px), screen and (max-width: 850px) and (max-width: 640px) {\n  #ui-top-center {\n    -webkit-transform-origin: top;\n            transform-origin: top;\n    -webkit-transform: translateX(-50%) scale(0.85);\n            transform: translateX(-50%) scale(0.85);\n  }\n}\n@media screen and (max-width: 850px) and (max-height: 360px), screen and (max-width: 850px) and (max-width: 640px) {\n  #ui-bottom-center-0 {\n    -webkit-transform-origin: bottom;\n            transform-origin: bottom;\n    -webkit-transform: translateX(-50%) scale(0.85);\n            transform: translateX(-50%) scale(0.85);\n  }\n}\n@media screen and (max-width: 850px) and (max-height: 360px), screen and (max-width: 850px) and (max-width: 640px) {\n  #ui-bottom-right {\n    top: 200px;\n    -webkit-transform-origin: top right;\n            transform-origin: top right;\n    -webkit-transform: scale(0.8);\n            transform: scale(0.8);\n  }\n}\n@media screen and (max-width: 850px) and (max-width: 850px) and (orientation: landscape) {\n  .ui-stats-header-overview .ui-stats-header-left {\n    position: fixed;\n    top: -4px;\n    left: 12px;\n  }\n  .ui-stats-header-overview .ui-stats-header-right {\n    position: fixed;\n    top: -4px;\n    right: 12px;\n  }\n}\n@media screen and (max-width: 850px) and (max-height: 360px) and (max-width: 640px) {\n  .ui-stats-ad-container {\n    margin-top: 0px;\n    -webkit-transform: scale(0.6);\n            transform: scale(0.6);\n  }\n}\n@media screen and (max-width: 850px) and (max-width: 850px) and (max-height: 320px) {\n  .ui-stats-ad-container {\n    position: fixed;\n    right: 10px;\n    top: 24px;\n    -webkit-transform: scale(0.5);\n            transform: scale(0.5);\n    -webkit-transform-origin: bottom right;\n            transform-origin: bottom right;\n  }\n}\n@media screen and (max-width: 850px) and (orientation: portrait) {\n  #ui-stats-contents {\n    margin-top: 32px;\n    margin-bottom: 16px;\n  }\n  #ui-stats-header-overview {\n    position: initial;\n  }\n  #ui-stats-info-box {\n    display: inline-block;\n    left: initial;\n    -webkit-transform: scale(0.9);\n            transform: scale(0.9);\n    -webkit-transform-origin: initial;\n            transform-origin: initial;\n    margin-top: 2px;\n    width: 100%;\n  }\n  .ui-stats-ad-container {\n    width: 100%;\n  }\n  .ui-stats-info-player {\n    display: inline-block;\n    left: initial !important;\n    margin: 8px;\n    -webkit-transform: none;\n            transform: none;\n  }\n  .ui-stats-header-overview {\n    display: inline-block;\n    position: initial;\n    width: 175px;\n  }\n  .ui-stats-header-overview div {\n    position: initial;\n    margin-bottom: 8px;\n  }\n  #ui-top-center {\n    top: 134px;\n    left: 50%;\n  }\n  #ui-top-center-scopes-wrapper {\n    display: none;\n    bottom: 42px;\n    top: initial;\n  }\n  #ui-team {\n    top: 40px;\n  }\n  .ui-team-member {\n    height: 18px;\n    margin-bottom: 4px;\n  }\n  #ui-upper-center {\n    top: 180px;\n  }\n  #ui-bottom-center-0 {\n    top: -15px;\n    bottom: initial;\n    left: 100px;\n    -webkit-transform: scale(0.85);\n            transform: scale(0.85);\n  }\n  #ui-bottom-center-1 {\n    bottom: 28%;\n  }\n  #ui-bottom-center-2 {\n    bottom: 218px;\n  }\n  #ui-lower-center {\n    bottom: 38%;\n    left: 38%;\n  }\n  #ui-boost-counter {\n    position: relative;\n    top: 40px;\n    left: 2px;\n  }\n  #ui-bottom-right {\n    bottom: 20px;\n    right: 6px;\n    top: initial;\n  }\n  #ui-weapon-id-1 {\n    right: 240px;\n    bottom: initial;\n  }\n  #ui-weapon-id-2 {\n    right: 160px;\n    bottom: initial;\n  }\n  #ui-weapon-id-3 {\n    right: 80px;\n    bottom: initial;\n  }\n  #ui-weapon-id-4 {\n    bottom: initial;\n  }\n  .ui-weapon-info {\n    display: inline-block;\n  }\n  #ui-bottom-center-right {\n    bottom: 9px;\n    left: 30px;\n    top: initial;\n  }\n  .ui-right-center-mobile {\n    top: 6px;\n  }\n  #ui-emote-button {\n    background-size: 20px;\n    border-radius: 14px;\n    bottom: initial;\n    height: 28px;\n    left: initial;\n    right: 4px;\n    top: 62%;\n    width: 28px;\n  }\n  #ui-debug-button {\n    top: 242px;\n  }\n  #ui-ammo-interactive {\n    margin-top: 4px;\n  }\n  #ui-ammo-interactive > .ui-ammo {\n    display: block;\n  }\n  #ui-medical-interactive {\n    display: inline-block;\n    left: initial;\n    right: 8px;\n    -webkit-transform: initial;\n            transform: initial;\n  }\n  #ui-medical-interactive > .ui-loot {\n    display: block;\n  }\n  #ui-equipped-ammo {\n    left: initial;\n    position: initial;\n    -webkit-transform: none;\n            transform: none;\n  }\n  #ui-equipped-ammo-wrapper {\n    bottom: initial;\n    color: #FFF;\n    left: initial;\n    position: absolute;\n    right: 6px;\n    top: 44%;\n    -webkit-transform: none;\n            transform: none;\n  }\n  #ui-bullet-counter {\n    width: initial;\n  }\n  #ui-bullet-counter > #ui-current-clip {\n    left: 50%;\n  }\n  #ui-bullet-counter > #ui-remaining-ammo {\n    left: initial;\n    right: 0px;\n    top: 36px;\n  }\n  #ui-bullet-counter > #ui-reload-button-container {\n    left: 36px;\n    top: 56px;\n  }\n  #ui-reload-button-container > #ui-reload-button {\n    left: initial;\n    right: 0px;\n  }\n  #big-map-collision {\n    left: initial;\n    top: 50%;\n    -webkit-transform: translateY(-50%);\n            transform: translateY(-50%);\n  }\n  #big-map-close {\n    bottom: initial;\n    top: 12px;\n  }\n  #ui-spectate-options-wrapper {\n    bottom: 42px;\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7);\n  }\n  #ui-spectate-options {\n    position: absolute;\n    bottom: 12px;\n  }\n  #ui-spectate-stats {\n    bottom: 0px;\n    top: initial;\n  }\n  #ui-ammo-interactive {\n    top: 96px;\n  }\n  #ui-ammo-interactive > .ui-ammo {\n    margin-bottom: 2px;\n  }\n}\n@media screen and (max-width: 850px) and (orientation: portrait) and (min-height: 668px) {\n  #ui-stats-contents {\n    margin-top: 32px;\n  }\n  #ui-stats-info-box {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  .ui-stats-ad-container {\n    margin-top: 20px;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n  }\n  #ui-stats-options {\n    display: block;\n    left: initial;\n    position: initial;\n    margin: auto;\n    margin-top: 24px;\n    width: 100%;\n  }\n  .ui-stats-restart {\n    display: block;\n    position: initial;\n    -webkit-transform: initial;\n            transform: initial;\n    margin-bottom: 0px;\n  }\n  .ui-stats-spectate {\n    display: block;\n    margin: auto;\n    margin-top: 6px;\n    position: initial;\n    -webkit-transform: initial;\n            transform: initial;\n  }\n}\n@media screen and (max-width: 850px) and (orientation: portrait) and (max-height: 667px) {\n  #ui-stats-contents {\n    margin-top: 0px;\n  }\n  .ui-stats-ad-container {\n    margin-top: 20px;\n  }\n}\n@media screen and (max-width: 850px) and (orientation: portrait) and (max-height: 568px) and (max-width: 375px) {\n  #ui-bottom-center-right {\n    left: 22px;\n    -webkit-transform: scale(0.8);\n            transform: scale(0.8);\n  }\n  #ui-bottom-right {\n    right: 0px;\n  }\n  #ui-bottom-center-0 {\n    top: -20px;\n    left: 84px;\n    -webkit-transform: scale(0.7);\n            transform: scale(0.7);\n  }\n}\n', ""])
    },
    b78cf179: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return t in e ? Object.defineProperty(e, t, {
                value: a,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : e[t] = a, e
        }
        var r, o = {
                None: 0,
                Top: 1,
                Right: 2,
                Bottom: 3,
                Left: 4,
                Win: 5,
                Death: 6,
                Count: 7
            },
            n = {
                Locked: 0,
                Default: 1,
                Account: 9,
                Instagram: 10,
                Twitter: 11,
                YouTube: 12,
                Facebook: 13
            },
            s = {
                None: 0,
                Empty: 1,
                Medical: 2,
                Ammo: 3,
                ThumbsUp: 4,
                SadFace: 5,
                HappyFace: 6,
                Surviv: 7,
                Ammo9mm: 8,
                Ammo12Gauge: 9,
                Ammo762mm: 10,
                Ammo556mm: 11,
                GG: 12,
                Question: 13,
                Tombstone: 14,
                JoyFace: 15,
                SobFace: 16,
                ThinkingFace: 17,
                FlagUS: 18,
                FlagThailand: 19,
                FlagGermany: 20,
                FlagFrance: 21,
                FlagSouthKorea: 22,
                FlagBrazil: 23,
                FlagCanada: 24,
                FlagSpain: 25,
                FlagRussia: 26,
                FlagMexico: 27,
                FlagPoland: 28,
                FlagUK: 29,
                FlagColombia: 30,
                FlagUkraine: 31,
                FlagTurkey: 32,
                FlagPhilippines: 33,
                FlagCzechia: 34,
                FlagPeru: 35,
                FlagAustria: 36,
                FlagArgentina: 37,
                FlagJapan: 38,
                FlagVenezuela: 39,
                FlagVietnam: 40,
                FlagSwitzerland: 41,
                FlagNetherlands: 42,
                FlagChina: 43,
                FlagTaiwan: 44,
                FlagChile: 45,
                FlagAustralia: 46,
                FlagDenmark: 47,
                FlagItaly: 48,
                FlagSweden: 49,
                FlagEcuador: 50,
                FlagSlovakia: 51,
                FlagHungary: 52,
                FlagRomania: 53,
                FlagHongKong: 54,
                FlagIndonesia: 55,
                FlagFinland: 56,
                FlagNorway: 57,
                Heart: 58,
                Sleepy: 59,
                Flex: 60,
                AngryFace: 61,
                UpsideDownFace: 62,
                Teabag: 63,
                AlienFace: 64,
                FlagBelarus: 65,
                FlagBelgium: 66,
                FlagKazakhstan: 67,
                Egg: 68,
                Police: 69,
                DabFace: 70,
                FlagMalaysia: 71,
                FlagNewZealand: 72,
                LogoSurviv: 73,
                LogoEgg: 74,
                LogoSwine: 75,
                LogoHydra: 76,
                LogoStorm: 77,
                FlagHonduras: 78,
                LogoCaduceus: 79,
                ImpFace: 80,
                MonocleFace: 81,
                SunglassFace: 82,
                HeadshotFace: 83,
                Potato: 84,
                Leek: 85,
                Eggplant: 86,
                Baguette: 87,
                Chick: 88,
                Ammo50AE: 89,
                FlagBolivia: 90,
                FlagBosnia: 91,
                FlagCroatia: 92,
                FlagIndia: 93,
                FlagIsrael: 94,
                FlagGeorgia: 95,
                FlagGreece: 96,
                FlagGuatemala: 97,
                FlagPortugal: 98,
                FlagSerbia: 99,
                FlagSingapore: 100,
                FlagTrinidad: 101,
                FlagUruguay: 102,
                LogoConch: 103,
                Pineapple: 104,
                Coconut: 105,
                Crab: 106,
                Whale: 107,
                LogoMeteor: 108,
                Ammo308sub: 109,
                AmmoFlare: 110,
                Salt: 111,
                DisappointFace: 112,
                LogoCrossing: 113,
                Fish: 114,
                Campfire: 115,
                ChickenDinner: 116,
                Ammo45acp: 117,
                Cattle: 118,
                IceCream: 119,
                Cupcake: 120,
                Donut: 121,
                LogoHatchet: 122,
                Acorn: 123,
                Trunk: 124,
                Forest: 125,
                Pumpkin: 126,
                CandyCorn: 127,
                PilgrimHat: 128,
                TurkeyAnimal: 129,
                HeartFace: 130,
                LogoChrysanthemum: 131,
                SantaHat: 132,
                Snowman: 133,
                Snowflake: 134,
                Loot: 135
            },
            l = (r = {}, i(r, s.None, {
                texture: "",
                teamOnly: !1,
                noCustom: !0,
                category: n.Locked
            }), i(r, s.Medical, {
                texture: "emote-medical-healthkit.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.Ammo, {
                texture: "ammo-box.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.ThumbsUp, {
                texture: "thumbs-up.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.SadFace, {
                texture: "sad-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.HappyFace, {
                texture: "happy-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Surviv, {
                texture: "surviv.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Ammo9mm, {
                texture: "ammo-9mm.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.Ammo12Gauge, {
                texture: "ammo-12gauge.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.Ammo762mm, {
                texture: "ammo-762mm.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.Ammo556mm, {
                texture: "ammo-556mm.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.GG, {
                texture: "gg.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.Question, {
                texture: "question.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.Tombstone, {
                texture: "tombstone.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.JoyFace, {
                texture: "joy-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.SobFace, {
                texture: "sob-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.ThinkingFace, {
                texture: "thinking-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.FlagUS, {
                texture: "united-states-of-america.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagThailand, {
                texture: "thailand.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagGermany, {
                texture: "germany.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagFrance, {
                texture: "france.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSouthKorea, {
                texture: "south-korea.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagBrazil, {
                texture: "brazil.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagCanada, {
                texture: "canada.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSpain, {
                texture: "spain.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagRussia, {
                texture: "russia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagMexico, {
                texture: "mexico.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagPoland, {
                texture: "republic-of-poland.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagUK, {
                texture: "united-kingdom.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagColombia, {
                texture: "colombia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagUkraine, {
                texture: "ukraine.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagTurkey, {
                texture: "turkey.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagPhilippines, {
                texture: "philippines.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagCzechia, {
                texture: "czech-republic.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagPeru, {
                texture: "peru.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagAustria, {
                texture: "austria.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagArgentina, {
                texture: "argentina.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagJapan, {
                texture: "japan.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagVenezuela, {
                texture: "venezuela.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagVietnam, {
                texture: "vietnam.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSwitzerland, {
                texture: "switzerland.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagNetherlands, {
                texture: "netherlands.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagChina, {
                texture: "china.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagTaiwan, {
                texture: "taiwan.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagChile, {
                texture: "chile.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagAustralia, {
                texture: "australia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagDenmark, {
                texture: "denmark.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagItaly, {
                texture: "italy.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSweden, {
                texture: "sweden.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagEcuador, {
                texture: "ecuador.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSlovakia, {
                texture: "slovakia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagHungary, {
                texture: "hungary.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagRomania, {
                texture: "romania.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagHongKong, {
                texture: "hong-kong.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagIndonesia, {
                texture: "indonesia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagFinland, {
                texture: "finland.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagNorway, {
                texture: "norway.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.Heart, {
                texture: "heart.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Sleepy, {
                texture: "sleepy.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.Flex, {
                texture: "flex.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.AngryFace, {
                texture: "angry-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.UpsideDownFace, {
                texture: "upsidedown-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.Teabag, {
                texture: "teabag.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.AlienFace, {
                texture: "alien-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.FlagBelarus, {
                texture: "belarus.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagBelgium, {
                texture: "belgium.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagKazakhstan, {
                texture: "kazakhstan.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.Egg, {
                texture: "egg.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.Police, {
                texture: "police.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.DabFace, {
                texture: "dab-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.FlagMalaysia, {
                texture: "malaysia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagNewZealand, {
                texture: "new-zealand.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.LogoSurviv, {
                texture: "logo-surviv.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.LogoEgg, {
                texture: "logo-egg.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.LogoSwine, {
                texture: "logo-swine.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.LogoHydra, {
                texture: "logo-hydra.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.LogoStorm, {
                texture: "logo-storm.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.FlagHonduras, {
                texture: "honduras.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.LogoCaduceus, {
                texture: "logo-caduceus.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.ImpFace, {
                texture: "imp-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.MonocleFace, {
                texture: "monocle-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.SunglassFace, {
                texture: "sunglass-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.HeadshotFace, {
                texture: "headshot-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Potato, {
                texture: "potato.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Leek, {
                texture: "leek.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Eggplant, {
                texture: "eggplant.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Baguette, {
                texture: "baguette.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Chick, {
                texture: "chick.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Ammo50AE, {
                texture: "ammo-50AE.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.FlagBolivia, {
                texture: "bolivia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagCroatia, {
                texture: "croatia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagIndia, {
                texture: "india.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagIsrael, {
                texture: "israel.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagGeorgia, {
                texture: "georgia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagGreece, {
                texture: "greece.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagGuatemala, {
                texture: "guatemala.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagPortugal, {
                texture: "portugal.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSerbia, {
                texture: "serbia.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagSingapore, {
                texture: "singapore.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagTrinidad, {
                texture: "trinidad-and-tobago.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.FlagUruguay, {
                texture: "uruguay.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                facebookLike: !0,
                category: n.Facebook
            }), i(r, s.LogoConch, {
                texture: "logo-conch.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Pineapple, {
                texture: "pineapple.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Coconut, {
                texture: "coconut.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Crab, {
                texture: "crab.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Whale, {
                texture: "whale.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.LogoMeteor, {
                texture: "logo-meteor.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Ammo308sub, {
                texture: "ammo-308sub.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.AmmoFlare, {
                texture: "ammo-flare.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.Salt, {
                texture: "salt.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.DisappointFace, {
                texture: "disappoint-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.LogoCrossing, {
                texture: "logo-crossing.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Fish, {
                texture: "fish.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Campfire, {
                texture: "campfire.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.ChickenDinner, {
                texture: "chicken-dinner.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.Ammo45acp, {
                texture: "ammo-45acp.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !0,
                category: n.Locked
            }), i(r, s.Cattle, {
                texture: "cattle.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.IceCream, {
                texture: "ice-cream.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Cupcake, {
                texture: "cupcake.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Donut, {
                texture: "donut.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.LogoHatchet, {
                texture: "logo-hatchet.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.Acorn, {
                texture: "acorn.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Trunk, {
                texture: "trunk.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Forest, {
                texture: "forest.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Pumpkin, {
                texture: "pumpkin.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.CandyCorn, {
                texture: "candy-corn.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.PilgrimHat, {
                texture: "pilgrim-hat.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.TurkeyAnimal, {
                texture: "turkey-animal.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.HeartFace, {
                texture: "heart-face.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                youtubeSubscribe: !0,
                category: n.YouTube
            }), i(r, s.LogoChrysanthemum, {
                texture: "logo-chrysanthemum.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                category: n.Default
            }), i(r, s.SantaHat, {
                texture: "santa-hat.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Snowman, {
                texture: "snowman.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                instagramFollow: !0,
                category: n.Instagram
            }), i(r, s.Snowflake, {
                texture: "snowflake.img",
                sound: "emote_01",
                channel: "ui",
                teamOnly: !1,
                twitterFollow: !0,
                category: n.Twitter
            }), i(r, s.Loot, {
                texture: "",
                sound: "gun_switch_01",
                channel: "activePlayer",
                teamOnly: !1,
                noCustom: !0,
                category: n.Locked
            }), r);
        e.exports = {
            EmoteSlot: o,
            EmoteType: s,
            EmoteData: l
        }
    },
    b895abfa: function(e, t, a) {
        "use strict";
        var i = (a("989ad62a"), a("1901e2d9")),
            r = (a("c2a798c8"), a("d5ec3c16")),
            o = {
                desc: {
                    name: "Woods Spring",
                    icon: "img/gui/hatchet.svg"
                },
                assets: {
                    audio: [{
                        name: "vault_change_02",
                        channel: "sfx"
                    }, {
                        name: "footstep_08",
                        channel: "sfx"
                    }, {
                        name: "footstep_09",
                        channel: "sfx"
                    }, {
                        name: "helmet03_forest_pickup_01",
                        channel: "ui"
                    }, {
                        name: "ability_stim_01",
                        channel: "sfx"
                    }, {
                        name: "leader_dead_01",
                        channel: "ui"
                    }],
                    atlases: ["gradient", "shared", "woods"]
                },
                biome: {
                    colors: {
                        background: 2118510,
                        water: 3310251,
                        beach: 15709019,
                        riverbank: 9079434,
                        grass: 4351497,
                        underground: 1772803,
                        playerSubmerge: 2854052
                    },
                    sound: {
                        riverShore: "stone"
                    },
                    particles: {
                        camera: "falling_leaf_spring",
                        ripple: "waterRipple"
                    }
                },
                gameMode: {
                    maxPlayers: 80,
                    woodsMode: !0
                }
            };
        e.exports = i.mergeDeep({}, r, o)
    },
    bc83ef37: function(e, t, a) {
        "use strict";

        function i() {
            this.sprite = new o.Sprite, this.sprite.anchor.set(.5, .5), this.sprite.visible = !1, this.strobeSprite = null
        }

        function r() {
            this.Tt = new h.Pool(i)
        }
        var o = a("8b1dfb45"),
            n = a("989ad62a"),
            s = a("ceee80d9"),
            l = a("6b42806d"),
            c = a("10899aea"),
            m = a("1901e2d9"),
            p = a("c2a798c8"),
            d = a("c73dee75"),
            h = (a("ce29f17f"), a("af8ba00f"), a("753d6e4b")),
            u = {
                grass: "frag_grass",
                sand: "frag_sand",
                water: "frag_water"
            };
        i.prototype = {
            o: function() {},
            n: function() {
                this.sprite.visible = !1, this.strobeSprite && (this.strobeSprite.visible = !1)
            },
            l: function(e, t, a, i) {
                if (t) {
                    var r = n.items[e.type];
                    this.layer = e.layer, this.type = e.type, this.rad = .5 * r.rad
                }
                if (this.posOld = a ? p.copy(e.pos) : p.copy(this.pos), this.posZOld = a ? e.posZ : this.posZ, this.pos = p.copy(e.pos), this.posZ = e.posZ, a) {
                    var s = n.items[e.type],
                        c = s.worldImg;
                    this.imgScale = c.scale, this.rot = 0, this.rotVel = s.throwPhysics.spinVel, s.throwPhysics.randomizeSpinDir && Math.random() < .5 && (this.rotVel *= -1), this.rotDrag = s.throwPhysics.spinDrag * m.random(1, 2), this.velZ = 0, this.grounded = !1, this.inWater = !1, this.lastSoundObjId = 0, this.playHitSfx = !s.explodeOnImpact, this.alwaysRenderOntop = !1;
                    var d = !0;
                    if ("bomb_iron" == this.type) {
                        this.alwaysRenderOntop = !0;
                        var h = l.createCircle(this.pos, .5);
                        i.map.insideBuildingCeiling(h, !0) && (d = !1)
                    }
                    this.sprite.texture = o.Texture.fromImage(c.sprite), this.sprite.tint = c.tint, this.sprite.alpha = 1, this.sprite.visible = d, "strobe" == e.type && (this.strobeSprite || (this.strobeSprite = new o.Sprite, this.strobeSprite.texture = o.Texture.fromImage("part-strobe-01.img"), this.strobeSprite.anchor.set(.5, .5), this.sprite.addChild(this.strobeSprite)), this.strobeSprite.scale.set(0, 0), this.strobeSprite.visible = !0, this.strobeScale = 0, this.strobeScaleMax = 12, this.strobeTicker = 0, this.strobeDir = 1, this.strobeSpeed = 1.25)
                }
            }
        }, r.prototype = {
            c: function(e, t, a, i, r, o, h) {
                for (var g = this.Tt.m(), y = 0; y < g.length; y++) {
                    var w = g[y];
                    if (w.active) {
                        var x = (n.items[w.type], w.rotDrag);
                        w.inWater && (x *= 3), w.rotVel *= 1 / (1 + e * x), w.rot += w.rotVel * e;
                        for (var f = {
                                obj: null,
                                pen: 0
                            }, b = {
                                obj: null,
                                pen: 0
                            }, _ = l.createCircle(w.pos, w.rad), S = r.pe.m(), k = 0; k < S.length; k++) {
                            var v = S[k];
                            if (v.active && !v.dead && m.sameLayer(v.layer, w.layer)) {
                                var z = l.intersect(v.collider, _);
                                if (z) {
                                    var M = v.height > w.posZ ? f : b;
                                    z.pen > M.pen && (!M.obj || M.obj.height <= v.height) && (M.obj = v, M.pen = z.pen)
                                }
                            }
                        }
                        var T = p.div(p.sub(w.pos, w.posOld), e),
                            P = p.length(T);
                        if (f.obj && f.obj.__id != w.lastSoundObjId && P > 7.5 && (w.lastSoundObjId = f.obj.__id, w.playHitSfx)) {
                            var I = p.mul(p.normalizeSafe(T, p.create(1, 0)), -1),
                                C = s.Defs[f.obj.type];
                            d.playHitFx(C.hitParticle, C.sound.bullet, w.pos, I, w.layer, t, a)
                        }
                        var A = r.getGroundSurface(w.pos, w.layer);
                        w.posZ <= .01 && (w.inWater || "water" != A.type || t.addRippleParticle(w.pos, w.layer), w.inWater = "water" == A.type);
                        var E = w.velZ;
                        if (w.velZ = (w.posZ - w.posZOld) / e, !w.isNew && !w.grounded && w.velZ >= 0 && E < 0) {
                            var D = {
                                fn: "playGroup",
                                channel: "hits",
                                name: ""
                            };
                            if (b.obj) {
                                if (w.lastSoundObjId != b.obj.__id) {
                                    w.lastSoundObjId = b.obj.__id;
                                    var O = s.Defs[b.obj.type];
                                    D.name = O.sound.bullet
                                }
                            } else w.grounded = !0, D.name = u[A.type], void 0 === D.name && (D.name = "footstep_" + A.type, D.fn = "playGroup", D.channel = "sfx");
                            D.name && w.playHitSfx && a[D.fn](D.name, {
                                channel: D.channel,
                                soundPos: w.pos,
                                layer: w.layer,
                                muffled: !0
                            })
                        }
                        "strobe" == w.type && w.strobeSprite && (w.strobeTicker = c.clamp(w.strobeTicker + e * w.strobeDir * w.strobeSpeed, 0, 1), w.strobeScale = c.easeInExpo(w.strobeTicker) * w.strobeScaleMax, w.strobeSprite.scale.set(w.strobeScale, w.strobeScale), (w.strobeScale >= w.strobeScaleMax || w.strobeTicker <= 0) && (w.strobeDir *= -1));
                        var B = w.layer,
                            L = w.posZ < .25 ? 14 : 25,
                            R = l.createCircle(w.pos, 3 * w.rad),
                            F = r.insideStructureStairs(R),
                            j = r.insideStructureMask(R);
                        !(w.posZ >= .25 && F && (1 & w.layer) == (1 & i.layer)) || j && 2 & i.layer || (B |= 2, L += 100), w.alwaysRenderOntop && 0 == i.layer && (L = 1e3, B |= 2), o.addPIXIObj(w.sprite, B, L);
                        var N = w.imgScale * c.remap(w.posZ, 0, n.projectile.maxHeight, 1, 4.75),
                            V = h.pointToScreen(w.pos),
                            q = h.pixels(N);
                        w.sprite.position.set(V.x, V.y), w.sprite.scale.set(q, q), w.sprite.rotation = w.rot, w.sprite.alpha = w.inWater ? .3 : 1
                    }
                }
            }
        }, e.exports = {
            nt: r
        }
    },
    bdd2570b: function(e, t, a) {
        "use strict";
        var i = {
            "@metadata": {
                "last-updated": "2018-02-12",
                locale: "nl"
            },
            "word-order": "sov",
            "index-create-account": "Maak een account",
            "index-set-account-name": "Stel je account naam vast",
            "index-enter-name": "Voer je naam in",
            "index-finish": "Voltooid",
            "index-delete-account": "Verwijder je account",
            "index-delete-account-desc": 'Voer "DELETE" in om je account te verwijderen:',
            "index-confirm": "Bevestig",
            "index-customize-avatar": "Pas je avatar aan",
            "index-done": "Klaar",
            "index-account": "Account",
            "index-log-in-with": "Log in met",
            "index-facebook": "Facebook",
            "index-google": "Google",
            "index-twitch": "Twitch",
            "index-discord": "Discord",
            "index-my-stats": "Mijn statistieken",
            "index-link-account": "Koppel Account",
            "index-log-out": "Log uit",
            "index-change-avatar": "Verander je avatar",
            "index-change-account-name": "Verander je account naam",
            "index-back": "Terug",
            "index-link-account-to": "Koppel account aan",
            "index-log-in-desc": "Log in!",
            "index-logging-in": "Aan het inloggen",
            "index-leaderboards": "Scoreborden",
            "index-slogan": "2d Battle Royale",
            "index-region": "Regio",
            "index-north-america": "Noord-Amerika",
            "index-europe": "Europa",
            "index-asia": "Azië",
            "index-south-america": "Zuid-Amerika",
            "index-korea": "Zuid-Korea",
            "index-players": "spelers",
            "index-play-solo": "Speel Alleen",
            "index-play-duo": "Team van 2",
            "index-play-squad": "Team van 4",
            "index-create-team": "Maak een Team",
            "index-how-to-play": "Hoe te spelen",
            "index-leave-team": "Verlaat Team",
            "index-joining-team": "Aansluiten bij een Team",
            "index-creating-team": "Team aan het maken",
            "index-invite-link": "Uitnodigings Link",
            "index-solo": "Solo",
            "index-duo": "Team van 2",
            "index-squad": "Team van 4",
            "index-auto-fill": "Vullen",
            "index-no-fill": "Niet vullen",
            "index-waiting-for-leader": "Wachten op de leider om te beginnen",
            "index-play": "Speel",
            "index-featured-youtuber": "Aanbevolen Youtuber",
            "index-settings": "Opties",
            "index-high-resolution": "Hoge resolutie (Controleer verhogen van kwaliteit)",
            "index-screen-shake": "Scherm schudden",
            "index-mobile-announce": "Nu beschikbaar op mobiel!",
            "index-team-is-full": "Team is vol!",
            "index-failed-joining-team": "Gefaald aan te sluiten tot team.",
            "index-failed-creating-team": "Gefaald om team aan te maken.",
            "index-failed-finding-game": "Gefaald om een team te vinden.",
            "index-failed-joining-game": "Gefaald aan te sluiten tot team.",
            "index-lost-connection": "Connectie verloren met team.",
            "index-host-closed": "Gastheer heeft de connectie gesloten.",
            "index-view-more": "Bekijk meer",
            "index-back-to-main": "Terug naar het hoofdmenu",
            "index-most-kills": "Meeste kills",
            "index-total-kills": "Totale kills",
            "index-total-wins": "Totaal keer gewonnen",
            "index-top-5-percent": "Top 5 procent",
            "index-kill-death-ratio": "Kill-dood verhouding",
            "index-for": "Van",
            "index-today": "Vandaag",
            "index-this-week": "Deze week",
            "index-all-time": "Altijd",
            "index-top-100": "TOP 100",
            "index-rank": "Rang",
            "index-player": "Speler",
            "index-total-games": "Totale spellen",
            "index-controls": "Besturing",
            "index-movement": "Beweging",
            "index-movement-ctrl": "W, A, S, D",
            "index-aim": "Richten",
            "index-aim-ctrl": "Muis",
            "index-punch": "Slaan",
            "index-shoot": "Schieten",
            "index-shoot-ctrl": "Linker Klik",
            "index-change-weapons": "Verander wapens",
            "index-change-weapons-ctrl": "1 - 4 of muis wieltje",
            "index-stow-weapons": "Verberg Wapens (Slaan modus)",
            "index-stow-weapons-ctrl": "3 of E",
            "index-swap-weapons": "Ruil naar vorig wapen",
            "index-swap-weapons-ctrl": "Q",
            "index-swap-weapon-slots": "Wapen overschakelen naar andere gleuf",
            "index-swap-weapon-slots-ctrl": "T of sleep het wapen naar ander gleuf",
            "index-reload": "Herladen",
            "index-reload-ctrl": "R",
            "index-scope-zoom": "Zoombereik",
            "index-scope-zoom-ctrl": "Linker Klik op Zoom",
            "index-pickup": "Oppakken",
            "index-loot": "Buit",
            "index-revive": "Opknappen",
            "index-pickup-ctrl": "F",
            "index-use-medical": "Gebruik Medisch Item",
            "index-use-medical-ctrl": "Linker Klik op Item of 7 - 0",
            "index-drop-item": "Laat item vallen",
            "index-drop-item-ctrl": "Rechter klik op item",
            "index-cancel-action": "Annuleer Actie",
            "index-cancel-action-ctrl": "X",
            "index-view-map": "Bekijk kaart",
            "index-view-map-ctrl": "M of G",
            "index-toggle-minimap": "Verberg HUD",
            "index-toggle-minimap-ctrl": "V",
            "index-use-ping": "Gebruik Team ping-wiel",
            "index-use-ping-ctrl": "Houd C ingedrukt, houd daarna Recht klik ingedrukt en sleep muis, laat daarna Recht klik los",
            "index-use-emote": "Gebruik Gevoelens Wiel",
            "index-use-emote-ctrl": "Houd Recht klik ingedrukt en sleep muis, laat daarna Recht klik los",
            "index-tips-1-desc": "Het doel van surviv.io is het zijn van de laatste levende speler. Je leeft maar 1 keer per spel - er is geen respawn!",
            "index-tips-2": "2D PUBG",
            "index-tips-2-desc": "Als je andere battle royale spellen zoals PUBG, Fortnite of H1Z1 hebt gespeeld, dan ben je al halverwege! Denk maar dat surviv.io een 2D PUBG is.",
            "index-tips-3": "Pak spullen en kill",
            "index-tips-3-desc": "Je begint het spel met geen items behalve een simpele rugtas. Beweeg door de map om buit te vinden: wapens, ammunitie, scopes en medische items. Vermoord andere spelers en pak hun spullen!",
            "index-tips-4": "Rood = Slecht!",
            "index-tips-4-desc": "Spelers zijn niet de enige die je pijn kunnen doen. De dodelijke rode zone zal insluiten vanuit de zijkanten van de map en zal je enorm veel schade aanrichten als je er in staat. Houd een oog open op de kaart en blijf veilig.",
            "game-alive": "In leven",
            "game-reloading": "Herladen",
            "game-using": "aan het gebruiken",
            "game-reviving": "aan het bijbrengen",
            "game-revive-teammate": "Knap Teamgenoot op",
            "game-equip": "Uitrusten",
            "game-cancel": "Annuleren",
            "game-open-door": "Open Door",
            "game-close-door": "Close Door",
            "game-unlock": "Unlock",
            "game-You": "You",
            "game-you": "you",
            "game-themselves": "themselves",
            "game-yourself": "yourself",
            "game-you-died": "died",
            "game-player-died": "died",
            "game-with": "with",
            "game-knocked-out": "knocked out",
            "game-killed": "killed",
            "game-finally-killed": "finally killed",
            "game-finally-bled-out": "finally bled out",
            "game-died-outside": "died outside the safe zone",
            "game-the-red-zone": "The red zone",
            "game-waiting-for-players": "Aan het wachten voor spelers",
            "game-spectating": "Toeschouwen,",
            "game-red-zone-advances": "Rode zone vordert in",
            "game-red-zone-advancing": "Rode zone vordert, ga naar de veilige zone!",
            "game-seconds": "seconden",
            "game-minutes": "minuten",
            "game-minute": "minuut",
            "game-m": "m",
            "game-s": "s",
            "game-not-enough-space": "Niet genoeg plaats!",
            "game-item-already-owned": "Item is al in bezit!",
            "game-item-already-equipped": "Item is al uitgerust!",
            "game-better-item-equipped": "Beter item uitgerust!",
            "game-play-new-game": "Speel nieuw spel",
            "game-spectate": "Toeschouwen",
            "game-full-screen": "Vol scherm",
            "game-sound": "Geluid",
            "game-quit-game": "Stop met spelen",
            "game-return-to-game": "Keer terug naar spel",
            "game-hide-match-stats": "Verberg wedstrijd statistieken",
            "game-view-match-stats": "Zie wedstrijd statistieken",
            "game-previous-teammate": "Vorige Teamgenoot",
            "game-next-teammate": "Volgende Teamgenoot",
            "game-spectate-previous": "",
            "game-spectate-next": "",
            "game-leave-game": "Verlaat spel",
            "game-your-results": "Jouw resultaten",
            "game-chicken": "Gewonnen! Vanavond eten we kip!",
            "game-won-the-game": "heeft het spel gewonnen.",
            "game-team-eliminated": "Jouw team is uitgeschakeld.",
            "game-rank": "Rang",
            "game-team-rank": "Team Rang",
            "game-team-kills": "Team Kills",
            "game-kill": "Kill",
            "game-kills": "Kills",
            "game-damage-dealt": "Schade aangericht",
            "game-damage-taken": "Schade opgelopen",
            "game-survived": "Overleefd",
            "game-backpack00": "Zak",
            "game-backpack01": "Kleine rugtas",
            "game-backpack02": "Normale rugtas",
            "game-backpack03": "Militaire rugtas",
            "game-bandage": "Verband",
            "game-bandage-tooltip": "Linker klik om 15 gezondheid te herstellen.",
            "game-healing-tooltip": "Kan niet meer dan 75 gezondheid herstellen.",
            "game-healthkit": "Verbandstrommel",
            "game-healthkit-tooltip": "Linker klik om 100 gezondheid te herstellen.",
            "game-soda": "Frisdrank",
            "game-soda-tooltip": "Linker klik om je adrenaline met 25 te stimuleren.",
            "game-adrenaline-tooltip": "Adrenaline herstelt gezondheid na een tijdje.",
            "game-painkiller": "Pillen",
            "game-painkiller-tooltip": "Linker klik om je adrenaline met 50 te stimuleren.",
            "game-9mm": "9mm",
            "game-9mm-tooltip": "Ammunitie voor M9, G18C, MP5, MAC-10, CZ-3A1, UMP9 en Vector.",
            "game-12gauge": "12 gauge",
            "game-12gauge-tooltip": "Ammunitie voor M870, M1100, SPAS-12, Saiga-12 en MP220.",
            "game-762mm": "7.62mm",
            "game-762mm-tooltip": "Ammunitie voor AK-47, SCAR-H, M39, Mosin-Nagant, SV-98, M1, OT-38 en DP-28.",
            "game-556mm": "5.56mm",
            "game-556mm-tooltip": "Ammunitie voor FAMAS, M416, M4A1-S, QBB-97, Mk 12 en M249.",
            "game-50AE": ".50 AE",
            "game-50AE-tooltip": "Ammunitie voor DEagle 50.",
            "game-308sub": ".308 Subsonic",
            "game-308sub-tooltip": "Ammunitie voor AWM-S.",
            "game-flare": "Flare",
            "game-flare-tooltip": "Ammunitie voor Flare Gun.",
            "game-45acp": ".45 ACP",
            "game-45acp-tooltip": "Ammunitie voor M1911, M1A1, Model 94 en Peacemaker.",
            "game-chest01": "Level 1 Armor",
            "game-chest02": "Level 2 Armor",
            "game-chest03": "Level 3 Armor",
            "game-helmet01": "Level 1 Helm",
            "game-helmet02": "Level 2 Helm",
            "game-helmet03": "Level 3 Helm",
            "game-1xscope": "1x Scope",
            "game-2xscope": "2x Scope",
            "game-4xscope": "4x Scope",
            "game-8xscope": "8x Scope",
            "game-15xscope": "15x Scope",
            "game-level-1": "Lvl. 1",
            "game-level-2": "Lvl. 2",
            "game-level-3": "Lvl. 3",
            "game-level-4": "Lvl. 4",
            "game-outfitBase": "Basis Outfit",
            "game-outfitRoyalFortune": "Koninklijk Fortuin",
            "game-outfitKeyLime": "Limoen",
            "game-outfitCobaltShell": "Kobalt schelp",
            "game-outfitCarbonFiber": "Koolstofvezel",
            "game-outfitDarkGloves": "De Professional",
            "game-outfitGhillie": "Ghillie Kostuum",
            "game-outfitCamo": "Bos Camouflage",
            "game-outfitRed": "Doelpraktijk",
            "game-outfitWhite": "Arctische Wreker",
            "game-fists": "Fists",
            "game-karambit_rugged": "Karambit Rugged",
            "game-hud-karambit_rugged": "Karambit",
            "game-karambit_prismatic": "Karambit Prismatic",
            "game-hud-karambit_prismatic": "Karambit",
            "game-bayonet_rugged": "Bayonet Rugged",
            "game-hud-bayonet_rugged": "Bayonet",
            "game-bayonet_woodland": "Bayonet Woodland",
            "game-hud-bayonet_woodland": "Bayonet",
            "game-huntsman_rugged": "Huntsman Rugged",
            "game-hud-huntsman_rugged": "Huntsman",
            "game-huntsman_burnished": "Huntsman Burnished",
            "game-hud-huntsman_burnished": "Huntsman",
            "game-woodaxe": "Wood Axe",
            "game-fireaxe": "Fire Axe",
            "game-hook": "Hook",
            "game-pan": "Pan",
            "game-ak47": "AK-47",
            "game-dp28": "DP-28",
            "game-mosin": "Mosin-Nagant",
            "game-m39": "M39 EMR",
            "game-mp5": "MP5",
            "game-mac10": "MAC-10",
            "game-ump9": "UMP9",
            "game-m870": "M870",
            "game-mp220": "MP220",
            "game-saiga": "Saiga-12",
            "game-m9": "M9",
            "game-glock": "G18C",
            "game-ot38": "OT-38",
            "game-frag": "Frag Granaat",
            "game-hud-frag": "Frag",
            "game-smoke": "Smoke Grenade",
            "game-hud-smoke": "Smoke",
            "game-potato": "Aardappel",
            "game-hud-potato": "Aardappel",
            "game-potato_heavy": "Aardappel",
            "game-barrel_01": "een vat",
            "game-silo_01": "een silo",
            "game-oven_01": "een oven",
            "game-control_panel_01": "Control Panel",
            "game-control_panel_02": "Control Panel",
            "game-control_panel_03": "a computer terminal",
            "game-power_box_01": "a power box",
            "game-airdrop_crate_01": "Air Drop",
            "game-airdrop_crate_02": "Air Drop",
            "index-play-50v50": "Speel 50v50",
            "index-50v50": "50v50",
            "game-red-team": "Red Team",
            "game-blue-team": "Blue Team",
            "game-red-leader": "Red Leader",
            "game-blue-leader": "Blue Leader",
            "game-is-down": "is down",
            "game-is-dead": "is dead",
            "game-promoted-to": "promoted to",
            "game-youve-been-promoted-to": "You've been promoted to"
        };
        e.exports = i
    },
    be22c643: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }
        var r = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            o = (a("989ad62a"), a("34e32c48")),
            n = a("6b42806d"),
            s = a("10899aea"),
            l = a("7b5bbf6e"),
            c = a("c2a798c8"),
            m = function() {
                function e(t, a, r, m, p) {
                    i(this, e), this.spline = new l(t, r), this.waterWidth = a, this.shoreWidth = s.clamp(.75 * a, 4, 8), this.looped = r, this.center = c.create(0, 0);
                    for (var d = 0; d < this.spline.points.length; d++) this.center = c.add(this.center, this.spline.points[d]);
                    this.center = c.div(this.center, this.spline.points.length);
                    for (var h = 0, u = 0; u < this.spline.points.length; u++) h += c.length(c.sub(this.spline.points[u], this.center));
                    h /= this.spline.points.length;
                    var g = c.mul(c.sub(p.max, p.min), .5),
                        y = c.add(p.min, g);
                    this.waterPoly = [], this.shorePoly = [], this.waterWidths = [], this.shoreWidths = [];
                    for (var w = 0; w < t.length; w++) {
                        var x = t[w],
                            f = this.spline.getNormal(w / (t.length - 1)),
                            b = !1;
                        if (!this.looped && (0 == w || w == t.length - 1)) {
                            var _ = c.sub(x, y),
                                S = c.create(0, 0),
                                k = c.create(1, 0);
                            if (Math.abs(_.x) > Math.abs(_.y) ? (S = c.create(_.x > 0 ? p.max.x : p.min.x, x.y), k = c.create(_.x > 0 ? 1 : -1, 0)) : (S = c.create(x.x, _.y > 0 ? p.max.y : p.min.y), k = c.create(0, _.y > 0 ? 1 : -1)), c.lengthSqr(c.sub(S, x)) < 1) {
                                var v = c.perp(k);
                                c.dot(f, v) < 0 && (v = c.neg(v)), f = v, b = !0
                            }
                        }
                        var z = this.waterWidth;
                        if (!this.looped) {
                            var M = t.length,
                                T = 2 * (Math.max(1 - w / M, w / M) - .5);
                            z = (1 + 1.5 * Math.pow(T, 3)) * this.waterWidth
                        }
                        this.waterWidths.push(z);
                        for (var P = this.shoreWidth, I = null, C = 0; C < m.length; C++) {
                            var A = m[C],
                                E = A.spline.getClosestTtoPoint(x),
                                D = A.spline.getPos(E),
                                O = c.length(c.sub(D, x));
                            O < 2 * A.waterWidth && (P = s.max(P, A.shoreWidth)), (0 == w || w == t.length - 1) && O < 1.5 && !b && (I = A)
                        }
                        w > 0 && (P = (this.shoreWidths[w - 1] + P) / 2), this.shoreWidths.push(P), P += z;
                        var B = function(e, t, a) {
                                var i = c.add(e, t);
                                if (!s.pointInsidePolygon(i, a)) {
                                    var r = s.rayPolygonIntersect(e, t, a);
                                    if (r) return c.mul(t, r)
                                }
                                return t
                            },
                            L = void 0,
                            R = void 0,
                            F = void 0,
                            j = void 0;
                        if (this.looped) {
                            var N = c.sub(x, this.center),
                                V = c.length(N);
                            N = V > 1e-4 ? c.div(N, V) : c.create(1, 0);
                            var q = s.lerp(Math.pow(s.min(z / h, 1), .5), z, (1 - (h - z) / V) * V),
                                G = s.lerp(Math.pow(s.min(P / h, 1), .5), P, (1 - (h - P) / V) * V);
                            L = c.add(x, c.mul(N, z)), R = c.add(x, c.mul(N, -q)), F = c.add(x, c.mul(N, P)), j = c.add(x, c.mul(N, -G))
                        } else {
                            var U = c.mul(f, z),
                                H = c.mul(f, -z),
                                W = c.mul(f, P),
                                K = c.mul(f, -P);
                            I && (U = B(x, U, I.waterPoly), H = B(x, H, I.waterPoly), W = B(x, W, I.shorePoly), K = B(x, K, I.shorePoly)), L = c.add(x, U), R = c.add(x, H), F = c.add(x, W), j = c.add(x, K)
                        }
                        L = o.clampPosToAabb(L, p), R = o.clampPosToAabb(R, p), F = o.clampPosToAabb(F, p), j = o.clampPosToAabb(j, p), this.waterPoly.splice(w, 0, L), this.waterPoly.splice(this.waterPoly.length - w, 0, R), this.shorePoly.splice(w, 0, F), this.shorePoly.splice(this.shorePoly.length - w, 0, j)
                    }
                    for (var Z = c.create(Number.MAX_VALUE, Number.MAX_VALUE), X = c.create(-Number.MAX_VALUE, -Number.MAX_VALUE), Y = 0; Y < this.shorePoly.length; Y++) Z = c.minElems(Z, this.shorePoly[Y]), X = c.maxElems(X, this.shorePoly[Y]);
                    this.aabb = n.createAabb(Z, X, 0)
                }
                return r(e, [{
                    key: "distanceToShore",
                    value: function(e) {
                        var t = this.spline.getClosestTtoPoint(e),
                            a = c.length(c.sub(e, this.spline.getPos(t)));
                        return s.max(this.waterWidth - a, 0)
                    }
                }, {
                    key: "getWaterWidth",
                    value: function(e) {
                        var t = this.spline.points.length,
                            a = s.clamp(Math.floor(e * t), 0, t);
                        return this.waterWidths[a]
                    }
                }]), e
            }();
        e.exports = m
    },
    c2a798c8: function(e, t, a) {
        "use strict";

        function i(e, t) {
            return e < t ? e : t
        }

        function r(e, t) {
            return e > t ? e : t
        }
        var o = {
            create: function(e, t) {
                return {
                    x: e,
                    y: void 0 !== t ? t : e
                }
            },
            copy: function(e) {
                return {
                    x: e.x,
                    y: e.y
                }
            },
            set: function(e, t) {
                e.x = t.x, e.y = t.y
            },
            add: function(e, t) {
                return {
                    x: e.x + t.x,
                    y: e.y + t.y
                }
            },
            sub: function(e, t) {
                return {
                    x: e.x - t.x,
                    y: e.y - t.y
                }
            },
            mul: function(e, t) {
                return {
                    x: e.x * t,
                    y: e.y * t
                }
            },
            div: function(e, t) {
                return {
                    x: e.x / t,
                    y: e.y / t
                }
            },
            neg: function(e) {
                return {
                    x: -e.x,
                    y: -e.y
                }
            },
            lengthSqr: function(e) {
                return e.x * e.x + e.y * e.y
            },
            length: function(e) {
                return Math.sqrt(o.lengthSqr(e))
            },
            normalize: function(e) {
                var t = o.length(e);
                return {
                    x: t > 1e-6 ? e.x / t : e.x,
                    y: t > 1e-6 ? e.y / t : e.y
                }
            },
            normalizeSafe: function(e, t) {
                t = t || o.create(1, 0);
                var a = o.length(e);
                return {
                    x: a > 1e-6 ? e.x / a : t.x,
                    y: a > 1e-6 ? e.y / a : t.y
                }
            },
            dot: function(e, t) {
                return e.x * t.x + e.y * t.y
            },
            perp: function(e) {
                return {
                    x: -e.y,
                    y: e.x
                }
            },
            proj: function(e, t) {
                return o.mul(t, o.dot(e, t) / o.dot(t, t))
            },
            rotate: function(e, t) {
                var a = Math.cos(t),
                    i = Math.sin(t);
                return {
                    x: e.x * a - e.y * i,
                    y: e.x * i + e.y * a
                }
            },
            mulElems: function(e, t) {
                return {
                    x: e.x * t.x,
                    y: e.y * t.y
                }
            },
            divElems: function(e, t) {
                return {
                    x: e.x / t.x,
                    y: e.y / t.y
                }
            },
            minElems: function(e, t) {
                return {
                    x: i(e.x, t.x),
                    y: i(e.y, t.y)
                }
            },
            maxElems: function(e, t) {
                return {
                    x: r(e.x, t.x),
                    y: r(e.y, t.y)
                }
            },
            randomUnit: function() {
                return o.normalizeSafe(o.create(Math.random() - .5, Math.random() - .5), o.create(1, 0))
            },
            lerp: function(e, t, a) {
                return o.add(o.mul(t, 1 - e), o.mul(a, e))
            },
            eq: function(e, t, a) {
                var i = void 0 !== a ? a : 1e-4;
                return Math.abs(e.x - t.x) <= i && Math.abs(e.y - t.y) <= i
            }
        };
        e.exports = o
    },
    c347b8dd: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = m.Defs[e.type],
                a = "building" == t.type || "structure" == t.type ? 1.15 : 1,
                i = [l.transform(m.getBoundingCollider(e.type), e.pos, e.rot, e.scale * a)];
            if (void 0 !== t.bridgeLandBounds)
                for (var r = 0; r < t.bridgeLandBounds.length; r++) i.push(l.transform(t.bridgeLandBounds[r], e.pos, e.rot, e.scale));
            for (var o = 0; o < i.length; o++) d.addCollider(i[o], 65535, .1)
        }

        function r(e) {
            var t = m.Defs[e.type],
                a = "building" == t.type || "structure" == t.type ? 1.1 : 1,
                i = [l.transform(m.getBoundingCollider(e.type), e.pos, e.rot, e.scale * a)];
            if (void 0 !== t.mapObstacleBounds) {
                i = [];
                for (var r = 0; r < t.mapObstacleBounds.length; r++) i.push(l.transform(t.mapObstacleBounds[r], e.pos, e.rot, e.scale))
            }
            for (var o = 0; o < i.length; o++) d.addCollider(i[o], 255, .1)
        }

        function o(e) {
            var t = m.Defs[e.type];
            if (void 0 !== t.terrain.waterEdge) {
                var a = t.terrain.waterEdge,
                    i = l.transform(m.getBoundingCollider(e.type), e.pos, e.rot, 1.15 * e.scale),
                    r = p.add(i.min, p.mul(p.sub(i.max, i.min), .5)),
                    o = p.rotate(a.dir, e.rot),
                    n = function(e, t, a) {
                        a < 0 && (t = p.neg(t)), d.addRay(e, t, Math.abs(a), 16777215, 0)
                    };
                n(r, o, a.distMin), n(p.add(r, p.mul(p.perp(o), .5)), o, a.distMax)
            }
        }

        function n(e) {
            var t = m.Defs[e.type];
            if (void 0 !== t.terrain.bridge) {
                for (var a = t.bridgeLandBounds || [], i = 0; i < a.length; i++) {
                    var r = l.transform(a[i], e.pos, e.rot, e.scale);
                    d.addCollider(r, 16742144, 0)
                }
                for (var o = t.bridgeWaterBounds || [], n = 0; n < o.length; n++) {
                    var s = l.transform(o[n], e.pos, e.rot, e.scale);
                    d.addCollider(s, 30719, 0)
                }
                var h = c.getBridgeDims(e.type),
                    u = p.rotate(p.create(1, 0), e.rot);
                d.addRay(e.pos, u, .5 * h.length, 16711680, 0), d.addRay(e.pos, p.perp(u), .5 * h.width, 65280, 0);
                var g = c.getBridgeOverlapCollider(e.type, e.pos, e.rot, e.scale);
                d.addCollider(g, 7799039, 0)
            }
        }

        function s(e, t) {
            t = Math.floor(t);
            for (var a = 0; a < t; a++) {
                var i = e.getPos(a / t),
                    r = e.getPos((a + 1) / t);
                d.addLine(i, r, 65280, 0)
            }
        }
        var l = a("6b42806d"),
            c = a("7510cc08"),
            m = a("ceee80d9"),
            p = a("c2a798c8"),
            d = a("af8ba00f");
        e.exports = {
            renderMapBuildingBounds: i,
            renderMapObstacleBounds: r,
            renderWaterEdge: o,
            renderBridge: n,
            renderSpline: s
        }
    },
    c381ef30: function(e, t, a) {
        "use strict";

        function i() {
            if (n) {
                for (var e = arguments.length, t = Array(e), a = 0; a < e; a++) t[a] = arguments[a];
                s.apply(this, [o].concat(t))
            }
        }

        function r() {
            console.log = i, console.log("Init system logger")
        }
        var o = "[dev]",
            n = void 0 !== function(e, t) {
                t || (t = window.location.href), e = e.replace(/[\[\]]/g, "\\$&");
                var a = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)"),
                    i = a.exec(t);
                if (i) return i[2] ? decodeURIComponent(i[2].replace(/\+/g, " ")) : ""
            }("debug"),
            s = console.log;
        e.exports = {
            init: r
        }
    },
    c4623452: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }
        var r = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            o = a("ce29f17f"),
            n = (a("26be8056"), [{
                region: "na",
                zone: "sfo",
                url: "na-sfo-p1.surviv.io"
            }, {
                region: "na",
                zone: "mia",
                url: "na-mia-p1.surviv.io"
            }, {
                region: "na",
                zone: "nyc",
                url: "na-nyc-p1.surviv.io"
            }, {
                region: "na",
                zone: "chi",
                url: "na-chi-p1.surviv.io"
            }, {
                region: "sa",
                zone: "sao",
                url: "sa-sao-p1.surviv.io"
            }, {
                region: "eu",
                zone: "fra",
                url: "eu-fra-p1.surviv.io"
            }, {
                region: "eu",
                zone: "waw",
                url: "eu-waw-p1.surviv.io"
            }, {
                region: "as",
                zone: "sgp",
                url: "as-sgp-p1.surviv.io"
            }, {
                region: "as",
                zone: "nrt",
                url: "as-nrt-p1.surviv.io"
            }, {
                region: "as",
                zone: "hkg",
                url: "as-hkg-p1.surviv.io"
            }, {
                region: "kr",
                zone: "sel",
                url: "kr-sel-p1.surviv.io"
            }]);
        o.prod || (n = [{
            region: "na",
            zone: "sfo",
            url: "localhost:3001"
        }]);
        var s = function() {
            function e() {
                i(this, e), this.ptcDataBuf = new ArrayBuffer(1), this.tests = n.map(function(e) {
                    return {
                        region: e.region,
                        zone: e.zone,
                        url: e.url,
                        ping: 9999,
                        active: !1,
                        complete: !1,
                        ws: null,
                        sendDelay: 0,
                        sendTime: 0,
                        sendCount: 0,
                        recvCount: 0,
                        recvCountMax: 6
                    }
                }), this.testsStarted = 0, this.testsCompleted = 0, this.printSummary = !0
            }
            return r(e, [{
                key: "start",
                value: function(e) {
                    if ("WebSocket" in window) {
                        for (var t = 0, a = 0; a < this.tests.length; a++) {
                            var i = this.tests[a];
                            !i.active && !i.complete && -1 !== e.indexOf(i.region) && (i.active = !0, this.testsStarted++, t++)
                        }
                        t > 0 && (this.printSummary = !0)
                    }
                }
            }, {
                key: "update",
                value: function(e) {
                    for (var t = this, a = 0; a < this.tests.length; a++) ! function(a) {
                        var i = t.tests[a];
                        if (!i.active) return "continue";
                        if (!i.ws) {
                            var r = "https:" == window.location.protocol ? "wss://" : "ws://",
                                o = new WebSocket(r + i.url + "/ptc");
                            o.binaryType = "arraybuffer", o.onopen = function() {}, o.onmessage = function(e) {
                                var t = (Date.now() - i.sendTime) / 1e3;
                                i.ping = Math.min(i.ping, t), i.recvCount++, i.sendDelay = .125
                            }, o.onerror = function(e) {
                                o.close()
                            }, o.onclose = function() {
                                i.active = !1, i.complete = !0, i.ws = null, t.testsCompleted++
                            }, i.ws = o, i.sendDelay = 0, i.sendCount = 0, i.recvCount = 0
                        }
                        i.ws.readyState == i.ws.OPEN && (i.sendDelay -= e, i.sendCount == i.recvCount && i.sendDelay < 0 && (i.sendTime = Date.now(), i.sendCount++, i.ws.send(t.ptcDataBuf)), i.recvCount >= i.recvCountMax && i.ws.close())
                    }(a);
                    if (this.printSummary && this.isComplete()) {
                        var i = this.tests.sort(function(e, t) {
                            return e.ping - t.ping
                        });
                        console.log("Ping test results"), console.log("----------------------------------------");
                        for (var a = 0; a < i.length; a++) {
                            var r = i[a];
                            console.log("region", r.region, "zone  ", r.zone, "ping  ", r.ping)
                        }
                        this.printSummary = !1
                    }
                }
            }, {
                key: "isComplete",
                value: function() {
                    return this.testsCompleted == this.testsStarted && this.testsStarted > 0
                }
            }, {
                key: "getRegionList",
                value: function() {
                    for (var e = [], t = 0; t < n.length; t++) {
                        var a = n[t].region; - 1 === e.indexOf(a) && e.push(a)
                    }
                    return e
                }
            }, {
                key: "getRegion",
                value: function() {
                    return this.tests.sort(function(e, t) {
                        return e.ping - t.ping
                    }), this.tests[0].region
                }
            }, {
                key: "getZones",
                value: function(e) {
                    for (var t = this.tests.sort(function(e, t) {
                            return e.ping - t.ping
                        }), a = [], i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.region == e && a.push(r.zone)
                    }
                    return a
                }
            }]), e
        }();
        e.exports = s
    },
    c60b5e9f: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
        }

        function o(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
                constructor: {
                    value: e,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
        }

        function n(e, t, a) {
            var i = t - e,
                r = i * a;
            return Math.abs(r) < .01 ? i : r
        }

        function s() {
            var e = new d.Graphics;
            return e.position.set(0, 0), e.scale.set(1, 1), e.__zOrd = 0, e.__zIdx = 0, e
        }

        function l(e, t, a, i, r) {
            e.moveTo(t, a), e.lineTo(t, a + r), e.lineTo(t + i, a + r), e.lineTo(t + i, a), e.lineTo(t, a), e.closePath()
        }

        function c(e, t) {
            this.game = e, this.canvasMode = t, this.zIdx = 0, this.layer = 0, this.layerAlpha = 0, this.groundAlpha = 0, this.underground = !1, this.layers = [];
            for (var a = 0; a < 4; a++) this.layers.push(new g("layer_" + a));
            this.ground = new d.Graphics, this.ground.alpha = 0, this.layerMask = s(), this.debugLayerMask = null, this.layerMaskDirty = !0, this.layerMaskActive = !1
        }
        var m = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            p = function e(t, a, i) {
                null === t && (t = Function.prototype);
                var r = Object.getOwnPropertyDescriptor(t, a);
                if (void 0 === r) {
                    var o = Object.getPrototypeOf(t);
                    return null === o ? void 0 : e(o, a, i)
                }
                if ("value" in r) return r.value;
                var n = r.get;
                return void 0 !== n ? n.call(i) : void 0
            },
            d = (a("0e566746"), a("8b1dfb45")),
            h = (a("6b42806d"), a("ceee80d9"), a("10899aea"), a("1901e2d9"), a("c2a798c8")),
            u = a("f398b7c7"),
            g = function(e) {
                function t(e) {
                    i(this, t);
                    var a = r(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                    return a.debugName = e || "", a.dirty = !0, a
                }
                return o(t, e), m(t, [{
                    key: "addSortedChild",
                    value: function(e) {
                        p(t.prototype.__proto__ || Object.getPrototypeOf(t.prototype), "addChild", this).call(this, e), this.dirty = !0
                    }
                }, {
                    key: "checkSort",
                    value: function() {
                        return !!this.dirty && (this.children.sort(function(e, t) {
                            return e.__zOrd == t.__zOrd ? e.__zIdx - t.__zIdx : e.__zOrd - t.__zOrd
                        }), this.dirty = !1, !0)
                    }
                }]), t
            }(d.Container);
        c.prototype = {
            n: function() {
                this.layerMask.parent && this.layerMask.parent.removeChild(this.layerMark), this.layerMask.destroy(!0)
            },
            addPIXIObj: function(e, t, a, i) {
                if (!e.transform) {
                    var r = new Error,
                        o = JSON.stringify({
                            type: "addChild",
                            stack: r.stack,
                            id: u.instanceId,
                            browser: navigator.userAgent,
                            playing: this.game.playing,
                            gameOver: this.game.gameOver,
                            spectating: this.game.spectating,
                            time: this.game.playingTicker,
                            mode: this.game.teamMode,
                            video: this.game.adManager.isPlayingVideo,
                            layer: t,
                            zOrd: a,
                            zIdx: i
                        });
                    u.logError(o)
                }
                void 0 === e.__layerIdx && (e.__layerIdx = -1, e.__zOrd = -1, e.__zIdx = -1);
                var n = t;
                2 & t && (n = a >= 100 ? 3 : 2), (e.parent != this.layers[n] || e.__zOrd != a || void 0 !== i && e.__zIdx != i) && (e.__layerIdx = n, e.__zOrd = a, e.__zIdx = void 0 !== i ? i : this.zIdx++, this.layers[n].addSortedChild(e))
            },
            setActiveLayer: function(e) {
                this.layer = e
            },
            setUnderground: function(e) {
                this.underground = e
            },
            resize: function(e, t) {
                var a = e.mapLoaded ? e.getMapDef().biome.colors.underground : 1772803;
                this.ground.clear(), this.ground.beginFill(a), this.ground.drawRect(0, 0, t.screenWidth, t.screenHeight), this.ground.endFill(), this.layerMaskDirty = !0
            },
            redrawLayerMask: function(e, t) {
                var a = this.layerMask;
                if (this.canvasMode) {
                    if (a.clear(), this.layerMaskActive) {
                        a.beginFill(16777215, 1), a.drawRect(0, 0, e.screenWidth, e.screenHeight);
                        for (var i = t.Mt.m(), r = 0; r < i.length; r++) {
                            var o = i[r];
                            if (o.active)
                                for (var n = 0; n < o.mask.length; n++) {
                                    var s = o.mask[n],
                                        c = h.mul(h.sub(s.max, s.min), .5),
                                        m = h.add(s.min, c),
                                        p = e.pointToScreen(h.sub(m, c)),
                                        d = e.pointToScreen(h.add(m, c));
                                    a.drawRect(p.x, p.y, d.x - p.x, d.y - p.y)
                                }
                        }
                        a.endFill()
                    }
                } else {
                    if (this.layerMaskDirty) {
                        this.layerMaskDirty = !1, a.clear(), a.beginFill(16777215, 1), l(a, 0, 0, 1024, 1024);
                        for (var u = t.Mt.m(), g = 0; g < u.length; g++) {
                            var y = u[g];
                            if (y.active)
                                for (var w = 0; w < y.mask.length; w++) {
                                    var x = y.mask[w],
                                        f = h.mul(h.sub(x.max, x.min), .5),
                                        b = h.add(x.min, f),
                                        _ = b.x - f.x,
                                        S = b.y - f.y,
                                        k = 2 * f.x,
                                        v = 2 * f.y;
                                    l(a, _, S, k, v), a.addHole()
                                }
                        }
                        a.endFill()
                    }
                    var z = e.pointToScreen(h.create(0, 0)),
                        M = (e.pointToScreen(h.create(1, 0)), e.scaleToScreen(1));
                    a.position.set(z.x, z.y), a.scale.set(M, -M)
                }
            },
            redrawDebugLayerMask: function(e, t) {
                var a = this.debugLayerMask;
                a.clear(), a.beginFill(16711935, 1);
                for (var i = t.Mt.m(), r = 0; r < i.length; r++) {
                    var o = i[r];
                    if (o.active)
                        for (var n = 0; n < o.mask.length; n++) {
                            var s = o.mask[n],
                                c = h.mul(h.sub(s.max, s.min), .5),
                                m = h.add(s.min, c),
                                p = m.x - c.x,
                                d = m.y - c.y,
                                u = 2 * c.x,
                                g = 2 * c.y;
                            l(a, p, d, u, g)
                        }
                }
                a.endFill();
                var y = e.pointToScreen(h.create(0, 0)),
                    w = (e.pointToScreen(h.create(1, 0)), e.scaleToScreen(1));
                a.position.set(y.x, y.y), a.scale.set(w, -w)
            },
            c: function(e, t, a, i) {
                var r = this.layer > 0 ? 1 : 0;
                this.layerAlpha += n(this.layerAlpha, r, 12 * e);
                var o = 1 == this.layer && this.underground ? 1 : 0;
                this.groundAlpha += n(this.groundAlpha, o, 12 * e), this.layers[0].alpha = 1, this.layers[1].alpha = this.layerAlpha, this.layers[2].alpha = 1, this.layers[3].alpha = 1, this.ground.alpha = this.groundAlpha, this.layers[0].visible = this.groundAlpha < 1, this.layers[1].visible = this.layerAlpha > 0, this.ground.visible = this.groundAlpha > 0, this.redrawLayerMask(t, a);
                var s = 0 == this.layer;
                s && !this.layerMaskActive ? (this.layers[2].mask = this.layerMask, this.layers[2].addChild(this.layerMask), this.layerMaskActive = !0) : !s && this.layerMaskActive && (this.layers[2].mask = null, this.layers[2].removeChild(this.layerMask), this.layerMaskActive = !1);
                for (var l = 0, c = 0; c < this.layers.length; c++) this.layers[c].checkSort() && l++
            }
        }, e.exports = {
            RenderGroup: g,
            Xe: c
        }
    },
    c73dee75: function(e, t, a) {
        "use strict";

        function i(e, t, a, i) {
            var r = Math.atan2(i.y, i.x);
            return {
                p0: h.add(a, h.rotate(e, r)),
                p1: h.add(a, h.rotate(t, r))
            }
        }

        function r(e, t, a, i, r, o, n) {
            for (var s = Math.floor(d.random(1, 2)), l = h.mul(i, 9.5), c = 0; c < s; c++) l = h.rotate(l, (Math.random() - .5) * Math.PI / 3), o.addParticle(e, r, a, l);
            n.playGroup(t, {
                channel: "hits",
                soundPos: a,
                layer: r,
                muffled: !0
            })
        }

        function o() {
            this.bullets = [], this.tracerColors = {}
        }
        var n = a("8b1dfb45"),
            s = a("34e32c48"),
            l = a("6b42806d"),
            c = a("989ad62a"),
            m = (a("8649e148"), a("ceee80d9")),
            p = a("10899aea"),
            d = a("1901e2d9"),
            h = a("c2a798c8");
        a("af8ba00f"), o.prototype = {
            onMapLoad: function(e) {
                this.tracerColors = d.mergeDeep({}, c.tracerColors, e.getMapDef().biome.tracerColors)
            },
            addBullet: function(e, t, a) {
                for (var i = null, r = 0; r < this.bullets.length; r++)
                    if (!this.bullets[r].alive && !this.bullets[r].collided) {
                        i = this.bullets[r];
                        break
                    }
                i || (i = {}, i.alive = !1, i.container = new n.Container, i.container.pivot.set(14.5, 0), i.container.visible = !1, i.bulletTrail = n.Sprite.fromImage("player-bullet-trail-02.img"), i.bulletTrail.anchor.set(.5, .5), i.container.addChild(i.bulletTrail), this.bullets.push(i));
                var o = c.bullets[e.bulletType],
                    s = 1 + e.varianceT * o.variance,
                    l = p.remap(e.distAdjIdx, 0, 16, -1, 1),
                    m = o.distance / Math.pow(c.bullet.reflectDistDecay, e.reflectCount);
                e.clipDistance && (m = e.distance), i.alive = !0, i.isNew = !0, i.collided = !1, i.scale = 1, i.playerId = e.playerId, i.startPos = h.copy(e.pos), i.pos = h.copy(e.pos), i.dir = h.copy(e.dir), i.layer = e.layer, i.speed = o.speed * s, i.distance = m * s + l, i.damageSelf = o.shrapnel || e.reflectCount > 0, i.reflectCount = e.reflectCount, i.reflectObjId = e.reflectObjId, i.whizHeard = !1;
                var d = Math.atan2(i.dir.x, i.dir.y);
                i.container.rotation = d - Math.PI / 2, i.layer = e.layer;
                var u = t.ve(i.playerId);
                u && 2 & u.layer && (i.layer |= 2);
                var g = this.tracerColors[o.tracerColor],
                    y = g.regular;
                u && u.isOnBrightSurface && (y = g.saturated), i.bulletTrail.scale.set(.8, o.tracerWidth), i.tracerLength = o.tracerLength, i.bulletTrail.tint = y, i.suppressed = !!o.suppressed, i.tracerAlphaRate = g.alphaRate, i.tracerAlphaMin = g.alphaMin, i.bulletTrail.alpha = 1, i.reflectCount > 0 && (i.bulletTrail.alpha *= .5), i.container.visible = !0, a.addPIXIObj(i.container, i.layer, 20)
            },
            c: function(e, t, a, o, n, u, g, y) {
                for (var w = t.Se.m(), x = 0; x < this.bullets.length; x++) {
                    var f = this.bullets[x];
                    if (f.collided && (f.scale = p.max(f.scale - 6 * e, 0), f.scale <= 0 && (f.collided = !1, f.container.visible = !1)), f.alive) {
                        var b = f.distance - h.length(h.sub(f.startPos, f.pos)),
                            _ = p.min(b, e * f.speed),
                            S = h.copy(f.pos);
                        if (f.pos = h.add(f.pos, h.mul(f.dir, _)), !n.ie.dead && d.sameAudioLayer(n.layer, f.layer) && h.length(h.sub(o.pos, f.pos)) < 7.5 && !f.whizHeard && f.playerId != n.__id && (y.playGroup("bullet_whiz", {
                                soundPos: f.pos,
                                fallOff: 4
                            }), f.whizHeard = !0), f.tracerAlphaRate && f.suppressed) {
                            var k = f.tracerAlphaRate;
                            f.bulletTrail.alpha = p.max(f.tracerAlphaMin, f.bulletTrail.alpha * k)
                        }
                        for (var v = [], z = a.pe.m(), M = 0; M < z.length; M++) {
                            var T = z[M];
                            if (!(!T.active || T.dead || !d.sameLayer(T.layer, f.layer) || T.height < c.bullet.height || f.reflectCount > 0 && T.__id == f.reflectObjId)) {
                                var P = l.intersectSegment(T.collider, S, f.pos);
                                P && v.push({
                                    type: "obstacle",
                                    obstacleType: T.type,
                                    collidable: T.collidable,
                                    point: P.point,
                                    normal: P.normal
                                })
                            }
                        }
                        for (var I = 0; I < w.length; I++) {
                            var C = w[I];
                            if (C.active && !C.ie.dead && (d.sameLayer(C.ie.layer, f.layer) || 2 & C.ie.layer) && (C.__id != f.playerId || f.damageSelf)) {
                                var A = null;
                                if (C.hasActivePan()) {
                                    var E = C,
                                        D = E.getPanSegment(),
                                        O = i(D.p0, D.p1, E.posOld, E.dirOld),
                                        B = i(D.p0, D.p1, E.pos, E.dir),
                                        L = s.intersectSegmentSegment(S, f.pos, O.p0, O.p1),
                                        R = s.intersectSegmentSegment(S, f.pos, B.p0, B.p1),
                                        F = R || L;
                                    if (F) {
                                        var j = h.normalize(h.perp(h.sub(B.p1, B.p0)));
                                        A = {
                                            point: F.point,
                                            normal: j
                                        }
                                    }
                                }
                                var N = s.intersectSegmentCircle(S, f.pos, C.pos, C.rad);
                                if (N && (!A || h.length(h.sub(N.point, f.startPos)) < h.length(h.sub(A.point, f.startPos))) ? v.push({
                                        type: "player",
                                        player: C,
                                        point: N.point,
                                        normal: N.normal
                                    }) : A && v.push({
                                        type: "pan",
                                        collidable: !0,
                                        point: A.point,
                                        normal: A.normal,
                                        layer: C.layer
                                    }), N || A) break
                            }
                        }
                        for (var V = 0; V < v.length; V++) {
                            var q = v[V];
                            q.dist = h.length(h.sub(q.point, S))
                        }
                        v.sort(function(e, t) {
                            return e.dist - t.dist
                        });
                        var G = !1,
                            U = t.ve(f.playerId);
                        U && (U.ie.dead || U.ie.downed) && (G = !0);
                        for (var H = !1, W = 0; W < v.length; W++) {
                            var K = v[W];
                            if ("obstacle" == K.type) {
                                var Z = m.Defs[K.obstacleType];
                                r(Z.hitParticle, Z.sound.bullet, K.point, K.normal, f.layer, g, y), H = K.collidable
                            } else if ("player" == K.type) {
                                if (!G) {
                                    var X = K.player,
                                        Y = h.sub(K.point, X.pos);
                                    Y.y *= -1, g.addParticle("bloodSplat", X.layer, h.mul(Y, o.ppu), h.create(0, 0), 1, 1, X.container), y.playGroup("player_bullet_hit", {
                                        soundPos: X.pos,
                                        fallOff: 1,
                                        layer: X.layer,
                                        muffled: !0
                                    })
                                }
                                H = !0
                            } else "pan" == K.type && (r("barrelChip", c.items.pan.sound.bullet, K.point, K.normal, K.layer, g, y), H = !0);
                            if (H) {
                                f.pos = K.point;
                                break
                            }
                        }
                        if (!(2 & f.layer)) {
                            for (var J = a.Mt.m(), Q = f.layer, $ = 0; $ < J.length; $++) {
                                var ee = J[$];
                                if (ee.active) {
                                    for (var te = !1, ae = !1, ie = 0; ie < ee.stairs.length; ie++) {
                                        var re = ee.stairs[ie];
                                        if (!re.lootOnly && l.intersectSegment(re.collision, f.pos, S)) {
                                            te = !0;
                                            break
                                        }
                                    }
                                    for (var oe = 0; oe < ee.mask.length; oe++)
                                        if (l.intersectSegment(ee.mask[oe], f.pos, S)) {
                                            ae = !0;
                                            break
                                        }
                                    te && !ae && (Q |= 2)
                                }
                            }
                            Q != f.layer && (f.layer = Q, u.addPIXIObj(f.container, f.layer, 20))
                        }(H || p.eqAbs(b, _)) && (f.collided = !0, f.alive = !1), f.isNew = !1
                    }
                }
            },
            createBulletHit: function(e, t, a) {
                var i = e.ve(t);
                i && a.playGroup("player_bullet_hit", {
                    soundPos: i.pos,
                    fallOff: 1,
                    layer: i.layer,
                    muffled: !0
                })
            },
            render: function(e, t) {
                for (var a = (e.pixels(1), 0); a < this.bullets.length; a++) {
                    var i = this.bullets[a];
                    if (i.alive || i.collided) {
                        var r = h.length(h.sub(i.pos, i.startPos)),
                            o = e.pointToScreen(i.pos);
                        i.container.position.set(o.x, o.y);
                        var n = e.pixels(1),
                            s = p.min(15 * i.tracerLength, r / 2);
                        i.container.scale.set(n * s * i.scale, n)
                    }
                }
            }
        }, e.exports = {
            at: o,
            playHitFx: r
        }
    },
    c99e6613: function(e, t, a) {
        "use strict";

        function i() {
            this.nameInput = r("#player-name-input-solo"), this.serverSelect = r("#server-select-main"), this.playMode0Btn = r("#btn-start-mode-0"), this.playMode1Btn = r("#btn-start-mode-1"), this.playMode2Btn = r("#btn-start-mode-2"), this.muteBtns = r(".btn-sound-toggle"), this.aimLineBtn = r("#btn-game-aim-line"), this.masterSliders = r(".sl-master-volume"), this.soundSliders = r(".sl-sound-volume"), this.musicSliders = r(".sl-music-volume"), this.serverWarning = r("#server-warning"), this.languageSelect = r(".language-select"), this.startMenuWrapper = r("#start-menu-wrapper"), this.gameAreaWrapper = r("#game-area-wrapper"), this.config = new u, this.config.addModifiedListener(this.onConfigModified.bind(this)), this.localization = new S, this.adManager = new m.AdManager(this.config), this.account = new c(this.config, this.localization), this.loadoutMenu = new _(this.config), this.pingTest = new v, this.audioManager = new h, this.ambience = new d, this.teamMenu = new T(this.config, this.pingTest, this.localization, this.joinGame.bind(this), this.audioManager), this.teamMenu.onLeave = this.onTeamMenuLeave.bind(this), this.pixi = null, this.textureManager = null, this.input = null, this.inputBinds = null, this.inputBindUi = null, this.game = null, this.loadComplete = !1, this.initialized = !1, this.active = !1, this.contextListener = function(e) {
                e.preventDefault()
            }, this.errorMessage = "", this.playEnabled = !1, this.quickPlayPendingModeIdx = -1, this.playTimeout = 0, this.pauseTime = 0, this.wasPlayingVideo = !1, this.checkedPingTest = !1, this.systemMemory = Number.MAX_VALUE, this.siteInfo = {}, this.siteInfoLoaded = !1, this.siteInfoApplied = !1, g.webview && g.version > "1.0.0" ? this.loadWebview() : this.loadBrowser()
        }
        a("c381ef30").init();
        var r = a("8ee62bea"),
            o = a("8b1dfb45");
        o.utils.skipHello();
        var n = a("989ad62a"),
            s = a("10899aea"),
            l = a("300e2704"),
            c = a("a68e9107"),
            m = a("2d958752"),
            p = a("259eae5b"),
            d = a("0b12821e"),
            h = a("4b528868"),
            u = a("6ffe8b70"),
            g = a("ce29f17f"),
            y = (a("e5d16b4d"), a("f398b7c7")),
            w = a("9b5f96fd"),
            x = a("26be8056"),
            f = a("4b8d140f"),
            b = a("d306eab6"),
            _ = a("153d9481"),
            S = a("7d64d541"),
            k = a("484b3444"),
            v = a("c4623452"),
            z = a("d84c74f8"),
            M = a("076760a2"),
            T = a("61fc98e9"),
            P = a("d3da5587"),
            I = a("f4d48896");
        i.prototype = {
                loadBrowser: function() {
                    var e = this;
                    this.config.load(function() {
                        e.requestSiteInfo(), e.startPingTest(), e.loadComplete = !0
                    })
                },
                loadWebview: function() {
                    var e = this;
                    document.addEventListener("deviceready", function() {
                            document.addEventListener("pause", function() {
                                e.onPause()
                            }), document.addEventListener("resume", function() {
                                e.onResume()
                            }), r("#news-block h3").html("What's New!!");
                            var t = [],
                                a = function(e) {
                                    t.push(e)
                                },
                                i = function(a) {
                                    var i = t.indexOf(a); - 1 !== i && t.splice(i, 1), 0 == t.length && (e.loadComplete = !0)
                                };
                            a("loadConfig"), a("loadSystemInfo"), e.config.load(function() {
                                e.requestSiteInfo(), e.startPingTest(), i("loadConfig")
                            }), g.version >= "1.0.8" ? I.getSystemMemoryInfo(function(t) {
                                e.systemMemory = t.capacity || Number.MAX_VALUE, i("loadSystemInfo")
                            }) : i("loadSystemInfo")
                        }, !1),
                        function(e, t, a) {
                            var i, r = g.version >= "1.0.8" ? "cordova/" + g.version : "cordova",
                                o = r + "/" + g.os + "/cordova.js",
                                n = e.getElementsByTagName(t)[0];
                            e.getElementById(a) || (i = e.createElement(t), i.id = a, i.onload = function() {}, i.src = o, n.parentNode.insertBefore(i, n))
                        }(document, "script", "cordova-js")
                },
                o: function() {
                    var e = this;
                    if (!this.initialized) {
                        if (!this.loadComplete) return void setTimeout(function() {
                            e.o()
                        }, 10);
                        if (this.initialized = !0, this.config.teamAutoFill = !0, g.webview ? k.applyWebviewStyling(g.tablet) : g.mobile && k.applyMobileBrowserStyling(g.tablet), g.webview && g.version >= "1.0.8" && setTimeout(function() {
                                e.adManager.showBannerAd()
                            }, 0), this.adManager.init(), this.account.init(), this.localization.localizeIndex(), this.nameInput.maxLength = l.Constants.kPlayerNameMaxLen, this.playMode0Btn.on("click", function() {
                                e.tryQuickStartGame(0)
                            }), this.playMode1Btn.on("click", function() {
                                e.tryQuickStartGame(1)
                            }), this.playMode2Btn.on("click", function() {
                                e.tryQuickStartGame(2)
                            }), this.serverSelect.change(function() {
                                var t = e.serverSelect.find(":selected").val();
                                e.config.set("region", t)
                            }), r(document).on("mouseup", function(e) {
                                4 != e.which && 5 != e.which || e.preventDefault()
                            }), this.nameInput.on("blur", function(t) {
                                e.setConfigFromDOM()
                            }), this.muteBtns.on("click", function(t) {
                                e.config.set("muteAudio", !e.config.get("muteAudio"))
                            }), this.muteBtns.on("mousedown", function(e) {
                                e.stopPropagation()
                            }), r(this.masterSliders).on("mousedown", function(e) {
                                e.stopPropagation()
                            }), r(this.soundSliders).on("mousedown", function(e) {
                                e.stopPropagation()
                            }), r(this.musicSliders).on("mousedown", function(e) {
                                e.stopPropagation()
                            }), this.masterSliders.on("input", function(t) {
                                var a = r(t.target).val() / 100;
                                e.audioManager.setMasterVolume(a), e.config.set("masterVolume", a)
                            }), this.soundSliders.on("input", function(t) {
                                var a = r(t.target).val() / 100;
                                e.audioManager.setSoundVolume(a), e.config.set("soundVolume", a)
                            }), this.musicSliders.on("input", function(t) {
                                var a = r(t.target).val() / 100;
                                e.audioManager.setMusicVolume(a), e.config.set("musicVolume", a)
                            }), r(".modal-settings-item").children("input").each(function(t, a) {
                                var i = r(a);
                                i.prop("checked", e.config.get(i.prop("id")))
                            }), r(".modal-settings-item > input:checkbox").change(function(t) {
                                var a = r(t.target);
                                e.config.set(a.prop("id"), a.is(":checked"))
                            }), r(".btn-fullscreen-toggle").on("click", function() {
                                x.toggleFullScreen()
                            }), this.languageSelect.on("change", function(t) {
                                var a = t.target.value;
                                a && e.config.set("language", a)
                            }), r("#btn-create-team").on("click", function() {
                                e.tryJoinTeam(!0)
                            }), r("#btn-team-mobile-link-join").on("click", function() {
                                var t = r("#team-link-input").val().trim(),
                                    a = t.indexOf("#");
                                a >= 0 && (t = t.slice(a + 1)), t.length > 0 ? (r("#team-mobile-link").css("display", "none"), e.tryJoinTeam(!1, t)) : (r("#team-mobile-link-desc").css("display", "none"), r("#team-mobile-link-warning").css("display", "none").fadeIn(100))
                            }), r("#btn-team-leave").on("click", function() {
                                window.history && window.history.replaceState("", "", "/"), e.game && e.game.n(), e.teamMenu.leave()
                            }), "WebSocket" in window)
                            if (x.authLocation()) {
                                if ("ie" == g.browser) {
                                    var t = 'Please use the <a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank">Chrome browser</a> for a better playing experience!';
                                    t += '<br><br>¡Usa el <a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank">navegador Chrome</a> para una mejor experiencia de juego!', t += '<br><br><a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank">구글 크롬</a> 브라우저로이 게임을 즐겨보세요.';
                                    var a = r("#modal-notification");
                                    a.find(".modal-settings-text").html(t), a.fadeIn(200)
                                }
                            } else {
                                y.logProxy(window.location.hostname);
                                var i = r("#modal-notification");
                                i.find(".modal-settings-text").html('Please use the <a href="https://surviv.io" target="_blank">official surviv.io site</a> for a better playing experience!'), i.fadeIn(200)
                            } else {
                            y.storeGeneric("error", "no_websocket");
                            var n = r("#modal-notification");
                            n.find(".modal-settings-text").html('WebSockets are required to play.<br><br>Please use the <a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank">Chrome browser</a> for a better playing experience!'), n.fadeIn(200)
                        }
                        if (/Android.*; wv\)/.test(navigator.userAgent) && !g.webview) {
                            var s = function(e) {
                                    return e.map(function(e) {
                                        return String.fromCharCode(e)
                                    }).join("")
                                },
                                c = document.body;
                            if (c) {
                                for (y.storeGeneric("error", "wv"), y.enabled = !1; c.firstChild;) c.removeChild(c.firstChild);
                                var m = [68, 111, 119, 110, 108, 111, 97, 100, 32, 116, 104, 101, 32, 111, 102, 102, 105, 99, 105, 97, 108, 32, 65, 110, 100, 114, 111, 105, 100, 32, 97, 112, 112, 32, 104, 101, 114, 101, 58],
                                    p = r("<div/>", {
                                        css: {
                                            marginTop: "10%",
                                            width: "100%",
                                            textAlign: "center"
                                        }
                                    }),
                                    d = r("<div/>", {
                                        text: s(m),
                                        css: {
                                            textAlign: "center",
                                            fontSize: "24px"
                                        }
                                    }),
                                    h = [104, 116, 116, 112, 115, 58, 47, 47, 112, 108, 97, 121, 46, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 47, 115, 116, 111, 114, 101, 47, 97, 112, 112, 115, 47, 100, 101, 116, 97, 105, 108, 115, 63, 105, 100, 61, 105, 111, 46, 115, 117, 114, 118, 105, 118, 46, 115, 117, 114, 118, 105, 118, 95, 105, 111, 95, 109, 111, 98, 105, 108, 101],
                                    u = r("<a/>", {
                                        href: s(h),
                                        class: "btn-download-android btn-download-app btn-darken",
                                        css: {
                                            marginTop: "20px",
                                            position: "absolute",
                                            left: "50%",
                                            transform: "translateX(-50%)"
                                        }
                                    });
                                p.append(d), p.append(u), c.appendChild(p[0])
                            }
                            this.game && this.game.ws && this.game.ws.close()
                        }
                        this.account.load(), this.loadoutMenu.init(this.account), this.playEnabled = !0, this.setDOMFromConfig(), this.setAppActive(!0), this.audioManager.preloadSounds();
                        var _ = document.getElementById("cvs"),
                            S = window.devicePixelRatio > 1 ? 2 : 1;
                        "ios" == g.os && (o.settings.PRECISION_FRAGMENT = "highp");
                        var v = function(e) {
                                return new o.Application({
                                    width: window.innerWidth,
                                    height: window.innerHeight,
                                    view: _,
                                    antialias: !1,
                                    resolution: S,
                                    forceCanvas: e
                                })
                            },
                            z = null;
                        try {
                            z = v(!1)
                        } catch (e) {
                            z = v(!0), y.storeGeneric("render", "forceCanvas")
                        }
                        this.pixi = z, this.pixi.renderer.plugins.interaction.destroy(), this.pixi.ticker.add(this.update, this);
                        var T = Math.min(window.screen.width, window.screen.height),
                            I = Math.max(window.screen.width, window.screen.height);
                        T *= window.devicePixelRatio, I *= window.devicePixelRatio;
                        var C = I < 1366 && T < 768,
                            A = C || !this.config.get("highResTex") ? "low" : "high";
                        (g.mobile && !g.tablet || g.webview && this.systemMemory <= 2147483648 || this.pixi.renderer.type == o.RENDERER_TYPE.CANVAS) && (A = "low");
                        var E = x.getParameterByName("textureRes");
                        E && (A = E), P.loadStaticDomImages(), this.textureManager = new M.TextureManager(this.pixi.renderer, A), this.textureManager.loadAtlasList(["gradient", "shared", "main"]), this.input = new f._e(this.pixi.view), this.inputBinds = new b.InputBinds(this.input, this.config), this.inputBindUi = new b.InputBindUi(this.input, this.inputBinds);
                        var D = function() {
                                e.setAppActive(!1), e.ambience.onGameStart(), e.adManager.onGameStart();
                                var t = void 0 != window.menu;
                                y.storeGeneric("socketOn", t)
                            },
                            O = function(t) {
                                e.game.n(), e.errorMessage = e.localization.translate(t || ""), e.teamMenu.onGameComplete(), e.ambience.onGameStop(e.audioManager), e.setAppActive(!0), "index-invalid-protocol" == t && e.showInvalidProtocolModal()
                            };
                        if (this.game = new w.Qt(this.pixi, this.audioManager, this.localization, this.config, this.input, this.inputBinds, this.inputBindUi, this.adManager, this.ambience, this.textureManager, this.loadoutMenu, D, O), this.onResize(), this.tryJoinTeam(!1), k.init(this.inputBinds, this.inputBindUi), window.adsBlocked) {
                            var B = document.getElementById("main-med-rect-blocked");
                            B && (B.style.display = "block");
                            var L = document.getElementById("survivio_300x250_main");
                            L && (L.style.display = "none");
                            var R = document.getElementById("surviv-io_300x250");
                            R && (R.style.display = "none")
                        }
                        this.tryApplySiteInfo(), window.aiptag && (window.aiptag.gdprConsent = window.cookiesConsented, window.aiptag.consented = window.cookiesConsented)
                    }
                },
                onResize: function() {
                    g.onResize(), "ios" == g.os && ("iphonex" == g.model ? g.isLandscape ? r(".main-volume-slider").css("width", "90%") : r(".main-volume-slider").css("width", "") : window.navigator.standalone || (g.isLandscape ? (r("#start-main-center").attr("style", ""), r("#modal-customize .modal-content").attr("style", "")) : r("#modal-customize .modal-content").css({
                        transform: "translate(-50%, -50%) scale(0.45)",
                        top: "38%"
                    }))), g.tablet && (r("#featured-youtuber").remove(), r(".btn-youtube").remove()), g.touch ? r(".btn-start-fullscreen").css("display", "none") : r(".btn-start-fullscreen").css("display", "block"), r(".btn-keybind").css("display", g.mobile ? "none" : "inline-block"), this.pixi && this.pixi.renderer.resize(g.screenWidth, g.screenHeight), this.game && this.game.initialized && this.game.Dt(), this.refreshUi()
                },
                onPause: function() {
                    g.webview && (this.pauseTime = Date.now(), this.audioManager.setMute(!0), "ios" == g.os && this.pixi && this.pixi.ticker.remove(this.pixi.render, this.pixi))
                },
                onResume: function() {
                    g.webview && (this.game && this.game.playing && Date.now() - this.pauseTime > 3e4 ? window.location.reload(!0) : this.audioManager.setMute(this.config.get("muteAudio")), "ios" == g.os && this.pixi && this.pixi.ticker.add(this.pixi.render, this.pixi, o.UPDATE_PRIORITY.LOW))
                },
                onUnload: function() {
                    this.teamMenu.leave()
                },
                startPingTest: function() {
                    var e = this.config.get("regionSelected") ? [this.config.get("region")] : this.pingTest.getRegionList();
                    this.pingTest.start(e)
                },
                requestSiteInfo: function() {
                    var e = this,
                        t = p.resolveUrl("/api/site_info?language=" + this.localization.getLocale());
                    r.ajax(t).done(function(t, a) {
                        e.siteInfo = t || {}, e.teamMenu.siteInfo = e.siteInfo, e.siteInfoLoaded = !0, e.tryApplySiteInfo()
                    })
                },
                tryApplySiteInfo: function() {
                    if (!this.siteInfoApplied && this.siteInfoLoaded && this.initialized) {
                        var e = this.siteInfo.pops;
                        if (e)
                            for (var t = Object.keys(e), a = 0; a < t.length; a++) {
                                var i = t[a],
                                    o = e[i],
                                    n = r("#server-opts").children('option[value="' + i + '"]');
                                n.text(n.data("label") + " [" + o + "]")
                            }
                        var s = !1,
                            l = r("#featured-streamers"),
                            c = r(".streamer-list");
                        if (!g.mobile && this.siteInfo.twitch)
                            for (var m = 0; m < this.siteInfo.twitch.length; m++) {
                                var p = this.siteInfo.twitch[m],
                                    d = r("#featured-streamer-template").clone();
                                d.attr("class", "featured-streamer streamer-tooltip").attr("id", "");
                                var h = d.find("a"),
                                    u = this.localization.translate(1 == p.viewers ? "index-viewer" : "index-viewers");
                                h.html(p.name + " <span>" + p.viewers + " " + u + "</span>"), h.css("background-image", "url(" + p.img + ")"), h.attr("href", p.url), c.append(d), s = !0
                            }
                        l.css("display", s ? "block" : "none");
                        var y = r("#featured-youtuber"),
                            w = this.siteInfo.youtube;
                        w && r(".btn-youtuber").attr("href", this.siteInfo.youtube.link).html(this.siteInfo.youtube.name), y.css("display", w ? "block" : "none"), this.siteInfo.promptConsent && z.showCookieConsent(this.config), this.siteInfoApplied = !0
                    }
                },
                setAppActive: function(e) {
                    this.active = e, this.quickPlayPendingModeIdx = -1, this.sessionGames++, this.refreshUi()
                },
                onTeamMenuLeave: function(e) {
                    e && "" != e && window.history && window.history.replaceState("", "", "/"), this.errorMessage = e, this.setDOMFromConfig(), this.refreshUi()
                },
                setConfigFromDOM: function() {
                    var e = x.sanitizeNameInput(this.nameInput.val());
                    this.config.set("playerName", e);
                    var t = this.serverSelect.find(":selected").val();
                    this.config.set("region", t)
                },
                setDOMFromConfig: function() {
                    var e = this;
                    this.nameInput.val(this.config.get("playerName")), this.serverSelect.find("option").each(function(t, a) {
                        a.selected = a.value == e.config.get("region")
                    }), this.languageSelect.val(this.config.get("language"))
                },
                onConfigModified: function(e) {
                    var t = this.config.get("muteAudio");
                    t != this.audioManager.mute && (this.muteBtns.removeClass(t ? "audio-on-icon" : "audio-off-icon"), this.muteBtns.addClass(t ? "audio-off-icon" : "audio-on-icon"), this.audioManager.setMute(t));
                    var a = this.config.get("masterVolume");
                    this.masterSliders.val(100 * a), this.audioManager.setMasterVolume(a);
                    var i = this.config.get("soundVolume");
                    this.soundSliders.val(100 * i), this.audioManager.setSoundVolume(i);
                    var r = this.config.get("musicVolume");
                    this.musicSliders.val(100 * r), this.audioManager.setMusicVolume(r);
                    var o = this.config.get("language");
                    o != this.localization.getLocale() && (this.localization.setLocale(o), this.localization.localizeIndex()), "region" == e && (this.config.set("regionSelected", !0), this.startPingTest()), "highResTex" == e && location.reload()
                },
                refreshUi: function() {
                    var e = this;
                    this.startMenuWrapper.css("display", this.active ? "flex" : "none"), this.gameAreaWrapper.css({
                        display: this.active ? "none" : "block",
                        opacity: this.active ? 0 : 1
                    }), this.active ? (r("body").removeClass("user-select-none"), document.removeEventListener("contextmenu", this.contextListener)) : (r("body").addClass("user-select-none"), r("#start-main").stop(!0), document.addEventListener("contextmenu", this.contextListener)), r("#ad-block-left").css("display", !g.isLandscape && this.teamMenu.active ? "none" : "block");
                    var t = this.active && "" != this.errorMessage;
                    this.serverWarning.css({
                        display: "block",
                        opacity: t ? 1 : 0
                    }), this.serverWarning.html(this.errorMessage);
                    var a = function(t, a) {
                        t.html(e.quickPlayPendingModeIdx === a ? '<div class="ui-spinner"></div>' : t.attr("data-label"))
                    };
                    a(this.playMode0Btn, 0), a(this.playMode1Btn, 1), a(this.playMode2Btn, 2), this.active ? (this.playMode2Btn.addClass("btn-woods-spring-mode"), r("#btn-start-team").addClass("btn-woods-spring-mode")) : (this.playMode2Btn.removeClass("btn-woods-spring-mode"), r("#btn-start-team").removeClass("btn-woods-spring-mode"))
                },
                tryJoinTeam: function(e, t) {
                    if (this.active && -1 === this.quickPlayPendingModeIdx) {
                        var a = t || window.location.hash.slice(1);
                        (e || "" != a) && (this.setConfigFromDOM(), this.teamMenu.connect(e, a), this.refreshUi())
                    }
                },
                tryQuickStartGame: function(e) {
                    var t = (new Date).getTime();
                    if (this.playEnabled && -1 === this.quickPlayPendingModeIdx && !(t < this.playTimeout)) {
                        this.playTimeout = t + 1e3, this.errorMessage = "", this.quickPlayPendingModeIdx = e, this.setConfigFromDOM(), this.refreshUi();
                        var a = n.protocolVersion,
                            i = this.config.get("region"),
                            r = x.getParameterByName("region");
                        void 0 !== r && r.length > 0 && (i = r);
                        var o = this.pingTest.getZones(i),
                            s = x.getParameterByName("zone");
                        void 0 !== s && s.length > 0 && (o = [s]);
                        var l = {
                            version: a,
                            region: i,
                            zones: o,
                            playerCount: 1,
                            autoFill: !0,
                            gameModeIdx: e
                        };
                        this.findGame(l)
                    }
                },
                findGame: function(e) {
                    var t = this;
                    x.findGame(e, function(e, a) {
                        if (e) {
                            var i = {
                                full: t.localization.translate("index-failed-finding-game"),
                                invalid_protocol: t.localization.translate("index-invalid-protocol")
                            };
                            "invalid_protocol" == e && t.showInvalidProtocolModal(), t.errorMessage = i[e] || i.full, t.quickPlayPendingModeIdx = -1, t.refreshUi()
                        } else t.joinGame(a, function() {
                            t.errorMessage = t.localization.translate("index-failed-joining-game"), t.quickPlayPendingModeIdx = -1, t.refreshUi()
                        })
                    })
                },
                joinGame: function(e, t) {
                    var a = this;
                    if (!this.game) return void setTimeout(function() {
                        a.joinGame(e, t)
                    }, 250);
                    x.joinGame(this.game, e, t)
                },
                showInvalidProtocolModal: function() {
                    r("#modal-refresh").fadeIn(200)
                },
                update: function() {
                    var e = s.clamp(this.pixi.ticker.elapsedMS / 1e3, .001, 1 / 8);
                    if (this.pingTest.update(e), !this.checkedPingTest && this.pingTest.isComplete()) {
                        if (!this.config.get("regionSelected")) {
                            var t = this.pingTest.getRegion();
                            t && (this.config.set("region", t), this.setDOMFromConfig())
                        }
                        this.checkedPingTest = !0
                    }
                    if (this.audioManager.c(e), this.ambience.update(e, this.audioManager, !this.active), this.teamMenu.update(e), this.wasPlayingVideo != this.adManager.isPlayingVideo) {
                        var a = this.adManager.isPlayingVideo ? 0 : this.config.get("masterVolume");
                        this.audioManager.setMasterVolume(a)
                    }
                    this.wasPlayingVideo = this.adManager.isPlayingVideo, this.game && this.game.initialized && this.game.playing ? this.game.c(e) : this.pixi.renderer.backgroundColor = 7378501, this.input.flush()
                }
            }, a("927ff3fc"),
            function() {
                var e = a("b4f03d8a");
                ! function(e) {
                    var t = document.createElement("style");
                    t.innerHTML = e.toString(), document.body.appendChild(t)
                }(e)
            }();
        var C = new i;
        document.addEventListener("DOMContentLoaded", function(e) {
            setTimeout(function() {
                C.o()
            }, 0)
        }), window.addEventListener("load", function() {
            setTimeout(function() {
                C.o()
            }, 0)
        }), window.addEventListener("unload", function(e) {
            C.onUnload()
        }), "#_=_" == window.location.hash && (window.location.hash = "", history.pushState("", document.title, window.location.pathname)), window.addEventListener("resize", function() {
            C.onResize()
        }), window.addEventListener("hashchange", function() {
            C.tryJoinTeam(!1)
        }), window.addEventListener("beforeunload", function(e) {
            if (C.game && C.game.Ot() && !g.webview) {
                var t = "Do you want to reload the game?";
                return e.returnValue = t, t
            }
        });
        var A = [];
        window.onerror = function(e, t, a, i, r) {
            if (e = e || "undefined_error_msg", -1 != e.indexOf("').innerText") || -1 != r.stack.indexOf("cdn.rawgit.com") || -1 != r.stack.indexOf("chrome-extension://")) return void x.H();
            var o = {
                    msg: e,
                    id: y.instanceId,
                    url: t,
                    line: a,
                    column: i,
                    stacktrace: r.stack,
                    browser: navigator.userAgent
                },
                n = JSON.stringify(o); - 1 === A.indexOf(n) && (A.push(n), /tpc.googlesyndication.com/.test(n) || (/surviv\.io\/js\/.*\.js/.test(n) && -1 == o.stacktrace.indexOf("chrome-extension://") && -1 == o.stacktrace.indexOf("cdn.rawgit.com") ? -1 !== o.msg.indexOf("TypeError: null is not an object (evaluating 't.transform._parentID=-1')") ? y.logError(n) : y.logWindowOnAppError(n) : y.logWindowOnError(n)))
        }
    },
    ce089fd5: function(e, t, a) {
        "use strict";

        function i() {}
        var r = a("34e32c48"),
            o = a("6b42806d"),
            n = (a("10899aea"), a("ceee80d9")),
            s = a("c2a798c8");
        a("c347b8dd"), a("af8ba00f"), i.prototype = {
            o: function() {},
            n: function() {},
            l: function(e, t, a, i) {
                if (t) {
                    this.type = e.type, this.layer = 0, this.pos = s.copy(e.pos), this.rot = n.oriToRad(e.ori), this.scale = 1, this.aabb = o.transform(n.getBoundingCollider(this.type), this.pos, this.rot, this.scale);
                    var l = n.Defs[this.type];
                    this.layers = [];
                    for (var c = 0; c < l.layers.length; c++) {
                        var m = l.layers[c],
                            p = void 0 === m.inheritOri || m.inheritOri,
                            d = void 0 !== m.underground ? m.underground : 1 == c,
                            h = s.add(this.pos, m.pos),
                            u = n.oriToRad(p ? e.ori + m.ori : m.ori),
                            g = o.transform(n.getBoundingCollider(m.type), h, u, 1);
                        this.layers.push({
                            collision: g,
                            underground: d
                        })
                    }
                    this.stairs = [];
                    for (var y = 0; y < l.stairs.length; y++) {
                        var w = l.stairs[y],
                            x = o.transform(w.collision, this.pos, this.rot, this.scale),
                            f = s.rotate(w.downDir, this.rot),
                            b = r.splitAabb(x, f);
                        this.stairs.push({
                            collision: x,
                            center: s.add(x.min, s.mul(s.sub(x.max, x.min), .5)),
                            downDir: f,
                            downAabb: o.createAabb(b[0].min, b[0].max),
                            upAabb: o.createAabb(b[1].min, b[1].max),
                            noCeilingReveal: !!w.noCeilingReveal,
                            lootOnly: !!w.lootOnly
                        })
                    }
                    this.mask = [];
                    for (var _ = 0; _ < l.mask.length; _++) this.mask.push(o.transform(l.mask[_], this.pos, this.rot, this.scale));
                    i.renderer.layerMaskDirty = !0
                }
            },
            c: function(e, t) {},
            insideStairs: function(e) {
                for (var t = 0; t < this.stairs.length; t++)
                    if (o.intersect(this.stairs[t].collision, e)) return !0;
                return !1
            },
            insideMask: function(e) {
                for (var t = 0; t < this.mask.length; t++)
                    if (o.intersect(this.mask[t], e)) return !0;
                return !1
            }
        }, e.exports = i
    },
    ce29f17f: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r(e, t) {
            t || (t = window.location.href), e = e.replace(/[\[\]]/g, "\\$&");
            var a = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)"),
                i = a.exec(t);
            if (i) return i[2] ? decodeURIComponent(i[2].replace(/\+/g, " ")) : ""
        }

        function o() {
            var e = !1;
            return function(t) {
                (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4))) && (e = !0)
            }(navigator.userAgent || navigator.vendor || window.opera), e
        }

        function n() {
            var e = !1,
                t = navigator.userAgent.toLowerCase();
            return function(a) {
                /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(t) && (e = !0)
            }(navigator.userAgent || navigator.vendor || window.opera), e || /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream && window.innerWidth >= 1023 && window.innerHeight >= 747 && (e = !0), e
        }

        function s() {
            return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream
        }

        function l() {
            return /Android/.test(navigator.userAgent) && !window.MSStream
        }

        function c() {/* update888 */
            var e = window.navigator.userAgent,
                t = e.indexOf("MSIE "),
                a = e.indexOf("Trident/");
            return t > 0 || a > 0
        }

        function m() {
            return window.navigator.userAgent.indexOf("Edge/") > 0
        }

        function p() {
            return s() && (375 == screen.width && 812 == screen.height || 375 == screen.height && 812 == screen.width || 414 == screen.width && 896 == screen.height || 414 == screen.height && 896 == screen.width)
        }

        function d(e, t) {
            try {
                localStorage.setItem(e, t)
            } catch (e) {}
        }

        function h(e) {
            var t = null;
            try {
                t = localStorage.getItem(e)
            } catch (e) {}
            return t
        }
        var u = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            g = function() {
                function e() {
                    i(this, e), this.os = "pc", s() ? this.os = "ios" : l() && (this.os = "android"), this.browser = "unknown", c() ? this.browser = "ie" : m() && (this.browser = "edge");
                    var t = "true" == r("webview");
                    t && d("surviv_webview", "true"), this.webview = t || h("surviv_webview"), this.model = "unknown", p() && (this.model = "iphonex");
                    var a = r("version");
                    a && d("surviv_version", a), this.version = h("surviv_version") || "1.0.0", this.mobile = o(), this.tablet = n(), this.touch = this.mobile || this.tablet, this.pixelRatio = window.devicePixelRatio, this.prod = !0, this.debug = !1, this.UiLayout = {
                        Lg: 0,
                        Sm: 1
                    }, this.uiLayout = this.mobile ? this.UiLayout.Sm : this.UiLayout.Lg, this.screenWidth = 0, this.screenHeight = 0, this.isLandscape = !0, this.onResize()
                }
                return u(e, [{
                    key: "onResize",
                    value: function() {
                        this.isLandscape = window.innerWidth > window.innerHeight || 90 == window.orientation || -90 == window.orientation, this.screenWidth = window.innerWidth, this.screenHeight = window.innerHeight;
                        var e = this.isLandscape ? this.screenWidth : this.screenHeight;
                        this.uiLayout = e <= 850 || this.mobile ? this.UiLayout.Sm : this.UiLayout.Lg
                    }
                }]), e
            }(),
            y = new g;
        e.exports = y
    },
    ceee80d9: function(e, t, a) {
        "use strict";

        function i(e) {
            return e % 4 * .5 * Math.PI
        }

        function r(e) {
            return Math.floor(Se.fmod(e + .25 * Math.PI, 2 * Math.PI) / (.5 * Math.PI))
        }

        function o(e) {
            if (ze[e]) return ze[e];
            var t = n(e);
            return ze[e] = t, t
        }

        function n(e) {
            var t = Pe[e];
            if ("structure" == t.type) {
                for (var a = [], r = 0; r < t.layers.length; r++) {
                    var n = t.layers[r],
                        s = i(n.ori),
                        l = _e.transform(o(n.type), n.pos, s, 1);
                    a.push(_e.toAabb(l))
                }
                for (var c = 0; c < t.stairs.length; c++) a.push(t.stairs[c].collision);
                var m = be.boundingAabb(a),
                    p = ve.create(1, 1);
                return m.min = ve.sub(m.min, p), m.max = ve.add(m.max, p), _e.createAabb(m.min, m.max)
            }
            if ("building" == t.type) {
                for (var d = [], h = 0; h < t.floor.surfaces.length; h++) d = d.concat(t.floor.surfaces[h].collision);
                d = d.concat(t.ceiling.scopeIn), d = d.concat(t.ceiling.scopeOut);
                for (var u = 0; u < t.mapObjects.length; u++) {
                    var g = t.mapObjects[u],
                        y = g.type;
                    if ("function" == typeof y && (y = y()), "" != y) {
                        var w = i(g.ori),
                            x = _e.transform(o(y), g.pos, w, g.scale);
                        d.push(_e.toAabb(x))
                    }
                }
                var f = be.boundingAabb(d);
                return _e.createAabb(f.min, f.max)
            }
            return "decal" == t.type ? _e.toAabb(t.collision) : (fe(t.collision), t.collision)
        }

        function s(e, t, a) {
            return {
                tier: e,
                min: t,
                max: a
            }
        }

        function l(e, t) {
            return {
                name: e,
                count: t
            }
        }

        function c(e) {
            var t = [];
            for (var a in e) e.hasOwnProperty(a) && t.push({
                type: a,
                weight: e[a]
            });
            fe(t.length > 0);
            for (var i = 0, r = 0; r < t.length; r++) i += t[r].weight;
            return function() {
                for (var e = ke.random(0, i), a = 0; e > t[a].weight;) e -= t[a].weight, a++;
                return t[a].type
            }
        }

        function m(e, t, a) {
            return {
                sprite: e,
                scale: .5,
                alpha: a || 1,
                tint: t || 16777215,
                zIdx: 10
            }
        }

        function p(e) {
            var t = {
                type: "obstacle",
                name: "a barrel",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .6
                },
                collision: _e.createCircle(ve.create(0, 0), 1.75),
                height: .5,
                collidable: !0,
                destructible: !0,
                explosion: "explosion_barrel",
                health: 150,
                hitParticle: "barrelChip",
                explodeParticle: "barrelBreak",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !0,
                    color: 6447714,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-barrel-01.img",
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "barrel_bullet",
                    punch: "barrel_bullet",
                    explode: "barrel_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function d(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createCircle(ve.create(0, 0), 1.75),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 20,
                hitParticle: "outhouseChip",
                explodeParticle: "barrelPlank",
                reflectBullets: !1,
                loot: [s("tier_world", 1, 1)],
                map: {
                    display: !0,
                    color: 11235106,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-barrel-02.img",
                    residue: "map-barrel-res-02.img",
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_crate_bullet",
                    punch: "wood_crate_bullet",
                    explode: "barrel_break_02",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function h(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .9
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.8, 3.4)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 100,
                hitParticle: "clothHit",
                explodeParticle: ["woodPlank", "clothBreak"],
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !0,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-bed-02.img",
                    residue: "map-bed-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "cloth_bullet",
                    punch: "cloth_punch",
                    explode: "cloth_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function u(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3.5, 1)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 75,
                hitParticle: "woodChip",
                explodeParticle: ["woodPlank", "book"],
                reflectBullets: !1,
                loot: [s("tier_world", 1, 1)],
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-bookshelf-01.img",
                    residue: "map-drawers-res.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_prop_bullet",
                    punch: "wood_prop_bullet",
                    explode: "drawers_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function g(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(0, 1), ve.create(2, 3.25)),
                        color: 3815994
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "container",
                        collision: [_e.createAabbExtents(ve.create(0, 1), ve.create(2, 3.25))]
                    }],
                    imgs: [{
                        sprite: "map-bunker-generic-floor-02.img",
                        pos: ve.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, .75), ve.create(2, 3.25))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, .75), ve.create(2, 3.25))],
                    imgs: [{
                        sprite: "map-bunker-generic-ceiling-01.img",
                        pos: ve.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }]
                },
                mapObjects: [{
                    type: "metal_wall_ext_6",
                    pos: ve.create(0, -2.2),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_7",
                    pos: ve.create(-2.5, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_7",
                    pos: ve.create(2.5, 1),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function y(e) {
            var t = {
                type: "building",
                ori: 0,
                terrain: {},
                zIdx: 2,
                floor: {
                    surfaces: [{
                        type: "container",
                        collision: [_e.createAabbExtents(ve.create(-.5, 0), ve.create(3.25, 2))]
                    }],
                    imgs: [{
                        sprite: "map-bunker-generic-floor-01.img",
                        pos: ve.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 3
                    }]
                },
                ceiling: {
                    scopeIn: [],
                    scopeOut: [],
                    imgs: []
                },
                mapObjects: [{
                    type: "metal_wall_ext_short_6",
                    pos: ve.create(2.2, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_short_7",
                    pos: ve.create(-1, 2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_short_7",
                    pos: ve.create(-1, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.statue,
                    pos: ve.create(-1, 0),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function w(e) {
            var t = {
                type: "building",
                map: {
                    display: !1,
                    color: 6707790,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 0,
                floor: {
                    surfaces: [{
                        type: "bunker",
                        collision: [_e.createAabbExtents(ve.create(6.5, 0), ve.create(4, 3))]
                    }],
                    imgs: [{
                        sprite: "map-bunker-statue-chamber-floor-01.img",
                        pos: ve.create(3.5, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 3
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(6.5, 0), ve.create(4, 3))],
                    scopeOut: [_e.createAabbExtents(ve.create(6.5, 0), ve.create(4, 3))],
                    imgs: [{
                        sprite: "",
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }],
                    vision: {
                        dist: 5,
                        width: 3
                    }
                },
                mapObjects: [{
                    type: "concrete_wall_ext_6",
                    pos: ve.create(-4, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_thicker_15",
                    pos: ve.create(3, 3.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_thicker_15",
                    pos: ve.create(3, -3.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_thicker_10",
                    pos: ve.create(12, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.crate,
                    pos: ve.create(8.5, 0),
                    scale: .75,
                    ori: 0,
                    inheritOri: !1
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function x(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1.05,
                    createMax: 1.2,
                    destroy: 1
                },
                collision: _e.createCircle(ve.create(0, 0), 1.4),
                height: 10,
                collidable: !1,
                destructible: !0,
                health: 100,
                hitParticle: "leaf",
                explodeParticle: "leaf",
                reflectBullets: !1,
                isBush: !0,
                loot: [],
                map: {
                    display: !0,
                    color: 24320,
                    scale: 1.5
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                img: {
                    sprite: "map-bush-01.img",
                    residue: "map-bush-res-01.img",
                    scale: .5,
                    alpha: .97,
                    tint: 16777215,
                    zIdx: 60
                },
                sound: {
                    bullet: "bush_bullet",
                    punch: "bush_bullet",
                    explode: "bush_break_01",
                    enter: "bush_enter_01"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function f(e) {
            var t = {
                type: "building",
                map: {
                    display: !1,
                    color: 6707790,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                ori: 0,
                floor: {
                    surfaces: [],
                    imgs: [{
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [],
                    scopeOut: [],
                    imgs: []
                },
                mapObjects: [{
                    type: "stone_02",
                    pos: ve.create(0, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "decal_initiative_01",
                    pos: ve.create(0, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function b(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.6)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 75,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-case-deagle-01.img",
                    residue: "map-crate-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_crate_bullet",
                    punch: "wood_crate_bullet",
                    explode: "crate_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function _(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.6)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 140,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [s("tier_chest", 3, 4)],
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-chest-01.img",
                    residue: "map-crate-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_crate_bullet",
                    punch: "wood_crate_bullet",
                    explode: "crate_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function S(e) {
            var t = _({
                collision: _e.createAabbExtents(ve.create(0, .8), ve.create(2.25, .8)),
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, .8), ve.create(2.25, 1.6))],
                terrain: {
                    river: {
                        centerWeight: 1
                    }
                }
            });
            return ke.mergeDeep(t, e || {})
        }

        function k(e) {
            var t = [{
                    type: "container_wall_top",
                    pos: ve.create(0, 7.95),
                    scale: 1,
                    ori: 0
                }, {
                    type: "container_wall_side",
                    pos: ve.create(2.35, 2.1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "container_wall_side",
                    pos: ve.create(-2.35, 2.1),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.loot_spawner_01 || "loot_tier_2",
                    pos: ve.create(0, 3.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.loot_spawner_02 || c({
                        loot_tier_1: 2,
                        "": 1
                    }),
                    pos: ve.create(0, .05),
                    scale: 1,
                    ori: 0
                }],
                a = [{
                    type: "container_wall_side_open",
                    pos: ve.create(2.35, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "container_wall_side_open",
                    pos: ve.create(-2.35, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "loot_tier_2",
                    pos: ve.create(0, -.05),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(0, .05),
                    scale: 1,
                    ori: 0
                }];
            return {
                type: "building",
                map: {
                    display: !0,
                    color: e.mapTint || 2703694,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0,
                    riverShore: !0
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "container",
                        collision: [e.open ? _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 11)) : _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 8))]
                    }],
                    imgs: [{
                        sprite: e.open ? "map-building-container-open-floor.img" : "map-building-container-floor-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: e.tint
                    }]
                },
                ceiling: {
                    scopeIn: [e.open ? _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 5.75)) : _e.createAabbExtents(ve.create(0, 2.25), ve.create(2.5, 5.5))],
                    scopeOut: [e.open ? _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 11)) : _e.createAabbExtents(ve.create(0, -.5), ve.create(2.5, 8.75))],
                    imgs: e.ceilingImgs || [{
                        sprite: e.ceilingSprite,
                        scale: .5,
                        alpha: 1,
                        tint: e.tint
                    }]
                },
                mapObjects: e.open ? a : t
            }
        }

        function v(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .5
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 2.25)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 75,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [s("tier_world", 1, 1)],
                map: {
                    display: !0,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0,
                    riverShore: !0
                },
                img: {
                    sprite: "map-crate-01.img",
                    residue: "map-crate-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_crate_bullet",
                    punch: "wood_crate_bullet",
                    explode: "crate_break_02",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function z(e) {
            var t = {
                airdropCrate: !0,
                scale: {
                    destroy: 1
                },
                destructible: !1,
                health: 200,
                hitParticle: "barrelChip",
                explodeParticle: "airdropCrate02",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !1
                },
                button: {
                    interactionRad: 1,
                    interactionText: "game-unlock",
                    useOnce: !0,
                    destroyOnUse: !0,
                    useDelay: 2.5,
                    useDir: ve.create(-1, 0),
                    useImg: "map-airdrop-04.img",
                    useParticle: "airdropCrate03",
                    sound: {
                        on: "airdrop_open_01",
                        off: ""
                    }
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "airdrop_open_02"
                }
            };
            return ke.mergeDeep(v(t), e || {})
        }

        function M(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createAabbExtents(ve.create(0, .15), ve.create(2.5, 1)),
                height: 10,
                collidable: !0,
                destructible: !0,
                health: 20,
                hitParticle: "barrelChip",
                explodeParticle: "depositBoxGreyBreak",
                reflectBullets: !0,
                loot: [s("tier_world", 1, 1)],
                lootSpawn: {
                    offset: ve.create(0, -1),
                    spdMult: 0
                },
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-deposit-box-01.img",
                    residue: "none",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "deposit_box_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function T(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createAabbExtents(e.hinge, e.extents),
                height: 10,
                collidable: !0,
                destructible: !0,
                health: 150,
                hitParticle: "whiteChip",
                explodeParticle: "whitePlank",
                reflectBullets: !1,
                door: {
                    interactionRad: .75,
                    canUse: !0,
                    openSpeed: 2,
                    openOneWay: 0,
                    openDelay: 0,
                    openOnce: !1,
                    autoOpen: !1,
                    autoClose: !1,
                    autoCloseDelay: 1,
                    slideToOpen: !1,
                    slideOffset: 3.5,
                    spriteAnchor: ve.create(.5, 1),
                    sound: {
                        open: e.soundOpen || "door_open_01",
                        close: e.soundClose || "door_close_01",
                        change: "",
                        error: ""
                    }
                },
                loot: [],
                img: {
                    sprite: "map-door-01.img",
                    residue: "none",
                    scale: .5,
                    alpha: 1,
                    tint: 14671839,
                    zIdx: 15
                },
                sound: {
                    bullet: "wall_wood_bullet",
                    punch: "wall_wood_bullet",
                    explode: "wall_wood_break_01",
                    enter: "none"
                }
            };
            return fe(Te[e.material]), ke.mergeDeep(t, Te[e.material], e || {})
        }

        function P(e) {
            var t = T({
                material: "concrete",
                hinge: ve.create(0, 2),
                extents: ve.create(.3, 2),
                door: {
                    interactionRad: 2,
                    openOneWay: !1,
                    openSpeed: 7,
                    autoOpen: !0,
                    autoClose: !0,
                    autoCloseDelay: 1,
                    slideToOpen: !0,
                    slideOffset: 3.75,
                    sound: {
                        open: "door_open_03",
                        close: "door_close_03",
                        error: "door_error_01"
                    },
                    casingImg: {
                        sprite: "map-door-slot-01.img",
                        pos: ve.create(-2, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 1316379,
                        zIdx: 60
                    }
                },
                img: {
                    tint: 5373952
                }
            });
            return ke.mergeDeep(t, e || {})
        }

        function I(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, .15), ve.create(2.5, 1.25)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 75,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [s("tier_container", 1, 1)],
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-drawers-01.img",
                    residue: "map-drawers-res.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_prop_bullet",
                    punch: "wood_prop_bullet",
                    explode: "drawers_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function C(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .9
                },
                collision: _e.createAabbExtents(ve.create(0, .2), ve.create(2.25, .7)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 50,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [s("tier_world", 1, 1)],
                lootSpawn: {
                    offset: ve.create(0, -1),
                    spdMult: 0
                },
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-gun-mount-01.img",
                    residue: "map-drawers-res.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wood_prop_bullet",
                    punch: "wood_prop_bullet",
                    explode: "barrel_break_02",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function A(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createAabbExtents(ve.create(0, .15), ve.create(1.5, .6)),
                height: 10,
                collidable: !0,
                destructible: !0,
                health: 20,
                hitParticle: "barrelChip",
                explodeParticle: "lockerBreak",
                reflectBullets: !0,
                loot: [s("tier_world", 1, 1)],
                lootSpawn: {
                    offset: ve.create(0, -1),
                    spdMult: 0
                },
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-locker-01.img",
                    residue: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "deposit_box_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function E(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1, 1)),
                height: .5,
                collidable: !0,
                destructible: !0,
                explosion: "explosion_barrel",
                health: 250,
                hitParticle: "barrelChip",
                explodeParticle: "depositBoxGreyBreak",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !1
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-power-box-01.img",
                    residue: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "deposit_box_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function D(e) {
            var t = {
                type: "obstacle",
                name: "an oven",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, .15), ve.create(1.7, 1.3)),
                height: .5,
                collidable: !0,
                destructible: !0,
                explosion: "explosion_barrel",
                health: 200,
                hitParticle: "barrelChip",
                explodeParticle: "barrelBreak",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !1,
                    color: 14935011,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-oven-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "barrel_bullet",
                    punch: "barrel_bullet",
                    explode: "oven_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function O(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 4.25)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 100,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [s("tier_world", 1, 1)],
                map: {
                    display: !0,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0,
                    riverShore: !0
                },
                img: {
                    sprite: "map-planter-01.img",
                    residue: "map-planter-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "toilet_porc_bullet",
                    punch: "toilet_porc_bullet",
                    explode: "ceramic_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function B(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createCircle(ve.create(0, 0), 1.5),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 50,
                hitParticle: "potChip",
                explodeParticle: "potBreak",
                reflectBullets: !1,
                loot: [s("tier_world", 1, 1)],
                map: {
                    display: !0,
                    color: 6697728,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-pot-01.img",
                    residue: "map-pot-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "toilet_porc_bullet",
                    punch: "toilet_porc_bullet",
                    explode: "toilet_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function L(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.5, .5)),
                height: .3,
                collidable: !0,
                destructible: !1,
                health: 50,
                hitParticle: "bottleBlueChip",
                explodeParticle: "bottleBlueBreak",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !0,
                    color: 6697728,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-bottle-02.img",
                    residue: "none",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "glass_bullet",
                    punch: "glass_bullet",
                    explode: "window_break_01",
                    enter: "none"
                },
                button: {
                    interactionRad: 1.25,
                    interactionText: "game-use",
                    useOnce: !0,
                    useType: "",
                    useDelay: .25,
                    useDir: ve.create(-1, 0),
                    useImg: "map-bottle-03.img",
                    sound: {
                        on: "button_press_01",
                        off: "button_press_01"
                    }
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function R(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createCircle(ve.create(0, 0), 1.1),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 100,
                hitParticle: "potatoChip",
                explodeParticle: "potatoBreak",
                reflectBullets: !1,
                swapWeaponOnDestroy: !0,
                regrow: !0,
                regrowTimer: 60,
                loot: [],
                map: {
                    display: !1,
                    color: 9466197,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-potato-01.img",
                    residue: "map-potato-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "organic_hit",
                    punch: "organic_hit",
                    explode: "pumpkin_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function F(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createCircle(ve.create(0, 0), 1.9),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 100,
                reflectBullets: !1,
                hitParticle: "pumpkinChip",
                explodeParticle: "pumpkinBreak",
                loot: [s("tier_skins", 1, 1)],
                map: {
                    display: !0,
                    color: 15889667,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1,
                    riverShore: !0
                },
                img: {
                    sprite: "map-pumpkin-01.img",
                    residue: "map-pumpkin-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "organic_hit",
                    punch: "organic_hit",
                    explode: "pumpkin_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function j(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.9, 1.5)),
                height: .5,
                collidable: !0,
                destructible: !1,
                explosion: "explosion_barrel",
                health: 250,
                hitParticle: "barrelChip",
                explodeParticle: "depositBoxGreyBreak",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !1
                },
                terrain: {
                    grass: !1,
                    beach: !0
                },
                img: {
                    sprite: "map-recorder-01.img",
                    residue: "",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "deposit_box_break_01",
                    enter: "none"
                },
                button: {
                    interactionRad: .2,
                    interactionText: "game-use",
                    useOnce: !0,
                    useType: "",
                    useDelay: .25,
                    useDir: ve.create(-1, 0),
                    useImg: "map-recorder-02.img",
                    sound: {
                        on: "",
                        off: ""
                    }
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function N(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, .15), ve.create(1.7, 1.25)),
                height: .5,
                collidable: !0,
                destructible: !1,
                health: 100,
                hitParticle: "redChip",
                explodeParticle: "woodPlank",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !1,
                    color: 7733259,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-refrigerator-01.img",
                    residue: "map-crate-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_bullet",
                    punch: "metal_punch",
                    explode: "barrel_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function V(e) {
            var t = {
                type: "obstacle",
                map: {
                    display: !0,
                    color: 13278307,
                    scale: 1
                },
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .5
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3.1, 1.4)),
                height: .5,
                collidable: !0,
                destructible: !1,
                health: 150,
                hitParticle: "goldChip",
                explodeParticle: "barrelBreak",
                reflectBullets: !1,
                loot: [],
                img: {
                    sprite: "map-sandbags-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_brick_bullet",
                    punch: "wall_brick_bullet",
                    explode: "crate_break_02",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function q(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1.2,
                    destroy: .5
                },
                collision: _e.createCircle(ve.create(0, 0), 1.6),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 250,
                reflectBullets: !1,
                hitParticle: "rockChip",
                explodeParticle: "rockBreak",
                loot: [],
                map: {
                    display: !0,
                    color: 11776947,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1,
                    riverShore: !0
                },
                img: {
                    sprite: "map-stone-01.img",
                    residue: "map-stone-res-01.img",
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "stone_bullet",
                    punch: "stone_bullet",
                    explode: "stone_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function G(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: .8,
                    createMax: 1.2,
                    destroy: .5
                },
                collision: _e.createCircle(ve.create(0, 0), 2.9),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 500,
                reflectBullets: !1,
                hitParticle: "rockChip",
                explodeParticle: "rockBreak",
                loot: [],
                map: {
                    display: !0,
                    color: 5197647,
                    scale: 1
                },
                terrain: {
                    grass: !1,
                    beach: !1,
                    river: {
                        centerWeight: .5
                    },
                    riverShore: !1
                },
                img: {
                    sprite: "map-stone-03.img",
                    residue: "map-stone-res-02.img",
                    scale: .4,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "stone_bullet",
                    punch: "stone_bullet",
                    explode: "stone_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function U(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2)),
                height: .5,
                collidable: !1,
                destructible: !0,
                health: 100,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !1,
                    color: 6697728,
                    scale: .875
                },
                terrain: {
                    grass: !0,
                    beach: !0
                },
                img: {
                    sprite: "map-table-01.img",
                    residue: "map-table-res.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 60
                },
                sound: {
                    bullet: "wood_prop_bullet",
                    punch: "wood_prop_bullet",
                    explode: "crate_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function H(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .8
                },
                collision: _e.createCircle(ve.create(0, .25), 1.18),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 100,
                reflectBullets: !1,
                hitParticle: "whiteChip",
                explodeParticle: "toiletBreak",
                loot: [s("tier_toilet", 2, 3)],
                map: {
                    display: !1,
                    color: 11776947,
                    scale: 1
                },
                img: {
                    sprite: "map-toilet-01.img",
                    residue: "map-toilet-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "toilet_porc_bullet",
                    punch: "toilet_porc_bullet",
                    explode: "toilet_break_01",
                    enter: "none"
                },
                terrain: {
                    grass: !0,
                    beach: !1
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function W(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: .8,
                    createMax: 1,
                    destroy: .5
                },
                collision: _e.createCircle(ve.create(0, 0), 1.55),
                aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(5.75, 5.75)),
                height: 10,
                collidable: !0,
                destructible: !0,
                health: 175,
                hitParticle: "woodChip",
                explodeParticle: "woodLog",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !0,
                    color: 4083758,
                    scale: 2.5
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                img: {
                    sprite: "map-tree-03.img",
                    residue: "map-tree-res-01.img",
                    scale: .7,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 800
                },
                sound: {
                    bullet: "tree_bullet",
                    punch: "tree_bullet",
                    explode: "tree_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function K(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createCircle(ve.create(0, 0), 1.6),
                aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(5.75, 5.75)),
                button: {
                    interactionRad: .2,
                    interactionText: "game-use",
                    useOnce: !0,
                    useType: "",
                    useDelay: .25,
                    useDir: ve.create(-1, 0),
                    useImg: "map-tree-switch-04.img",
                    sound: {
                        on: "button_press_01",
                        off: "button_press_01"
                    }
                },
                height: .5,
                collidable: !0,
                destructible: !1,
                health: 175,
                hitParticle: "woodChip",
                explodeParticle: "woodLog",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !1,
                    color: 8602624,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                img: {
                    sprite: "map-tree-switch-01.img",
                    residue: "map-tree-res-01.img",
                    scale: .5,
                    alpha: 1,
                    zIdx: 10,
                    tint: 16777215
                },
                sound: {
                    bullet: "tree_bullet",
                    punch: "tree_bullet",
                    explode: "tree_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function Z(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.copy(e.extents)),
                height: 10,
                isWall: !0,
                collidable: !0,
                destructible: !0,
                health: e.health || 150,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !1
                },
                img: {},
                sound: {
                    bullet: "wall_bullet",
                    punch: "wall_bullet",
                    explode: "barrel_break_01",
                    enter: "none"
                }
            };
            return fe(Te[e.material]), ke.mergeDeep(t, Te[e.material], e || {})
        }

        function X(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createCircle(ve.create(0, 2.3), 4.6),
                height: 10,
                collidable: !0,
                destructible: !1,
                health: 300,
                hitParticle: "barrelChip",
                explodeParticle: "barrelBreak",
                reflectBullets: !0,
                loot: [],
                map: {
                    display: !1,
                    color: 6310464,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                img: {
                    sprite: "map-wheel-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "silo_bullet",
                    punch: "silo_bullet",
                    explode: "barrel_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function Y(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: .75
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                height: .5,
                collidable: !0,
                destructible: !0,
                health: 150,
                hitParticle: "woodChip",
                explodeParticle: "woodLog",
                reflectBullets: !1,
                loot: [],
                map: {
                    display: !1,
                    color: 9455616,
                    scale: .875
                },
                terrain: {},
                img: {
                    sprite: "map-woodpile-01.img",
                    residue: "map-woodpile-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "tree_bullet",
                    punch: "tree_bullet",
                    explode: "tree_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function J(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(-16, 7), ve.create(10.75, 11)),
                        color: 7820585
                    }, {
                        collider: _e.createAabbExtents(ve.create(6, 0), ve.create(11.5, 18.25)),
                        color: 9989427
                    }, {
                        collider: _e.createAabbExtents(ve.create(22, 4), ve.create(4.5, 7.5)),
                        color: 7820585
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "tile",
                        collision: [_e.createAabbExtents(ve.create(6, -1), ve.create(11.25, 18.25)), _e.createAabbExtents(ve.create(21.5, 4), ve.create(4.75, 7.25))]
                    }],
                    imgs: [{
                        sprite: "map-building-bank-floor-01.img",
                        pos: ve.create(0, 6.96),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bank-floor-02.img",
                        pos: ve.create(9.5, -12.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(6, -1), ve.create(11.25, 18.25)), _e.createAabbExtents(ve.create(21.5, 4), ve.create(4.75, 7.25)), _e.createAabbExtents(ve.create(-16, 6), ve.create(10.25, 11))],
                    scopeOut: [_e.createAabbExtents(ve.create(6, 1.25), ve.create(15.25, 20))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-bank-ceiling-01.img",
                        pos: ve.create(-16, 7),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bank-ceiling-02.img",
                        pos: ve.create(6, 0),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-bank-ceiling-03.img",
                        pos: ve.create(22, 8),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "brick_wall_ext_23",
                    pos: ve.create(-14, 17),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_23",
                    pos: ve.create(-25.9, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_20",
                    pos: ve.create(-15.5, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-5, -7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(-5, -16.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(-2.5, -19),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(6, -19),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(14.5, -19),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(17, -16.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(17, -6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(1, -19.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(11, -19.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-5.25, -13.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(17.25, -13.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_9",
                    pos: ve.create(22, -3),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_15",
                    pos: ve.create(26, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_9",
                    pos: ve.create(22, 11),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(17, 14),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(14.5, 17),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(4.5, 17),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-1, 17.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.vault || "vault_01",
                    pos: ve.create(-12, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bank_wall_int_4",
                    pos: ve.create(-2.5, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_window_01",
                    pos: ve.create(1, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_wall_int_3",
                    pos: ve.create(4, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_wall_int_4",
                    pos: ve.create(6, -3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bank_window_01",
                    pos: ve.create(6, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bank_wall_int_4",
                    pos: ve.create(6, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bank_wall_int_4",
                    pos: ve.create(8.5, 5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_window_01",
                    pos: ve.create(12, 5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_wall_int_3",
                    pos: ve.create(15, 5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_wall_int_5",
                    pos: ve.create(17, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bank_wall_int_8",
                    pos: ve.create(21.5, 4),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(17, -2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(17, 10.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "house_door_01",
                    pos: ve.create(12.5, 17.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "vending_01",
                    pos: ve.create(4.5, -16.9),
                    scale: 1,
                    ori: 2
                }, {
                    type: "stand_01",
                    pos: ve.create(7.65, -17),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(23.5, .5),
                    scale: 1,
                    ori: 3
                }, {
                    type: c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(23.5, 7.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "stand_01",
                    pos: ve.create(15, 15),
                    scale: 1,
                    ori: 3
                }, {
                    type: "fire_ext_01",
                    pos: ve.create(4.5, 16.15),
                    scale: 1,
                    ori: 3
                }, {
                    type: "bush_02",
                    pos: ve.create(-2.5, -16.25),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "bush_02",
                    pos: ve.create(14.5, -16.25),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "crate_01",
                    pos: ve.create(19.75, 13.75),
                    scale: .9,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        loot_tier_1: 1
                    }),
                    pos: ve.create(12, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(1, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: ve.create(-16.5, -12.5),
                    scale: 1.1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-7.5, -7.25),
                    scale: .85,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: ve.create(21, -7),
                    scale: .55,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: ve.create(21, -16.25),
                    scale: .55,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function Q(e) {
            var t = {
                type: "building",
                map: {
                    display: !1,
                    color: 6707790,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 2,
                floor: {
                    surfaces: [{
                        type: "container",
                        collision: [_e.createAabbExtents(ve.create(-3.5, 0), ve.create(10, 10.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-vault-floor.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(-3.5, 0), ve.create(9.25, 10.5))],
                    scopeOut: [_e.createAabbExtents(ve.create(-3.5, 0), ve.create(10, 10.5))],
                    vision: {
                        dist: 7.25,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-vault-ceiling.img",
                        scale: 1,
                        alpha: 1,
                        tint: 6250335
                    }]
                },
                mapObjects: [{
                    type: "metal_wall_ext_thick_20",
                    pos: ve.create(-12.5, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_thick_20",
                    pos: ve.create(-3.5, -9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_thick_20",
                    pos: ve.create(-3.5, 9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_thick_6",
                    pos: ve.create(5.5, -6.45),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_thick_6",
                    pos: ve.create(5.5, 6.45),
                    scale: 1,
                    ori: 0
                }, {
                    type: "vault_door_main",
                    pos: ve.create(6.5, 3.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        deposit_box_01: 3,
                        deposit_box_02: e.gold_box || 1
                    }),
                    pos: ve.create(-12.3, 5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        deposit_box_01: 3,
                        deposit_box_02: e.gold_box || 1
                    }),
                    pos: ve.create(-12.3, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        deposit_box_01: 3,
                        deposit_box_02: e.gold_box || 1
                    }),
                    pos: ve.create(-8, 9.3),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        deposit_box_01: 3,
                        deposit_box_02: e.gold_box || 1
                    }),
                    pos: ve.create(-8, -9.3),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        deposit_box_01: 3,
                        deposit_box_02: e.gold_box || 1
                    }),
                    pos: ve.create(1, 9.3),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        deposit_box_01: 3,
                        deposit_box_02: e.gold_box || 1
                    }),
                    pos: ve.create(1, -9.3),
                    scale: 1,
                    ori: 2
                }, {
                    type: "crate_05",
                    pos: ve.create(-3.5, 6.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_05",
                    pos: ve.create(-3.5, -6.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.floor_loot || c({
                        loot_tier_vault_floor: 1
                    }),
                    pos: ve.create(-3.5, 0),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function $(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(0, 12), ve.create(5, 2)),
                        color: 12300935
                    }, {
                        collider: _e.createAabbExtents(ve.create(0, -2), ve.create(24.5, 12.8)),
                        color: 3816739
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, -2), ve.create(28, 16.5)), _e.createAabbExtents(ve.create(0, 14), ve.create(7, 5))],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "house",
                        collision: [_e.createAabbExtents(ve.create(0, -2), ve.create(25, 13.2)), _e.createAabbExtents(ve.create(0, 12), ve.create(5.5, 2.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-barn-floor-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, -2), ve.create(24.5, 12.8)), _e.createAabbExtents(ve.create(0, 12), ve.create(5.5, 2.5))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, -14.5), ve.create(5.5, 4)), _e.createAabbExtents(ve.create(0, 14.5), ve.create(5.5, 4))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-barn-ceiling-01.img",
                        pos: ve.create(0, -2),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-barn-ceiling-02.img",
                        pos: ve.create(0, 13.2),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "brick_wall_ext_4",
                    pos: ve.create(-24.5, 9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_3",
                    pos: ve.create(-22.5, 10.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_12",
                    pos: ve.create(-24.5, -2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(-24.5, -13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_3",
                    pos: ve.create(-22.5, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-24.75, 5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-24.75, -9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-19.5, 10.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-19.5, -14.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_16",
                    pos: ve.create(-10, 10.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_16",
                    pos: ve.create(10, 10.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_16",
                    pos: ve.create(-10, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(5, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(-5.5, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(5.5, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_3",
                    pos: ve.create(-3.5, 14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_3",
                    pos: ve.create(3.5, 14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(9.5, -14.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(2, 14.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-2, -14.75),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(24.5, 9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_3",
                    pos: ve.create(22.5, 10.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_13",
                    pos: ve.create(17.5, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_19",
                    pos: ve.create(24.5, -5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_1",
                    pos: ve.create(23.5, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(24.75, 5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(19.5, 10.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "panicroom_01",
                    pos: ve.create(19.5, -8),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_6",
                    pos: ve.create(-21, .5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_6",
                    pos: ve.create(-21, -4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_5",
                    pos: ve.create(-11.5, .5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_2",
                    pos: ve.create(-13, -4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_7",
                    pos: ve.create(-6.5, -4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_8",
                    pos: ve.create(-11.5, -10),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_8",
                    pos: ve.create(-7.5, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_5",
                    pos: ve.create(-3.5, -11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_7",
                    pos: ve.create(10.5, .5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_5",
                    pos: ve.create(14.5, 7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_13",
                    pos: ve.create(14.5, -7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_4",
                    pos: ve.create(17, -1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-18, -4.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: ve.create(-18, .5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: ve.create(-3.5, -5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "house_door_01",
                    pos: ve.create(14.5, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_02",
                    pos: ve.create(23, -1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_column_1",
                    pos: ve.create(-8, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_column_1",
                    pos: ve.create(-11, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_column_1",
                    pos: ve.create(15, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(-7.5, -12),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(-12.5, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(-5.5, 7.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(-13.5, -9.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "stand_01",
                    pos: ve.create(16.5, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "stand_01",
                    pos: ve.create(3.5, 12.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "table_01",
                    pos: ve.create(8, -8),
                    scale: 1,
                    ori: 0
                }, {
                    type: "oven_01",
                    pos: ve.create(12.25, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "refrigerator_01",
                    pos: ve.create(8.75, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bush_02",
                    pos: ve.create(-22, -2),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "bush_02",
                    pos: ve.create(12, 8),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(-19, -9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(-19, 5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "loot_tier_1",
                    pos: ve.create(0, 5.5),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ee(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(0, 0), ve.create(31.5, 8)),
                        color: 5197647
                    }, {
                        collider: _e.createAabbExtents(ve.create(-14, -9.5), ve.create(2.5, 1.5)),
                        color: 3618615
                    }, {
                        collider: _e.createAabbExtents(ve.create(14, -9.5), ve.create(2.5, 1.5)),
                        color: 3618615
                    }, {
                        collider: _e.createAabbExtents(ve.create(-14, 9.5), ve.create(2.5, 1.5)),
                        color: 3618615
                    }, {
                        collider: _e.createAabbExtents(ve.create(14, 9.5), ve.create(2.5, 1.5)),
                        color: 3618615
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "asphalt",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(31.5, 8))]
                    }],
                    imgs: [{
                        sprite: "map-building-bridge-lg-floor.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(16.5, 7))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(16.5, 7))],
                    vision: {
                        dist: 10
                    },
                    imgs: [{
                        sprite: "map-building-bridge-lg-ceiling.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "bridge_rail_12",
                    pos: ve.create(-22.5, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_12",
                    pos: ve.create(-22.5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_12",
                    pos: ve.create(22.5, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_12",
                    pos: ve.create(22.5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_column_5x4",
                    pos: ve.create(-14, -9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_5x4",
                    pos: ve.create(-14, 9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_5x4",
                    pos: ve.create(14, -9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_column_5x4",
                    pos: ve.create(14, 9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "concrete_wall_ext_5",
                    pos: ve.create(-9, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: ve.create(-9, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: ve.create(9, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_5",
                    pos: ve.create(9, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: ve.create(-5, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: ve.create(-5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: ve.create(5, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bridge_rail_3",
                    pos: ve.create(5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: ve.create(0, 7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: ve.create(0, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        loot_tier_1: 2,
                        "": 1
                    }),
                    pos: ve.create(-22, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 2,
                        "": 1
                    }),
                    pos: ve.create(22, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "sandbags_01",
                    pos: ve.create(-14, 2.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barrel_01",
                    pos: ve.create(-10, 5),
                    scale: .9,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(0, 4.5),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "crate_01",
                    pos: ve.create(0, -4.5),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "barrel_01",
                    pos: ve.create(10, -5),
                    scale: .9,
                    ori: 0
                }, {
                    type: "sandbags_01",
                    pos: ve.create(14, -2.75),
                    scale: 1,
                    ori: 1
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function te(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(0, .5), ve.create(18, 12)),
                        color: 3823128
                    }, {
                        collider: _e.createAabbExtents(ve.create(0, -13), ve.create(17, 2)),
                        color: 6368528
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1,
                    riverShore: !0,
                    nearbyRiver: {
                        radMin: .75,
                        radMax: 1.5,
                        facingOri: 1
                    }
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "house",
                        collision: [_e.createAabbExtents(ve.create(0, -1.5), ve.create(18, 14))]
                    }, {
                        type: "asphalt",
                        collision: [_e.createAabbExtents(ve.create(4, -14), ve.create(3, 2.5)), _e.createAabbExtents(ve.create(-4, 13.5), ve.create(2, 1))]
                    }],
                    imgs: [{
                        sprite: "map-building-cabin-floor.img",
                        pos: ve.create(0, -1),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, .5), ve.create(19, 12)), _e.createAabbExtents(ve.create(4, -13), ve.create(3, 2))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, .5), ve.create(21, 14)), _e.createAabbExtents(ve.create(4, -13), ve.create(3, 2))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    damage: {
                        obstacleCount: 1
                    },
                    imgs: [{
                        sprite: "map-building-cabin-ceiling-01a.img",
                        pos: ve.create(0, .5),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-cabin-ceiling-01b.img",
                        pos: ve.create(4, -13),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-chimney-01.img",
                        pos: ve.create(13, 2),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        removeOnDamaged: !0
                    }]
                },
                occupiedEmitters: [{
                    type: "cabin_smoke_parent",
                    pos: ve.create(0, 0),
                    rot: 0,
                    scale: 1,
                    layer: 0,
                    parentToCeiling: !0
                }],
                mapObjects: [{
                    type: "brick_wall_ext_12",
                    pos: ve.create(-12, 12),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-2, 12.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_12",
                    pos: ve.create(4, 12),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(11.5, 12.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(15.5, 12),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(-18.5, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-18.75, 5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(-18.5, .5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-18.75, -4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(-18.5, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-15.5, -11),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-11.5, -11.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_12",
                    pos: ve.create(-4, -11),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(2, -11.25),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_12",
                    pos: ve.create(12, -11),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_15",
                    pos: ve.create(18.5, 5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(18.75, -4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(18.5, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.cabin_wall_int_5 || "cabin_wall_int_5",
                    pos: ve.create(-10.5, 9),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.cabin_wall_int_10 || "cabin_wall_int_10",
                    pos: ve.create(-13, 2),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.cabin_wall_int_13 || "cabin_wall_int_13",
                    pos: ve.create(-3.5, -4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(-10.5, 2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(-4, 2),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(-16, 9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "stand_01",
                    pos: ve.create(-12.5, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(-15, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_01",
                    pos: ve.create(-16, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "bed_lg_01",
                    pos: ve.create(-7, -6.75),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.cabin_mount || c({
                        gun_mount_01: 50,
                        gun_mount_05: 50,
                        gun_mount_04: 10,
                        gun_mount_02: 10,
                        gun_mount_03: 1
                    }),
                    pos: ve.create(4, 10.65),
                    scale: 1,
                    ori: 0
                }, {
                    type: "table_01",
                    pos: ve.create(4, 6.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "stove_01",
                    pos: ve.create(13, 2),
                    scale: 1,
                    ori: 3
                }, {
                    type: "woodpile_01",
                    pos: ve.create(13, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_01",
                    pos: ve.create(16, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_01",
                    pos: ve.create(16, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.porch_01 || "",
                    pos: ve.create(-1, -13.5),
                    scale: .9,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ae(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(0, 0), ve.create(7, 7)),
                        color: 15181895
                    }, {
                        collider: _e.createAabbExtents(ve.create(0, -18.9), ve.create(2, 12)),
                        color: 6171907
                    }]
                },
                terrain: {
                    waterEdge: {
                        dir: ve.create(0, 1),
                        distMin: -8.5,
                        distMax: 0
                    }
                },
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(7, 7)), _e.createAabbExtents(ve.create(0, -18.9), ve.create(2, 12))]
                    }],
                    imgs: [{
                        sprite: "map-building-hut-floor-01.img",
                        pos: ve.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-hut-floor-02.img",
                        pos: ve.create(0, -18.9),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(6, 6))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(6, 6))],
                    vision: {
                        width: 4
                    },
                    imgs: [{
                        sprite: e.ceilingImg || "map-building-hut-ceiling-01.img",
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }],
                    destroy: {
                        wallCount: 2,
                        particle: "hutBreak",
                        particleCount: 25,
                        residue: "map-hut-res-01.img"
                    }
                },
                mapObjects: [{
                    type: "hut_wall_int_4",
                    pos: ve.create(-4, -6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "hut_wall_int_4",
                    pos: ve.create(4, -6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "hut_wall_int_5",
                    pos: ve.create(-6.5, 4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "hut_window_open_01",
                    pos: ve.create(-6.75, .5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "hut_wall_int_6",
                    pos: ve.create(-6.5, -4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "hut_wall_int_12",
                    pos: ve.create(0, 6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "hut_wall_int_14",
                    pos: ve.create(6.5, 0),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        pot_01: 2,
                        "": 1
                    }),
                    pos: ve.create(4.5, 4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        pot_01: 2,
                        "": 1
                    }),
                    pos: ve.create(4.5, -4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        pot_01: 2,
                        "": 1
                    }),
                    pos: ve.create(-4.5, 4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        pot_01: 2,
                        "": 1
                    }),
                    pos: ve.create(-4.5, -4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.specialLoot || "pot_01",
                    pos: ve.create(0, 0),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ie(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(-7.75, 3), ve.create(1, 2)),
                        color: 6171907
                    }, {
                        collider: _e.createAabbExtents(ve.create(5, -4.75), ve.create(2, 1)),
                        color: 6171907
                    }, {
                        collider: _e.createAabbExtents(ve.create(1, 1.5), ve.create(8, 5.5)),
                        color: 3754050
                    }, {
                        collider: _e.createAabbExtents(ve.create(-10.65, 7), ve.create(2, 12)),
                        color: 6171907
                    }]
                },
                terrain: {},
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [_e.createAabbExtents(ve.create(1, 1.5), ve.create(8, 5.5)), _e.createAabbExtents(ve.create(-10.65, 7), ve.create(2, 12)), _e.createAabbExtents(ve.create(-7.75, 3), ve.create(1, 2)), _e.createAabbExtents(ve.create(5, -4.75), ve.create(2, 1))]
                    }],
                    imgs: [{
                        sprite: "map-building-shack-floor-03.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-hut-floor-02.img",
                        pos: ve.create(-10.65, 7),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(1, 1.5), ve.create(7.75, 5.25))],
                    scopeOut: [_e.createAabbExtents(ve.create(1, 1.5), ve.create(7.75, 5.25))],
                    vision: {
                        width: 4
                    },
                    imgs: [{
                        sprite: "map-building-shack-ceiling-03.img",
                        pos: ve.create(.5, .5),
                        scale: .667,
                        alpha: 1,
                        tint: 10461087
                    }],
                    destroy: {
                        wallCount: 3,
                        particle: "shackGreenBreak",
                        particleCount: 30,
                        residue: "map-shack-res-03.img"
                    }
                },
                bridgeLandBounds: [_e.createAabbExtents(ve.create(-1.75, -4.25), ve.create(11.25, 4.75))],
                bridgeWaterBounds: [_e.createAabbExtents(ve.create(-10.5, 15.5), ve.create(3.5, 6))],
                mapObjects: [{
                    type: "shack_wall_ext_2",
                    pos: ve.create(-6.5, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "shack_wall_ext_14",
                    pos: ve.create(1, 6.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "shack_wall_ext_10",
                    pos: ve.create(8.5, 2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "shack_wall_ext_2",
                    pos: ve.create(8, -3.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "shack_wall_ext_9",
                    pos: ve.create(-1.5, -3.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "shack_wall_ext_5",
                    pos: ve.create(-6.5, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_01",
                    pos: ve.create(-4.25, -1.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "pot_01",
                    pos: ve.create(-1.25, -1.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "table_01",
                    pos: ve.create(5.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-4.75, -5.75),
                    scale: .9,
                    ori: 0
                }, {
                    type: "crate_20",
                    pos: ve.create(-1, -5.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: "loot_tier_leaf_pile",
                    pos: ve.create(-10.65, 16),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function re(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    color: 1995644,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(15, 25)), _e.createAabbExtents(ve.create(-15, 9), ve.create(2.5, 4.5)), _e.createAabbExtents(ve.create(17.5, -7), ve.create(4.5, 2.5))],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "tile",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(13, 20))]
                    }, {
                        type: "house",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(2, 20))]
                    }],
                    imgs: e.floor_images || [{
                        sprite: "map-building-greenhouse-floor-01.img",
                        pos: ve.create(0, 10),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-greenhouse-floor-01.img",
                        pos: ve.create(0, -10),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, 21),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, -21),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(12.5, 19.5))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(14, 22))],
                    vision: {
                        dist: 7.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: e.ceiling_images || [{
                        sprite: "map-building-greenhouse-ceiling-01.img",
                        pos: ve.create(0, -9.85),
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-greenhouse-ceiling-01.img",
                        pos: ve.create(0, 9.85),
                        scale: 1,
                        alpha: 1,
                        tint: 16777215,
                        mirrorY: !0
                    }],
                    destroy: {
                        wallCount: 7,
                        particle: "greenhouseBreak",
                        particleCount: 60,
                        residue: "",
                        sound: "ceiling_break_02"
                    }
                },
                mapObjects: [{
                    type: "glass_wall_10",
                    pos: ve.create(-7, 19.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(-7, -19.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(-12.5, 15),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(-12.5, 5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(-12.5, -15),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(-12.5, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(7, 19.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(7, -19.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(12.5, 15),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(12.5, 5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(12.5, -15),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(12.5, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_05",
                    pos: ve.create(2, 19.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_05",
                    pos: ve.create(-2, -19.75),
                    scale: 1,
                    ori: 3
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(-4.5, 14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(-7, 2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(-7, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(-4.5, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(4.5, 14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(7, 2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(7, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        planter_01: 1,
                        planter_02: 1,
                        planter_03: 1
                    }),
                    pos: ve.create(4.5, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-15, 11),
                    scale: .9,
                    ori: 0
                }, {
                    type: "sandbags_02",
                    pos: ve.create(-15, 7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "sandbags_02",
                    pos: ve.create(15.5, -7),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barrel_01",
                    pos: ve.create(19.5, -7),
                    scale: .9,
                    ori: 0
                }, {
                    type: "bunker_structure_08",
                    pos: ve.create(-9.5, -15.5),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function oe(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: []
                },
                terrain: {
                    grass: !0,
                    beach: !1,
                    spawnPriority: 10
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, -4), ve.create(55, 50))],
                bridgeLandBounds: [_e.createAabbExtents(ve.create(0, -4), ve.create(55, 50))],
                mapGroundPatches: [{
                    bound: _e.createAabbExtents(ve.create(0, 0), ve.create(55, 55)),
                    color: e.groundTintLt || 5195792,
                    roughness: .05,
                    offsetDist: .5
                }, {
                    bound: _e.createAabbExtents(ve.create(-28.5, 7), ve.create(7, 5)),
                    color: e.groundTintDk || 5986827,
                    roughness: .05,
                    offsetDist: .5
                }, {
                    bound: _e.createAabbExtents(ve.create(-24.5, -35), ve.create(5.5, 4.5)),
                    color: e.groundTintDk || 5986827,
                    roughness: .05,
                    offsetDist: .5
                }, {
                    bound: _e.createAabbExtents(ve.create(20, 10), ve.create(20, 30)),
                    color: e.groundTintDk || 5986827,
                    roughness: .05,
                    offsetDist: .5
                }],
                floor: {
                    surfaces: [{
                        type: "grass",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(55, 55))]
                    }],
                    imgs: []
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                    imgs: []
                },
                mapObjects: [{
                    type: "container_04",
                    pos: ve.create(3.75, 14),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(-1.35, 10.25),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(-6, 12.25),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "barrel_01",
                    pos: ve.create(-2, 14.5),
                    scale: .9,
                    ori: 0
                }, {
                    type: "warehouse_02",
                    pos: ve.create(20, 10),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(35, 24.25),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(35, 29),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(39.75, 27),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "tree_07",
                    pos: ve.create(47, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: "tree_02",
                    pos: ve.create(50.5, 9.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "bunker_structure_06",
                    pos: ve.create(38, -12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        container_01: 1,
                        container_02: 1,
                        container_03: 1
                    }),
                    pos: ve.create(21, -32),
                    scale: 1,
                    ori: 3
                }, {
                    type: c({
                        container_01: 1,
                        container_02: 1,
                        container_03: 1
                    }),
                    pos: ve.create(21, -37.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "tree_07",
                    pos: ve.create(45.5, -31.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "tree_07",
                    pos: ve.create(40.5, -36.5),
                    scale: 1.1,
                    ori: 0
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(21.75, -50),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(26.75, -49),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "tree_02",
                    pos: ve.create(44.5, -50.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "tree_09",
                    pos: ve.create(-9, 34),
                    scale: 1,
                    ori: 0
                }, {
                    type: "tree_02",
                    pos: ve.create(-13.5, 35.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "tree_09",
                    pos: ve.create(-16.5, 32),
                    scale: 1,
                    ori: 3
                }, {
                    type: "tree_09",
                    pos: ve.create(-20, 36),
                    scale: 1,
                    ori: 2
                }, {
                    type: "tree_09",
                    pos: ve.create(-24.5, 33),
                    scale: 1,
                    ori: 3
                }, {
                    type: "tree_09",
                    pos: ve.create(-31.5, 37),
                    scale: 1,
                    ori: 2
                }, {
                    type: "tree_09",
                    pos: ve.create(-32.5, 32),
                    scale: 1,
                    ori: 1
                }, {
                    type: "tree_09",
                    pos: ve.create(-40, 35.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "tree_09",
                    pos: ve.create(-44.5, 32.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-33.5, 23.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-42.75, 21.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(-30.5, 9),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        chest_02: 1,
                        case_04: 1
                    }),
                    pos: ve.create(-30.5, 4.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(-25.75, 7),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-14.5, .5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-21, -8.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-36.5, -9),
                    scale: .9,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-34, -11.5),
                    scale: .9,
                    ori: 0
                }, {
                    type: "outhouse_01",
                    pos: ve.create(-48.5, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        outhouse_01: 5,
                        outhouse_02: 1
                    }),
                    pos: ve.create(-48.5, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "woodpile_01",
                    pos: ve.create(-51, -20.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(-26.75, -36),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(-22, -34),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "tree_09",
                    pos: ve.create(-14.5, -20),
                    scale: 1,
                    ori: 1
                }, {
                    type: "tree_09",
                    pos: ve.create(-11.5, -23),
                    scale: 1,
                    ori: 2
                }, {
                    type: "tree_09",
                    pos: ve.create(-15.5, -24),
                    scale: 1,
                    ori: 0
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-37, -34),
                    scale: 1,
                    ori: 1
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-31, -47),
                    scale: 1,
                    ori: 0
                }, {
                    type: "woodpile_02",
                    pos: ve.create(-18.75, -45.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-2.5, -35.75),
                    scale: .9,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(.75, -37.5),
                    scale: .9,
                    ori: 0
                }, {
                    type: "tree_07",
                    pos: ve.create(1, -33),
                    scale: 1.2,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ne(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: []
                },
                terrain: {
                    grass: !0,
                    beach: !1,
                    spawnPriority: 10
                },
                mapObstacleBounds: [_e.createCircle(ve.create(0, 0), 40)],
                mapGroundPatches: [{
                    bound: _e.createAabbExtents(ve.create(5, 21.5), ve.create(5.5, 6)),
                    color: e.groundTintDk || 7563810,
                    roughness: .05,
                    offsetDist: .5
                }, {
                    bound: _e.createAabbExtents(ve.create(-17.75, -14), ve.create(6, 4.5)),
                    color: e.groundTintDk || 7563810,
                    roughness: .05,
                    offsetDist: .5
                }, {
                    bound: _e.createAabbExtents(ve.create(21.5, -10), ve.create(4.75, 3.5)),
                    color: e.groundTintDk || 7563810,
                    roughness: .05,
                    offsetDist: .5
                }],
                floor: {
                    surfaces: [{
                        type: "grass",
                        collision: []
                    }],
                    imgs: []
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                    imgs: []
                },
                mapObjects: [{
                    type: e.tree_08c || "tree_08c",
                    pos: ve.create(0, 0),
                    scale: 2,
                    ori: 0
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(2.5, 19.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(7.5, 19),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: c({
                        crate_01: 4,
                        crate_19: 1
                    }),
                    pos: ve.create(3.5, 24.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "crate_04",
                    pos: ve.create(-20.5, -13.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: ve.create(-15, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(23.5, -9.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(20, -11),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function se(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(-1.5, 20.5), ve.create(12.5, 4.5)),
                        color: 8671554
                    }, {
                        collider: _e.createAabbExtents(ve.create(-2, -23), ve.create(3, 2.5)),
                        color: 8671554
                    }, {
                        collider: _e.createAabbExtents(ve.create(-20.5, -22.5), ve.create(10, 2)),
                        color: 7750457
                    }, {
                        collider: _e.createAabbExtents(ve.create(28, 1.5), ve.create(3.75, 3)),
                        color: 7237230
                    }, {
                        collider: _e.createAabbExtents(ve.create(-3.5, -2), ve.create(28, 18.5)),
                        color: 6175023
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "tile",
                        collision: [_e.createAabbExtents(ve.create(-3.5, -2), ve.create(28, 18.5)), _e.createAabbExtents(ve.create(-1.5, 20.5), ve.create(12.5, 4.5)), _e.createAabbExtents(ve.create(0, 0), ve.create(20, 20))]
                    }, {
                        type: "asphalt",
                        collision: [_e.createAabbExtents(ve.create(-21, -17), ve.create(11, 8)), _e.createAabbExtents(ve.create(-23, -6), ve.create(8, 3)), _e.createAabbExtents(ve.create(-2, -24), ve.create(2, 3)), _e.createAabbExtents(ve.create(28, 1.5), ve.create(3, 3))]
                    }, {
                        type: "grass",
                        collision: [_e.createAabbExtents(ve.create(-2, 4), ve.create(5, 5))]
                    }, {
                        type: "house",
                        collision: [_e.createAabbExtents(ve.create(1, 13), ve.create(2, 3.25))]
                    }],
                    imgs: [{
                        sprite: "map-building-mansion-floor-01a.img",
                        pos: ve.create(-1.5, 22),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-mansion-floor-01b.img",
                        pos: ve.create(-3.5, -2),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-mansion-floor-01c.img",
                        pos: ve.create(28.5, 1.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-mansion-floor-01d.img",
                        pos: ve.create(-15, -24),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(-15, -22.4), ve.create(17, 2.2)), _e.createAabbExtents(ve.create(-3.5, -2), ve.create(28, 18.5)), _e.createAabbExtents(ve.create(-1.5, 20.6), ve.create(12, 4.2))],
                    scopeOut: [_e.createAabbExtents(ve.create(-15, -24.4), ve.create(21, 4.2)), _e.createAabbExtents(ve.create(-3.5, -2), ve.create(28, 18.5)), _e.createAabbExtents(ve.create(-9, 23.1), ve.create(5, 6.7))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-mansion-ceiling.img",
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "brick_wall_ext_9",
                    pos: ve.create(-31.5, -16.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-31.75, -10.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_19",
                    pos: ve.create(-31.5, .5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-31.75, 11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(-31.5, 15),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_17",
                    pos: ve.create(-22.5, 16.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_9",
                    pos: ve.create(-13.5, 20.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(-13, 24.9),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_19",
                    pos: ve.create(.5, 24.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_9",
                    pos: ve.create(10.5, 20.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_13",
                    pos: ve.create(17.5, 16.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(24.5, 14),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(24.75, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_18",
                    pos: ve.create(24.5, -1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(24.75, -11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(24.5, -17),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(20.5, -20.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(15.5, -20.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_14",
                    pos: ve.create(7, -20.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-4, -21),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(-7, -20.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_short_7",
                    pos: ve.create(28.5, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_short_7",
                    pos: ve.create(28.5, -1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(-7, -20.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_column_1 || "mansion_column_1",
                    pos: ve.create(-5, -24),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_column_1 || "mansion_column_1",
                    pos: ve.create(1, -24),
                    scale: 1,
                    ori: 1
                }, {
                    type: "saferoom_01",
                    pos: ve.create(-25.5, 1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.mansion_wall_int_12 || "mansion_wall_int_12",
                    pos: ve.create(-25, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-19, -2.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: e.mansion_wall_int_1 || "mansion_wall_int_1",
                    pos: ve.create(-30.5, 5.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_03",
                    pos: ve.create(-30.25, 5.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: e.mansion_wall_int_13 || "mansion_wall_int_13",
                    pos: ve.create(-20.5, 5.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_wall_int_7 || "mansion_wall_int_7",
                    pos: ve.create(-19.5, 1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(-14.5, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.mansion_wall_int_6 || "mansion_wall_int_6",
                    pos: ve.create(-14.5, 13),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.mansion_wall_int_6 || "mansion_wall_int_6",
                    pos: ve.create(-14.5, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.mansion_wall_int_10 || "mansion_wall_int_10",
                    pos: ve.create(-10, -8.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_wall_int_11 || "mansion_wall_int_11",
                    pos: ve.create(-9.5, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(-7.5, 14),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(-1.5, 14),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(3.5, 14),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_12",
                    pos: ve.create(-2, 9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "stairs_01",
                    pos: ve.create(-4.5, 12),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(-7.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_10",
                    pos: ve.create(3.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "glass_wall_12",
                    pos: ve.create(-2, -1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(10.5, 16),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.mansion_wall_int_9 || "mansion_wall_int_9",
                    pos: ve.create(10.5, 7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(10.5, -1),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.mansion_wall_int_8 || "mansion_wall_int_8",
                    pos: ve.create(10.5, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.mansion_wall_int_9 || "mansion_wall_int_9",
                    pos: ve.create(15.5, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_wall_int_9 || "mansion_wall_int_9",
                    pos: ve.create(15.5, -1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_wall_int_5 || "mansion_wall_int_5",
                    pos: ve.create(19.5, 1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(24, 1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_wall_int_5 || "mansion_wall_int_5",
                    pos: ve.create(3.5, -8.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(6, -8.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: e.mansion_wall_int_11 || "mansion_wall_int_11",
                    pos: ve.create(5.5, -14.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        bookshelf_01: 6,
                        bookshelf_02: 1
                    }),
                    pos: ve.create(-27.25, 7.15),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        bookshelf_01: 6,
                        bookshelf_02: 1
                    }),
                    pos: ve.create(-27.25, 14.85),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(-11.5, -11.75),
                    scale: 1,
                    ori: 3
                }, {
                    type: "stand_01",
                    pos: ve.create(-7.5, -10.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "stand_01",
                    pos: ve.create(3.5, -10.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        bookshelf_01: 6,
                        bookshelf_02: 1
                    }),
                    pos: ve.create(7.25, -16.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "piano_01",
                    pos: ve.create(14.9, -3.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "toilet_01",
                    pos: ve.create(17, 1.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "refrigerator_01",
                    pos: ve.create(22.15, 14.4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "oven_01",
                    pos: ve.create(12.75, 6.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "oven_01",
                    pos: ve.create(12.75, 10.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "table_02",
                    pos: ve.create(15.75, -14.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.entry_loot || "",
                    pos: ve.create(-2, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_02 || "loot_tier_mansion_floor",
                    pos: ve.create(-2, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_02 || "",
                    pos: ve.create(-21, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_02 || "",
                    pos: ve.create(18, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_02 || "",
                    pos: ve.create(6, 20.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(-30.15, 15),
                    scale: .8,
                    ori: 0
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(1.5, 11.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(8.5, 22.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(22.5, 14.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(22.5, -18.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.tree || "tree_interior_01",
                    pos: ve.create(-2, 4),
                    scale: e.tree_scale || .6,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: e.tree_loot || "",
                    pos: ve.create(-2.25, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.tree_loot || "",
                    pos: ve.create(-1.75, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.tree_loot || "",
                    pos: ve.create(-2, 4.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.tree_loot || "",
                    pos: ve.create(-2, 3.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        bush_01: 25,
                        bush_03: 1,
                        "": e.bush_chance || 0
                    }),
                    pos: ve.create(-4.75, 1.25),
                    scale: .9,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: c({
                        bush_01: 25,
                        bush_03: 1,
                        "": e.bush_chance || 0
                    }),
                    pos: ve.create(.75, 1.25),
                    scale: .9,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: c({
                        bush_01: 25,
                        bush_03: 1,
                        "": e.bush_chance || 0
                    }),
                    pos: ve.create(-4.75, 6.75),
                    scale: .9,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: c({
                        bush_01: 25,
                        bush_03: 1,
                        "": e.bush_chance || 0
                    }),
                    pos: ve.create(.75, 6.75),
                    scale: .9,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: e.porch_01 || "bush_01",
                    pos: ve.create(-8, -23),
                    scale: .95,
                    ori: 0
                }, {
                    type: e.porch_01 || "bush_01",
                    pos: ve.create(4, -23),
                    scale: .95,
                    ori: 0
                }, {
                    type: "shack_01",
                    pos: ve.create(-20.75, 22.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "crate_01",
                    pos: ve.create(13.25, 19.25),
                    scale: .9,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "tree_01",
                    pos: ve.create(24, 24),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_02",
                    pos: ve.create(27, -4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: ve.create(29, -17.25),
                    scale: .7,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function le(e) {
            var t = {
                type: "building",
                map: {
                    display: !1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 0,
                floor: {
                    surfaces: [{
                        type: "brick",
                        collision: [_e.createAabbExtents(ve.create(18, 3), ve.create(7, 13)), _e.createAabbExtents(ve.create(5, 0), ve.create(6, 10))]
                    }],
                    imgs: [{
                        sprite: "map-building-mansion-cellar-02.img",
                        pos: ve.create(-3.75, .25),
                        scale: 2,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-mansion-cellar-01a.img",
                        pos: ve.create(11.5, 5.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-mansion-cellar-01b.img",
                        pos: ve.create(28.5, 1.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-mansion-cellar-01c.img",
                        pos: ve.create(11.5, -9),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(18, 3), ve.create(7, 13)), _e.createAabbExtents(ve.create(5, 1.5), ve.create(6, 12))],
                    scopeOut: [_e.createAabbExtents(ve.create(18, 3), ve.create(7, 13)), _e.createAabbExtents(ve.create(5, 1.5), ve.create(6, 12))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: []
                },
                mapObjects: [{
                    type: "brick_wall_ext_thicker_24",
                    pos: ve.create(-2.5, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_8",
                    pos: ve.create(0, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_thicker_7",
                    pos: ve.create(5.5, -9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_9",
                    pos: ve.create(11.5, -11.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_thicker_7",
                    pos: ve.create(17.5, -9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_5",
                    pos: ve.create(21.5, -7.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_thicker_8",
                    pos: ve.create(25.5, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_15",
                    pos: ve.create(25.5, 11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_16",
                    pos: ve.create(16, 17.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_thicker_7",
                    pos: ve.create(9.5, 12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_5",
                    pos: ve.create(5.5, 10.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_thicker_5",
                    pos: ve.create(29.5, 5.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_thicker_5",
                    pos: ve.create(29.5, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "concrete_wall_ext_7",
                    pos: ve.create(31.5, 1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_thicker_6",
                    pos: ve.create(4.5, 15),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(1, 17.6),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        barrel_03: 9,
                        barrel_04: 1
                    }),
                    pos: ve.create(8.5, -9.53),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        barrel_03: 9,
                        barrel_04: 1
                    }),
                    pos: ve.create(11.5, -9.53),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        barrel_03: 9,
                        barrel_04: 1
                    }),
                    pos: ve.create(14.5, -9.53),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        barrel_03: 9,
                        barrel_04: 1
                    }),
                    pos: ve.create(12.75, 15.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        barrel_03: 9,
                        barrel_04: 1
                    }),
                    pos: ve.create(15.75, 15.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        barrel_03: 9,
                        barrel_04: 1
                    }),
                    pos: ve.create(18.75, 15.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(22.25, 14.25),
                    scale: .75,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: c({
                        bookshelf_01: 7,
                        bookshelf_02: 1
                    }),
                    pos: ve.create(22.75, 8),
                    scale: 1,
                    ori: 3
                }, {
                    type: e.mansion_column_1 || "mansion_column_1",
                    pos: ve.create(5.5, 1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mansion_column_1 || "mansion_column_1",
                    pos: ve.create(17.5, 1.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.mid_obs_01 || "barrel_02",
                    pos: ve.create(8.5, 1.5),
                    scale: .8,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(11.5, 1.5),
                    scale: .8,
                    ori: 0
                }, {
                    type: e.mid_obs_01 || "barrel_02",
                    pos: ve.create(14.5, 1.5),
                    scale: .8,
                    ori: 0
                }, {
                    type: e.decoration_02 || "",
                    pos: ve.create(16.5, 7.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_02 || "",
                    pos: ve.create(11.5, -5.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(.5, -4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(22.5, 14.5),
                    scale: 1,
                    ori: 3
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ce(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    color: 8145976,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 1.4), ve.create(5.5, 6.5))],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [_e.createAabbExtents(ve.create(0, .15), ve.create(3.75, 4.75))]
                    }],
                    imgs: [{
                        sprite: "map-building-outhouse-floor.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 1.45), ve.create(3.6, 3.2))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 1.4), ve.create(3.8, 3.4))],
                    imgs: [{
                        sprite: "map-building-outhouse-ceiling.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }],
                    destroy: {
                        wallCount: 2,
                        particleCount: 15,
                        particle: "outhouseBreak",
                        residue: "map-outhouse-res.img"
                    }
                },
                mapObjects: [{
                    type: "outhouse_wall_top",
                    pos: ve.create(0, 4.46),
                    scale: 1,
                    ori: 0
                }, {
                    type: "outhouse_wall_side",
                    pos: ve.create(3.4, 1.73),
                    scale: 1,
                    ori: 0
                }, {
                    type: "outhouse_wall_side",
                    pos: ve.create(-3.4, 1.73),
                    scale: 1,
                    ori: 0
                }, {
                    type: "outhouse_wall_bot",
                    pos: ve.create(-2.65, -1.52),
                    scale: 1,
                    ori: 0
                }, {
                    type: "outhouse_wall_bot",
                    pos: ve.create(2.65, -1.52),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.obs || c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(0, 2),
                    scale: .95,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function me(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(-21, -8), ve.create(21.25, 14)),
                        color: 5855577
                    }, {
                        collider: _e.createAabbExtents(ve.create(-24.5, 8.5), ve.create(17.75, 9.75)),
                        color: 3355970
                    }, {
                        collider: _e.createAabbExtents(ve.create(-3.5, 12), ve.create(3.5, 6.25)),
                        color: 4278620
                    }, {
                        collider: _e.createAabbExtents(ve.create(10.35, 0), ve.create(10.5, 22)),
                        color: 3355970
                    }, {
                        collider: _e.createAabbExtents(ve.create(31.25, 12.5), ve.create(10.75, 9.5)),
                        color: 3355970
                    }, {
                        collider: _e.createAabbExtents(ve.create(-3.5, 2.5), ve.create(2.25, 2.25)),
                        color: 6310464
                    }, {
                        collider: _e.createCircle(ve.create(-30.5, -18), 1.5),
                        color: 8026746
                    }, {
                        collider: _e.createCircle(ve.create(-20.5, -10.5), 1.5),
                        color: 8026746
                    }, {
                        collider: _e.createAabbExtents(ve.create(-38.5, -7), ve.create(1.4, 3.1)),
                        color: 13278307
                    }, {
                        collider: _e.createAabbExtents(ve.create(-7.5, -19.5), ve.create(3.1, 1.4)),
                        color: 13278307
                    }]
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "tile",
                        collision: [_e.createAabbExtents(ve.create(-24.5, 8.5), ve.create(17.75, 9.75)), _e.createAabbExtents(ve.create(-3.5, 12), ve.create(3.5, 6.25)), _e.createAabbExtents(ve.create(10.35, 0), ve.create(10.5, 22)), _e.createAabbExtents(ve.create(31.25, 12.5), ve.create(10.75, 9.5))]
                    }, {
                        type: "asphalt",
                        collision: [_e.createAabbExtents(ve.create(-21.5, -13), ve.create(21, 11.5)), _e.createAabbExtents(ve.create(-3.5, 2), ve.create(3, 3.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-police-floor-01.img",
                        pos: ve.create(-9.5, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-police-floor-02.img",
                        pos: ve.create(33, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(-24.5, 8.5), ve.create(17.75, 9.75)), _e.createAabbExtents(ve.create(-3.5, 12), ve.create(3.5, 6.25)), _e.createAabbExtents(ve.create(10.35, 0), ve.create(10.5, 22)), _e.createAabbExtents(ve.create(31.25, 12.5), ve.create(10.75, 9.5))],
                    scopeOut: [_e.createAabbExtents(ve.create(12, 0), ve.create(12.75, 26))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-police-ceiling-01.img",
                        pos: ve.create(-21.5, 8.5),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-police-ceiling-02.img",
                        pos: ve.create(10.5, 0),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-police-ceiling-03.img",
                        pos: ve.create(31.96, 12.5),
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "brick_wall_ext_20",
                    pos: ve.create(-42, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_41",
                    pos: ve.create(-21, 18),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(-38, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_21",
                    pos: ve.create(-18, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(-7, 2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_7",
                    pos: ve.create(-4, 6),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_16",
                    pos: ve.create(0, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-.5, -11),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_10",
                    pos: ve.create(0, -17.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(3.5, -22),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(6.5, -22.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: ve.create(14.5, -22.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_6",
                    pos: ve.create(17.5, -22),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_11",
                    pos: ve.create(21, -17),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(21.5, -11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_11",
                    pos: ve.create(21, -2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_20",
                    pos: ve.create(31.5, 3),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_20",
                    pos: ve.create(42, 12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_33",
                    pos: ve.create(25, 22),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(4.5, 22.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(2.5, 22),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(0, 20),
                    scale: 1,
                    ori: 0
                }, {
                    type: "police_wall_int_2",
                    pos: ve.create(-40.5, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_3",
                    pos: ve.create(-34, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "cell_door_01",
                    pos: ve.create(-35.5, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_8",
                    pos: ve.create(-35, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "police_wall_int_3",
                    pos: ve.create(-27, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_8",
                    pos: ve.create(-28, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "cell_door_01",
                    pos: ve.create(-21.5, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_3",
                    pos: ve.create(-20, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_8",
                    pos: ve.create(-21, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "cell_door_01",
                    pos: ve.create(-14.5, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_3",
                    pos: ve.create(-13, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_8",
                    pos: ve.create(-14, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "cell_door_01",
                    pos: ve.create(-7.5, 8),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_6",
                    pos: ve.create(-7, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "police_wall_int_7",
                    pos: ve.create(-4, 13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_02",
                    pos: ve.create(-7, 17.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "police_wall_int_4",
                    pos: ve.create(2.5, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_window_01",
                    pos: ve.create(6, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_6",
                    pos: ve.create(10.5, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bank_window_01",
                    pos: ve.create(15, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "police_wall_int_4",
                    pos: ve.create(18.5, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(21, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "police_wall_int_10",
                    pos: ve.create(21, 12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(21, 21.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "metal_wall_ext_10",
                    pos: ve.create(35.5, 4),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(33, 4.15),
                    scale: 1,
                    ori: 2
                }, {
                    type: "metal_wall_ext_10",
                    pos: ve.create(35.5, 21),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(33, 20.85),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(38, 20.85),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_18",
                    pos: ve.create(41, 12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(40.85, 7.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(40.85, 17.5),
                    scale: 1,
                    ori: 3
                }, {
                    type: "metal_wall_ext_thicker_10",
                    pos: ve.create(35.5, 12.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(38, 11.35),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        locker_01: 8,
                        locker_02: 1
                    }),
                    pos: ve.create(33, 13.65),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        toilet_03: 5,
                        toilet_04: 1
                    }),
                    pos: ve.create(-37, 1),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        toilet_03: 5,
                        toilet_04: 1
                    }),
                    pos: ve.create(-23, 1),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        toilet_03: 5,
                        toilet_04: 1
                    }),
                    pos: ve.create(-16, 1),
                    scale: 1,
                    ori: 2
                }, {
                    type: c({
                        toilet_03: 5,
                        toilet_04: 1
                    }),
                    pos: ve.create(-9, 1),
                    scale: 1,
                    ori: 2
                }, {
                    type: "control_panel_01",
                    pos: ve.create(-4.5, 9.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "crate_06",
                    pos: ve.create(-24.5, 20.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_06",
                    pos: ve.create(14.5, 12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_06",
                    pos: ve.create(18.75, 12.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "fire_ext_01",
                    pos: ve.create(21.85, 12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_06",
                    pos: ve.create(10.5, 1.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "vending_01",
                    pos: ve.create(2, -6.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "stand_01",
                    pos: ve.create(2, -14.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "bush_01",
                    pos: ve.create(2.5, -19.5),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "bush_01",
                    pos: ve.create(18.5, -19.5),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: c({
                        loot_tier_police_floor: 1
                    }),
                    pos: ve.create(-38.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1
                    }),
                    pos: ve.create(-31.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1
                    }),
                    pos: ve.create(-24.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1
                    }),
                    pos: ve.create(-17.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1
                    }),
                    pos: ve.create(-10.5, 4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(-3.5, 2.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "sandbags_01",
                    pos: ve.create(-38.5, -7),
                    scale: 1,
                    ori: 3
                }, {
                    type: "sandbags_01",
                    pos: ve.create(-7.5, -19.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-30.5, -18),
                    scale: .9,
                    ori: 0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-20.5, -10.5),
                    scale: .9,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: ve.create(39, -6),
                    scale: .8,
                    ori: 0
                }, {
                    type: "tree_01",
                    pos: ve.create(28, -17.5),
                    scale: .8,
                    ori: 0
                }, {
                    type: "hedgehog_01",
                    pos: ve.create(39, -17.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(24.5, -.5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: !0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function pe(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    color: 6429724,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(19, 17.5))],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "house",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(14.5, 13))]
                    }],
                    imgs: [{
                        sprite: "map-building-house-floor-01.img",
                        pos: ve.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(-1, 14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, -14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(14.5, 13))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(16.5, 15))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-house-ceiling.img",
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "brick_wall_ext_12",
                    pos: ve.create(-9, 13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_14",
                    pos: ve.create(8, 13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(1, 13.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-14.5, 10),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_10",
                    pos: ve.create(-14.5, -.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(-14.5, -10.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-14.75, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-14.75, -7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-12.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-4.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(4.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(12.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-8.5, -13.25),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_window_01",
                    pos: ve.create(8.5, -13.25),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: ve.create(-2, -13.25),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(14.5, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_9",
                    pos: ve.create(14.5, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_2",
                    pos: ve.create(14.5, -11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(14.75, -9),
                    scale: 1,
                    ori: 2
                }, {
                    type: "house_window_01",
                    pos: ve.create(14.75, 3),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.house_wall_int_9 || "house_wall_int_9",
                    pos: ve.create(-9.5, -1),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.house_wall_int_5 || "house_wall_int_5",
                    pos: ve.create(4.5, -6),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.house_wall_int_9 || "house_wall_int_9",
                    pos: ve.create(9.5, -4),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.house_wall_int_8 || "house_wall_int_8",
                    pos: ve.create(5.5, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.house_wall_int_4 || "house_wall_int_4",
                    pos: ve.create(8, 7),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(4.5, -12.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(6, 2.5),
                    scale: 1,
                    ori: 2
                }, {
                    type: "house_door_01",
                    pos: ve.create(14, 7),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.house_column_1 || "house_column_1",
                    pos: ve.create(6, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.house_column_1 || "house_column_1",
                    pos: ve.create(6, -2.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(8, 10),
                    scale: 1,
                    ori: 1
                }, {
                    type: "stand_01",
                    pos: ve.create(12.25, -2),
                    scale: 1,
                    ori: 3
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(7.75, -6),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.stand || "",
                    pos: ve.create(-12.25, -3),
                    scale: 1,
                    ori: 1
                }, {
                    type: "table_01",
                    pos: ve.create(-11.25, 1.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: "oven_01",
                    pos: ve.create(-7, 11),
                    scale: 1,
                    ori: 0
                }, {
                    type: "refrigerator_01",
                    pos: ve.create(-7, 1),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.plant || "bush_02",
                    pos: e.plant_pos || ve.create(-12, -10.5),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: e.porch_01 || "",
                    pos: ve.create(4.5, -15.5),
                    scale: .9,
                    ori: 0
                }, {
                    type: e.porch_01 || "",
                    pos: ve.create(-5.25, 15.5),
                    scale: .9,
                    ori: 2
                }, {
                    type: "loot_tier_1",
                    pos: ve.create(0, 4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.plant_loot || "",
                    pos: ve.create(-10.25, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.plant_loot || "",
                    pos: ve.create(-10, -8.75),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.plant_loot || "",
                    pos: ve.create(-9.75, -8.25),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function de(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    color: 4656911,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, -1), ve.create(19, 18.5))],
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "house",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(14.5, 13))]
                    }],
                    imgs: [{
                        sprite: "map-building-house-floor-02.img",
                        pos: ve.create(0, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(10, 14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, -14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(2.6, -14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(5.2, -14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(7.8, -14.5),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, -16.25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(2.6, -16.25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(5.2, -16.25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(7.8, -16.25),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(14.5, 13))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(16.5, 15))],
                    vision: {
                        dist: 5.5,
                        width: 2.75,
                        linger: .5,
                        fadeRate: 6
                    },
                    imgs: [{
                        sprite: "map-building-house-ceiling.img",
                        scale: .667,
                        alpha: 1,
                        tint: 13619151,
                        rot: 2
                    }]
                },
                mapObjects: [{
                    type: "brick_wall_ext_5",
                    pos: ve.create(-12.5, 13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-8.5, 13.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_15",
                    pos: ve.create(.5, 13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_3",
                    pos: ve.create(13.5, 13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(12, 13.25),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-14.5, 10),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_10",
                    pos: ve.create(-14.5, -.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_4",
                    pos: ve.create(-14.5, -10.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-14.75, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(-14.75, -7),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-12.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_5",
                    pos: ve.create(-4.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "brick_wall_ext_13",
                    pos: ve.create(8.5, -13),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_window_01",
                    pos: ve.create(-8.5, -13.25),
                    scale: 1,
                    ori: 3
                }, {
                    type: "house_door_01",
                    pos: ve.create(-2, -13.25),
                    scale: 1,
                    ori: 3
                }, {
                    type: "brick_wall_ext_8",
                    pos: ve.create(14.5, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_9",
                    pos: ve.create(14.5, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: "brick_wall_ext_2",
                    pos: ve.create(14.5, -11.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_window_01",
                    pos: ve.create(14.75, -9),
                    scale: 1,
                    ori: 2
                }, {
                    type: "house_window_01",
                    pos: ve.create(14.75, 3),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.house_wall_int_5 || "house_wall_int_5",
                    pos: ve.create(-.5, 10),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.house_wall_int_14 || "house_wall_int_14",
                    pos: ve.create(-7, 3),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.house_wall_int_11 || "house_wall_int_11",
                    pos: ve.create(-8.5, -2),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.house_wall_int_4 || "house_wall_int_4",
                    pos: ve.create(12, 1),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.house_wall_int_4 || "house_wall_int_4",
                    pos: ve.create(12, -7),
                    scale: 1,
                    ori: 1
                }, {
                    type: "house_door_01",
                    pos: ve.create(-.5, 3.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "house_door_01",
                    pos: ve.create(-3.5, -1.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.house_column_1 || "house_column_1",
                    pos: ve.create(4, -3),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        toilet_01: 5,
                        toilet_02: 1
                    }),
                    pos: ve.create(-11.75, .5),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.stand || "",
                    pos: ve.create(-12.5, 11),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        drawers_01: 7,
                        drawers_02: 1
                    }),
                    pos: ve.create(-3.75, 11),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        bookshelf_01: 7,
                        bookshelf_02: 1
                    }),
                    pos: ve.create(13, -3),
                    scale: 1,
                    ori: 3
                }, {
                    type: "table_03",
                    pos: ve.create(-8.5, -6),
                    scale: 1,
                    ori: 0
                }, {
                    type: "oven_01",
                    pos: ve.create(-12.25, -11),
                    scale: 1,
                    ori: 2
                }, {
                    type: "refrigerator_01",
                    pos: ve.create(-4.5, -11),
                    scale: 1,
                    ori: 2
                }, {
                    type: e.plant || "bush_02",
                    pos: e.plant_pos || ve.create(2, 10.5),
                    scale: 1,
                    ori: 0,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "loot_tier_1",
                    pos: ve.create(0, -4.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.plant_loot || "",
                    pos: ve.create(4.25, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.plant_loot || "",
                    pos: ve.create(3.75, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.plant_loot || "",
                    pos: ve.create(4, 8.25),
                    scale: 1,
                    ori: 0
                }, {
                    type: "grill_01",
                    pos: ve.create(6, -15.25),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function he(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    color: 6707790,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [_e.createAabbExtents(ve.create(0, .9), ve.create(5.6, 3.5))]
                    }, {
                        type: "asphalt",
                        collision: [_e.createAabbExtents(ve.create(3.75, -4), ve.create(2.25, 1.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-shack-floor-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, .9), ve.create(5.6, 3.5))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, .8), ve.create(5.9, 3.8))],
                    vision: {
                        width: 4
                    },
                    imgs: [{
                        sprite: "map-building-shack-ceiling-01.img",
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }],
                    destroy: {
                        wallCount: 2,
                        particle: "shackBreak",
                        particleCount: 25,
                        residue: "map-shack-res-01.img"
                    }
                },
                mapObjects: [{
                    type: "shack_wall_bot",
                    pos: ve.create(-1.49, -2.4),
                    scale: 1,
                    ori: 0
                }, {
                    type: "shack_wall_side_left",
                    pos: ve.create(-5.55, .69),
                    scale: 1,
                    ori: 0
                }, {
                    type: "shack_wall_top",
                    pos: ve.create(-.3, 4.33),
                    scale: 1,
                    ori: 0
                }, {
                    type: "shack_wall_side_right",
                    pos: ve.create(5.55, .95),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(7.9, 2.85),
                    scale: .8,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "barrel_01",
                    pos: ve.create(7.45, -.9),
                    scale: .85,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_2: 1
                    }),
                    pos: ve.create(-2, .8),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(2, .8),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ue(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    color: 4014894,
                    scale: 1
                },
                terrain: {
                    grass: !0,
                    beach: !1
                },
                zIdx: 1,
                floor: {
                    surfaces: [{
                        type: "shack",
                        collision: [_e.createAabbExtents(ve.create(0, 1), ve.create(5, 4))]
                    }, {
                        type: "asphalt",
                        collision: [_e.createAabbExtents(ve.create(0, -4), ve.create(2, 1))]
                    }],
                    imgs: [{
                        sprite: "map-building-shack-floor-02.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 1), ve.create(4.75, 3.75))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 1), ve.create(0, 0))],
                    vision: {
                        width: 4
                    },
                    imgs: [{
                        sprite: "map-building-shack-ceiling-02.img",
                        scale: .667,
                        alpha: 1,
                        tint: 16777215
                    }],
                    destroy: {
                        wallCount: 2,
                        particle: "shackBreak",
                        particleCount: 25,
                        residue: "map-shack-res-02.img"
                    }
                },
                mapObjects: [{
                    type: "barn_wall_int_2",
                    pos: ve.create(-3, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_2",
                    pos: ve.create(3, -2.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barn_wall_int_8",
                    pos: ve.create(-4.5, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_8",
                    pos: ve.create(4.5, 1),
                    scale: 1,
                    ori: 0
                }, {
                    type: "barn_wall_int_8",
                    pos: ve.create(0, 4.5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barrel_01",
                    pos: ve.create(4, -4.5),
                    scale: .8,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1
                    }),
                    pos: ve.create(0, 1),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ge(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(27, 0), ve.create(3, 12.25)),
                        color: 10066329
                    }, {
                        collider: _e.createAabbExtents(ve.create(-27, 0), ve.create(3, 12.25)),
                        color: 10066329
                    }, {
                        collider: _e.createAabbExtents(ve.create(0, 0), ve.create(24.5, 12.25)),
                        color: 5915450
                    }]
                },
                zIdx: 1,
                terrain: {
                    grass: !0,
                    beach: !1
                },
                mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(35, 16))],
                floor: {
                    surfaces: [{
                        type: "warehouse",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(32, 12.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-warehouse-floor-01.img",
                        pos: ve.create(-15.615, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-warehouse-floor-01.img",
                        pos: ve.create(15.615, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(24.5, 12.25))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(32, 12.5))],
                    vision: {
                        dist: 8,
                        width: 5
                    },
                    imgs: [{
                        sprite: "map-building-warehouse-ceiling-01.img",
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "warehouse_wall_side",
                    pos: ve.create(0, 11.9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "warehouse_wall_edge",
                    pos: ve.create(-24.4, 8.2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "warehouse_wall_edge",
                    pos: ve.create(24.4, 8.2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "warehouse_wall_side",
                    pos: ve.create(0, -11.9),
                    scale: 1,
                    ori: 0
                }, {
                    type: "warehouse_wall_edge",
                    pos: ve.create(-24.4, -8.2),
                    scale: 1,
                    ori: 0
                }, {
                    type: "warehouse_wall_edge",
                    pos: ve.create(24.4, -8.2),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.topLeftObs,
                    pos: ve.create(-21.25, 8.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: "crate_04",
                    pos: ve.create(-16.25, 8.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: "crate_01",
                    pos: ve.create(-21.25, -8.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: "barrel_01",
                    pos: ve.create(-16.5, -8.75),
                    scale: .9,
                    ori: 0
                }, {
                    type: e.topRightObs,
                    pos: ve.create(21.25, 8.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: "barrel_01",
                    pos: ve.create(16.5, 8.75),
                    scale: .9,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: ve.create(16.25, -8.75),
                    scale: 1,
                    ori: 1
                }, {
                    type: e.botRightObs,
                    pos: ve.create(21.25, -8.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: c({
                        crate_02: 1,
                        crate_01: 3
                    }),
                    pos: ve.create(0, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: "crate_01",
                    pos: ve.create(5, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: "crate_01",
                    pos: ve.create(-5, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: e.ignoreMapSpawnReplacement
                }, {
                    type: "crate_04",
                    pos: ve.create(0, 5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_04",
                    pos: ve.create(0, -5),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(-9, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: e.decoration_01 || "",
                    pos: ve.create(9, -6),
                    scale: 1,
                    ori: 0
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function ye(e) {
            var t = {
                type: "building",
                map: {
                    display: !0,
                    shapes: [{
                        collider: _e.createAabbExtents(ve.create(25, 0), ve.create(3, 12.25)),
                        color: 10066329
                    }, {
                        collider: _e.createAabbExtents(ve.create(-25, 0), ve.create(3, 12.25)),
                        color: 10066329
                    }, {
                        collider: _e.createAabbExtents(ve.create(0, 0), ve.create(22.5, 12.25)),
                        color: 2240064
                    }]
                },
                zIdx: 1,
                terrain: {
                    grass: !0,
                    beach: !1
                },
                floor: {
                    surfaces: [{
                        type: "warehouse",
                        collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(27.5, 12.5))]
                    }],
                    imgs: [{
                        sprite: "map-building-warehouse-floor-02.img",
                        pos: ve.create(-13.72, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }, {
                        sprite: "map-building-warehouse-floor-02.img",
                        pos: ve.create(13.72, 0),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }]
                },
                ceiling: {
                    scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(22, 12.25))],
                    scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(27.5, 12.5))],
                    vision: {
                        dist: 8,
                        width: 5
                    },
                    imgs: [{
                        sprite: "map-building-warehouse-ceiling-02.img",
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }]
                },
                mapObjects: [{
                    type: "metal_wall_ext_43",
                    pos: ve.create(0, 12),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_8",
                    pos: ve.create(-21.9, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_8",
                    pos: ve.create(21.9, 8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_43",
                    pos: ve.create(0, -12),
                    scale: 1,
                    ori: 1
                }, {
                    type: "metal_wall_ext_8",
                    pos: ve.create(-21.9, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "metal_wall_ext_8",
                    pos: ve.create(21.9, -8.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(-18.75, 8.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "barrel_01",
                    pos: ve.create(-14, 8.75),
                    scale: .9,
                    ori: 0
                }, {
                    type: "crate_06",
                    pos: ve.create(-18.75, -6),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(-19.5, -9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_06",
                    pos: ve.create(18.75, 6),
                    scale: 1,
                    ori: 0
                }, {
                    type: c({
                        loot_tier_1: 1,
                        "": 1
                    }),
                    pos: ve.create(19.5, 9.5),
                    scale: 1,
                    ori: 0
                }, {
                    type: "crate_01",
                    pos: ve.create(18.75, -8.75),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "barrel_01",
                    pos: ve.create(14, -8.75),
                    scale: .9,
                    ori: 0
                }, {
                    type: c({
                        crate_08: 24,
                        crate_09: 1
                    }),
                    pos: ve.create(0, 0),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "crate_01",
                    pos: ve.create(0, 5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "crate_01",
                    pos: ve.create(0, -5),
                    scale: 1,
                    ori: 0,
                    inheritOri: !1,
                    ignoreMapSpawnReplacement: !0
                }, {
                    type: "crate_06",
                    pos: ve.create(4, -5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "crate_06",
                    pos: ve.create(-4, 5),
                    scale: 1,
                    ori: 1
                }, {
                    type: "barrel_01",
                    pos: ve.create(4.5, 0),
                    scale: .9,
                    ori: 0,
                    inheritOri: !1
                }, {
                    type: "barrel_01",
                    pos: ve.create(-4.5, 0),
                    scale: .9,
                    ori: 0,
                    inheritOri: !1
                }]
            };
            return ke.mergeDeep(t, e || {})
        }

        function we(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 2)),
                height: 10,
                collidable: !0,
                destructible: !0,
                isWindow: !0,
                health: 1,
                hitParticle: "glassChip",
                explodeParticle: "windowBreak",
                reflectBullets: !1,
                loot: [],
                destroyType: "house_window_broken_01",
                img: {
                    sprite: "map-building-house-window-01.img",
                    residue: "none",
                    scale: .5,
                    alpha: 1,
                    tint: 16777215,
                    zIdx: 10
                },
                sound: {
                    bullet: "glass_bullet",
                    punch: "glass_bullet",
                    explode: "window_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }

        function xe(e) {
            var t = {
                type: "obstacle",
                scale: {
                    createMin: 1,
                    createMax: 1,
                    destroy: 1
                },
                collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 2)),
                height: .2,
                isWall: !0,
                collidable: !0,
                destructible: !1,
                health: 100,
                hitParticle: "woodChip",
                explodeParticle: "woodPlank",
                reflectBullets: !1,
                loot: [],
                img: {
                    sprite: "map-building-house-window-res-01.img",
                    scale: .5,
                    alpha: 1,
                    tint: 4456448,
                    zIdx: 10
                },
                sound: {
                    bullet: "wall_wood_bullet",
                    punch: "wall_wood_bullet",
                    explode: "wall_wood_break_01",
                    enter: "none"
                }
            };
            return ke.mergeDeep(t, e || {})
        }
        var fe = a("0e566746"),
            be = a("34e32c48"),
            _e = a("6b42806d"),
            Se = a("10899aea"),
            ke = a("1901e2d9"),
            ve = a("c2a798c8"),
            ze = {},
            Me = {
                DesertWheelActivated: 0
            },
            Te = {
                metal: {
                    destructible: !1,
                    reflectBullets: !0,
                    hitParticle: "barrelChip",
                    explodeParticle: "barrelBreak",
                    sound: {
                        bullet: "wall_bullet",
                        punch: "metal_punch",
                        explode: "barrel_break_01",
                        enter: "none"
                    }
                },
                wood: {
                    destructible: !0,
                    reflectBullets: !1,
                    sound: {
                        bullet: "wall_wood_bullet",
                        punch: "wall_wood_bullet",
                        explode: "wall_break_01",
                        enter: "none"
                    }
                },
                woodPerm: {
                    destructible: !1,
                    reflectBullets: !1,
                    sound: {
                        bullet: "wall_wood_bullet",
                        punch: "wall_wood_bullet",
                        explode: "wall_break_01",
                        enter: "none"
                    }
                },
                brick: {
                    destructible: !1,
                    reflectBullets: !1,
                    hitParticle: "brickChip",
                    sound: {
                        bullet: "wall_brick_bullet",
                        punch: "wall_brick_bullet",
                        explode: "wall_break_01",
                        enter: "none"
                    }
                },
                concrete: {
                    destructible: !1,
                    reflectBullets: !1,
                    hitParticle: "barrelChip",
                    sound: {
                        bullet: "concrete_hit",
                        punch: "concrete_hit",
                        explode: "wall_break_01",
                        enter: "none"
                    }
                },
                stone: {
                    destructible: !0,
                    stonePlated: !0,
                    reflectBullets: !1,
                    hitParticle: "rockChip",
                    explodeParticle: "rockBreak",
                    sound: {
                        bullet: "concrete_hit",
                        punch: "concrete_hit",
                        explode: "stone_break_01",
                        enter: "none"
                    }
                },
                glass: {
                    destructible: !0,
                    reflectBullets: !1,
                    hitParticle: "glassChip",
                    explodeParticle: "windowBreak",
                    sound: {
                        bullet: "glass_bullet",
                        punch: "glass_bullet",
                        explode: "window_break_01",
                        enter: "none"
                    }
                }
            },
            Pe = {
                barrel_01: p({}),
                barrel_01b: p({
                    img: {
                        tint: 13224393
                    },
                    loot: [s("tier_surviv", 2, 3), l("mirv", 1), l("mirv", 1), l("mirv", 1), l("outfitCarbonFiber", 1)]
                }),
                barrel_02: d({
                    health: 60
                }),
                barrel_03: d({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.25, .5)),
                    health: 20,
                    img: {
                        sprite: "map-barrel-03.img",
                        residue: "map-barrel-res-03.img",
                        scale: .45
                    }
                }),
                barrel_04: d({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.25, .5)),
                    health: 20,
                    loot: [s("tier_soviet", 2, 3)],
                    img: {
                        sprite: "map-barrel-04.img",
                        residue: "map-barrel-res-03.img",
                        scale: .45
                    }
                }),
                bed_sm_01: h({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.4, 3.4)),
                    img: {
                        sprite: "map-bed-01.img"
                    }
                }),
                bed_lg_01: h({
                    img: {
                        residue: "map-bed-res-02.img"
                    }
                }),
                bollard_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: 1
                    },
                    collision: _e.createCircle(ve.create(0, 0), 1.25),
                    height: .5,
                    collidable: !0,
                    destructible: !1,
                    health: 300,
                    hitParticle: "barrelChip",
                    explodeParticle: "barrelBreak",
                    reflectBullets: !0,
                    loot: [],
                    map: {
                        display: !0,
                        color: 6310464,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-bollard-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "silo_bullet",
                        punch: "silo_bullet",
                        explode: "barrel_break_01",
                        enter: "none"
                    }
                },
                bookshelf_01: u({
                    img: {
                        sprite: "map-bookshelf-01.img"
                    },
                    loot: [s("tier_world", 1, 1)]
                }),
                bookshelf_02: u({
                    img: {
                        sprite: "map-bookshelf-02.img"
                    },
                    loot: [s("tier_soviet", 2, 3)]
                }),
                bush_01: x({}),
                bush_01b: x({
                    img: {
                        alpha: 1
                    }
                }),
                bush_01f: x({
                    img: {
                        sprite: "map-bush-01f.img"
                    },
                    map: {
                        color: 1793032
                    }
                }),
                bush_01x: x({
                    map: {
                        color: 4545840
                    },
                    img: {
                        sprite: "map-bush-01x.img"
                    }
                }),
                bush_02: x({
                    img: {
                        residue: "map-bush-res-02.img"
                    }
                }),
                bush_03: x({
                    img: {
                        sprite: "map-bush-03.img",
                        alpha: 1
                    }
                }),
                bush_04: x({
                    hitParticle: "leafRiver",
                    explodeParticle: "leafRiver",
                    img: {
                        sprite: "map-bush-04.img",
                        residue: "map-bush-res-04.img",
                        alpha: 1,
                        scale: .25
                    },
                    terrain: {
                        grass: !0,
                        river: {
                            centerWeight: .3
                        },
                        riverShore: !0
                    },
                    sound: {
                        enter: "bush_enter_02"
                    }
                }),
                bush_05: x({
                    img: {
                        sprite: "map-bush-05.img",
                        residue: "map-bush-res-05.img"
                    },
                    map: {
                        color: 6971965
                    }
                }),
                bush_06: x({
                    collision: _e.createCircle(ve.create(0, 0), 1.75),
                    img: {
                        sprite: "map-bush-06.img",
                        residue: "map-bush-res-06.img"
                    },
                    map: {
                        display: !0,
                        color: 6971965,
                        scale: 1.5
                    }
                }),
                bush_06b: x({
                    scale: {
                        createMin: 1,
                        createMax: 1
                    },
                    collision: _e.createCircle(ve.create(0, 0), 1.75),
                    img: {
                        sprite: "map-bush-06.img",
                        residue: "map-bush-res-06.img",
                        alpha: 1
                    },
                    map: {
                        display: !0,
                        color: 14041344,
                        scale: 1.5
                    }
                }),
                bush_07: x({
                    hitParticle: "leafRiver",
                    explodeParticle: "leafRiver",
                    img: {
                        sprite: "map-bush-07.img",
                        alpha: 1,
                        scale: .5
                    },
                    sound: {
                        enter: "bush_enter_02"
                    }
                }),
                bush_07s: x({
                    hitParticle: "leafRiver",
                    explodeParticle: "leafRiver",
                    map: {
                        display: !0,
                        color: 671242,
                        scale: 1.5
                    },
                    img: {
                        sprite: "map-bush-07s.img",
                        alpha: 1,
                        scale: .5
                    },
                    sound: {
                        enter: "bush_enter_02"
                    }
                }),
                bush_07x: x({
                    img: {
                        sprite: "map-bush-07x.img"
                    }
                }),
                case_01: b({
                    loot: [l("deagle", 1)]
                }),
                case_02: b({
                    img: {
                        sprite: "map-case-deagle-02.img"
                    },
                    loot: [l("deagle", 1), l("deagle", 1)]
                }),
                case_03: b({
                    health: 140,
                    img: {
                        sprite: "map-case-hatchet-01.img",
                        residue: "map-case-hatchet-res-01.img"
                    },
                    loot: [s("tier_hatchet", 1, 1)],
                    hitParticle: "blackChip"
                }),
                case_04: b({
                    health: 140,
                    img: {
                        sprite: "map-case-flare-01.img",
                        residue: "map-case-flare-res-01.img"
                    },
                    loot: [l("flare_gun", 1)],
                    hitParticle: "blackChip",
                    map: {
                        display: !0,
                        color: 7025920,
                        scale: .85
                    }
                }),
                case_05: b({
                    health: 140,
                    img: {
                        sprite: "map-case-meteor-01.img",
                        residue: "map-case-meteor-res-01.img"
                    },
                    loot: [l("flare_gun", 1), l("strobe", 1), l("strobe", 1), l("strobe", 1), l("strobe", 1)],
                    hitParticle: "blackChip",
                    map: {
                        display: !1,
                        color: 7025920,
                        scale: .85
                    }
                }),
                case_06: b({
                    health: 140,
                    img: {
                        sprite: "map-case-chrys-01.img"
                    },
                    loot: [s("tier_chest", 2, 3), s("tier_chrys_case", 1, 1)],
                    hitParticle: "blackChip",
                    map: {
                        display: !1,
                        color: 7025920,
                        scale: .85
                    }
                }),
                chest_01: _({
                    loot: [s("tier_chest", 3, 4), s("tier_pirate_melee", 1, 1), l("outfitRoyalFortune", 1)]
                }),
                chest_02: _({
                    img: {
                        sprite: "map-chest-02.img"
                    },
                    loot: [s("tier_chest", 2, 2)],
                    map: {
                        display: !0,
                        color: 7025920,
                        scale: .85
                    }
                }),
                chest_03: S({
                    img: {
                        sprite: "map-chest-03.img"
                    },
                    loot: [s("tier_chest", 3, 5), l("outfitWaterElem", 1)]
                }),
                chest_03f: S({
                    img: {
                        sprite: "map-chest-03f.img"
                    },
                    loot: [s("tier_chest", 3, 5), l("outfitKhaki", 1)]
                }),
                chest_03x: S({
                    img: {
                        sprite: "map-chest-03x.img"
                    },
                    loot: [s("tier_chest", 3, 5), l("outfitWaterElem", 1)]
                }),
                control_panel_01: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.7)),
                    button: {
                        interactionRad: .75,
                        interactionText: "game-use",
                        useOnce: !0,
                        useType: "cell_door_01",
                        useDelay: 1.1,
                        useDir: ve.create(-1, 0),
                        useImg: "map-control-panel-02.img",
                        sound: {
                            on: "cell_control_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-control-panel-01.img"
                    }
                }),
                control_panel_02: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.7)),
                    health: 175,
                    img: {
                        sprite: "map-control-panel-02.img"
                    }
                }),
                control_panel_02b: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.7)),
                    destructible: !1,
                    button: {
                        interactionRad: .2,
                        interactionText: "game-use",
                        useOnce: !0,
                        useType: "",
                        useDelay: .25,
                        useDir: ve.create(-1, 0),
                        useImg: "map-control-panel-01.img",
                        sound: {
                            on: "button_press_01",
                            off: "button_press_01"
                        }
                    },
                    img: {
                        sprite: "map-control-panel-02.img"
                    }
                }),
                control_panel_03: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.25, 1.2)),
                    health: 150,
                    img: {
                        sprite: "map-control-panel-03.img"
                    }
                }),
                control_panel_04: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.7)),
                    button: {
                        interactionRad: .75,
                        interactionText: "game-use",
                        useOnce: !0,
                        useType: "crossing_door_01",
                        useDelay: 4.25,
                        useDir: ve.create(1, 0),
                        useImg: "map-control-panel-05.img",
                        sound: {
                            on: "cell_control_02",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-control-panel-04.img"
                    }
                }),
                control_panel_06: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 1.2)),
                    health: 200,
                    img: {
                        sprite: "map-control-panel-06.img"
                    }
                }),
                switch_01: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.45, .55)),
                    destructible: !1,
                    button: {
                        interactionRad: .2,
                        interactionText: "game-use",
                        useOnce: !0,
                        useType: "",
                        useDelay: .25,
                        useDir: ve.create(-1, 0),
                        useImg: "map-switch-02.img",
                        sound: {
                            on: "button_press_01",
                            off: "button_press_01"
                        }
                    },
                    img: {
                        sprite: "map-switch-01.img"
                    }
                }),
                switch_02: E({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.45, .55)),
                    destructible: !1,
                    img: {
                        sprite: "map-switch-02.img"
                    }
                }),
                couch_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .85
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 1.5)),
                    height: .5,
                    collidable: !0,
                    destructible: !0,
                    health: 125,
                    hitParticle: "clothHit",
                    explodeParticle: ["woodPlank", "clothBreak"],
                    reflectBullets: !1,
                    loot: [],
                    map: {
                        display: !1,
                        color: 6697728,
                        scale: .875
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    img: {
                        sprite: "map-couch-01.img",
                        residue: "map-couch-res-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "cloth_bullet",
                        punch: "cloth_punch",
                        explode: "cloth_break_01",
                        enter: "none"
                    }
                },
                crate_01: v({}),
                crate_01x: v({
                    img: {
                        sprite: "map-crate-01x.img"
                    }
                }),
                crate_02: v({
                    health: 140,
                    loot: [s("tier_soviet", 3, 5)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-02.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_02x: v({
                    health: 140,
                    loot: [s("tier_soviet", 3, 5)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-02x.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_02f: v({
                    health: 140,
                    loot: [s("tier_guns", 3, 3), s("tier_armor", 2, 2), s("tier_packs", 1, 1)],
                    map: {
                        display: !0,
                        color: 13369344
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-02f.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_02d: v({
                    health: 140,
                    loot: [l("m1014", 1), l("helmet03_leader", 1), l("outfitRedLeaderAged", 1), l("machete_taiga", 1)],
                    map: {
                        display: !0,
                        color: 13369344
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-02f.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_03: v({
                    health: 100,
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.575, 1.575)),
                    loot: [s("tier_throwables", 2, 4)],
                    map: {
                        color: 5066014,
                        scale: .875
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-03.img",
                        scale: .35
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_03x: v({
                    health: 100,
                    hitParticle: "glassChip",
                    explodeParticle: ["glassPlank"],
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.575, 1.575)),
                    loot: [l("snowball", 4), l("snowball", 4), l("snowball", 4)],
                    map: {
                        color: 31863,
                        scale: .875
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-03x.img",
                        scale: .35
                    },
                    sound: {
                        explode: "crate_break_02"
                    }
                }),
                crate_04: v({
                    health: 225,
                    destructible: !0,
                    armorPlated: !0,
                    hitParticle: "greenChip",
                    loot: [s("tier_ammo_crate", 1, 1)],
                    map: {
                        display: !0,
                        color: 5468244,
                        scale: .875
                    },
                    img: {
                        sprite: "map-crate-04.img"
                    },
                    sound: {
                        bullet: "ammo_crate_bullet",
                        punch: "ammo_crate_bullet",
                        explode: "crate_break_01"
                    }
                }),
                crate_05: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2, 2)),
                    destructible: !1,
                    hitParticle: "goldChip",
                    loot: [],
                    map: {
                        display: !1
                    },
                    img: {
                        sprite: "map-crate-05.img"
                    },
                    sound: {
                        bullet: "wall_brick_bullet",
                        punch: "wall_brick_bullet"
                    }
                }),
                crate_06: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.25, 1.1)),
                    health: 175,
                    destructible: !0,
                    armorPlated: !0,
                    hitParticle: "greenChip",
                    loot: [s("tier_ammo", 1, 1)],
                    map: {
                        display: !1
                    },
                    img: {
                        sprite: "map-crate-06.img"
                    },
                    sound: {
                        bullet: "ammo_crate_bullet",
                        punch: "ammo_crate_bullet"
                    }
                }),
                crate_07: v({
                    health: 140,
                    loot: [s("tier_surviv", 4, 5), l("ak47", 1), l("ak47", 1), l("ak47", 1), l("ak47", 1), l("outfitKhaki", 1), l("outfitKhaki", 1), l("outfitKhaki", 1), l("outfitKhaki", 1)],
                    img: {
                        sprite: "map-crate-07.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_07b: v({
                    health: 140,
                    loot: [s("tier_armor", 4, 5), l("mp220", 1), l("mp220", 1), l("bar", 1), l("bar", 1), l("outfitKhaki", 1), l("outfitKhaki", 1), l("outfitKhaki", 1), l("outfitKhaki", 1)],
                    img: {
                        sprite: "map-crate-07.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_08: v({
                    health: 140,
                    loot: [s("tier_surviv", 2, 3)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-08.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_09: v({
                    health: 140,
                    loot: [s("tier_chest", 1, 2), s("tier_conch", 1, 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-09.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_10: v({
                    health: 200,
                    scale: {
                        destroy: .75
                    },
                    loot: [s("tier_airdrop_uncommon", 1, 1), s("tier_airdrop_armor", 1, 1), s("tier_medical", 2, 2), s("tier_airdrop_scopes", 1, 1), s("tier_airdrop_skins", 1, 1), s("tier_airdrop_melee", 1, 1), s("tier_airdrop_ammo", 3, 3), s("tier_airdrop_throwables", 1, 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-10.img",
                        residue: "map-crate-res-03.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_11: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    scale: {
                        destroy: .75
                    },
                    health: 200,
                    loot: [s("tier_airdrop_rare", 1, 1), s("tier_airdrop_armor", 1, 1), s("tier_medical", 2, 2), s("tier_airdrop_scopes", 1, 1), s("tier_airdrop_skins", 1, 1), s("tier_airdrop_melee", 1, 1), s("tier_airdrop_ammo", 3, 3), s("tier_airdrop_throwables", 1, 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-11.img",
                        residue: "map-crate-res-03.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_12: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3.5, 3.5)),
                    scale: {
                        destroy: .75
                    },
                    health: 500,
                    loot: [s("tier_airdrop_rare", 2, 2), s("tier_airdrop_uncommon", 4, 6), s("tier_airdrop_armor", 4, 5), s("tier_medical", 12, 15), s("tier_airdrop_scopes", 6, 8), s("tier_airdrop_skins", 3, 4), s("tier_airdrop_melee", 5, 7), s("tier_airdrop_ammo", 10, 12), s("tier_airdrop_throwables", 6, 8), s("tier_katanas", 1, 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-12.img",
                        residue: "map-crate-res-03.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_13: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3.5, 3.5)),
                    scale: {
                        destroy: .75
                    },
                    health: 200,
                    loot: [s("tier_airdrop_mythic", 3, 4), s("tier_airdrop_rare", 3, 4), s("tier_airdrop_armor", 6, 8), s("tier_medical", 12, 15), s("tier_airdrop_scopes", 6, 8), s("tier_airdrop_faction_skins", 1, 2), s("tier_airdrop_faction_melee", 3, 4), s("tier_airdrop_ammo", 10, 12), s("tier_airdrop_throwables", 6, 8), s("tier_katanas", 1, 1), l("strobe", 1), l("strobe", 1), l("strobe", 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-13.img",
                        residue: "map-crate-res-03.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_14: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.7, 1.25)),
                    health: 100,
                    loot: [s("tier_knives", 1, 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !0
                    },
                    img: {
                        sprite: "map-crate-14.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_15: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.7, 1.25)),
                    health: 100,
                    loot: [s("tier_knives", 4, 4)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !0
                    },
                    img: {
                        sprite: "map-crate-14.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_16: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.7, 1.25)),
                    health: 100,
                    loot: [s("tier_knives", 4, 4)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !0
                    },
                    img: {
                        sprite: "map-crate-14.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_17: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.7, 1.25)),
                    health: 100,
                    loot: [l("ot38", 1), l("ot38", 1), l("ot38", 1), l("ot38", 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !0
                    },
                    img: {
                        sprite: "map-crate-17.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_18: v({
                    health: 140,
                    loot: [s("tier_cattle_crate", 2, 3), s("tier_soviet", 1, 2)],
                    map: {
                        display: !0,
                        color: 12867840,
                        scale: .875
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-18.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_19: v({
                    health: 140,
                    loot: [s("tier_guns", 1, 3), s("tier_surviv", 2, 3)],
                    map: {
                        display: !0,
                        color: 4500224,
                        scale: .875
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-19.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_20: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.7, 1.7)),
                    health: 75,
                    hitParticle: "greenChip",
                    explodeParticle: "greenPlank",
                    loot: [s("tier_armor", 1, 1), s("tier_world", 1, 1)],
                    map: {
                        display: !0,
                        color: 3884335,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-20.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_21: v({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.7, 1.25)),
                    health: 100,
                    loot: [l("outfitWhite", 1), l("outfitWhite", 1), l("ots38_dual", 1)],
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !0
                    },
                    img: {
                        sprite: "map-crate-21.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_22: v({
                    health: 140,
                    loot: [s("tier_guns", 3, 3), s("tier_armor", 2, 2), s("tier_packs", 1, 1)],
                    map: {
                        display: !0,
                        color: 32511
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-22.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                crate_22d: v({
                    health: 140,
                    loot: [l("an94", 1), l("helmet03_leader", 1), l("outfitBlueLeaderAged", 1), l("kukri_trad", 1)],
                    map: {
                        display: !0,
                        color: 32511
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-crate-22.img"
                    },
                    sound: {
                        explode: "crate_break_01"
                    }
                }),
                airdrop_crate_01: z({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    button: {
                        useImg: "map-airdrop-02.img",
                        useParticle: "airdropCrate01",
                        sound: {
                            on: "airdrop_open_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-airdrop-01.img",
                        residue: "none"
                    },
                    destroyType: "crate_10",
                    explodeParticle: "airdropCrate02"
                }),
                airdrop_crate_02: z({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    button: {
                        useImg: "map-airdrop-02.img",
                        useParticle: "airdropCrate01",
                        sound: {
                            on: "airdrop_open_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-airdrop-01.img",
                        residue: "none"
                    },
                    destroyType: "crate_11",
                    explodeParticle: "airdropCrate02"
                }),
                airdrop_crate_03: z({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4, 4)),
                    button: {
                        useImg: "map-airdrop-04.img",
                        useParticle: "airdropCrate03",
                        sound: {
                            on: "airdrop_open_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-airdrop-03.img",
                        residue: "none"
                    },
                    destroyType: "crate_12",
                    explodeParticle: "airdropCrate04"
                }),
                airdrop_crate_04: z({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4, 4)),
                    button: {
                        useImg: "map-airdrop-04.img",
                        useParticle: "airdropCrate03",
                        sound: {
                            on: "airdrop_open_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-airdrop-03.img",
                        residue: "none"
                    },
                    destroyType: "crate_13",
                    explodeParticle: "airdropCrate04"
                }),
                airdrop_crate_01x: z({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    button: {
                        useImg: "map-crate-13x.img",
                        useParticle: "airdropCrate01x",
                        sound: {
                            on: "airdrop_open_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-airdrop-01x.img",
                        residue: "none"
                    },
                    destroyType: "crate_10",
                    explodeParticle: "airdropCrate02x"
                }),
                airdrop_crate_02x: z({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    button: {
                        useImg: "map-crate-13x.img",
                        useParticle: "airdropCrate01x",
                        sound: {
                            on: "airdrop_open_01",
                            off: ""
                        }
                    },
                    img: {
                        sprite: "map-airdrop-02x.img",
                        residue: "none"
                    },
                    destroyType: "crate_11",
                    explodeParticle: "airdropCrate02x"
                }),
                bottle_01: B({
                    collision: _e.createCircle(ve.create(0, 0), .5),
                    health: 12,
                    hitParticle: "bottleBrownChip",
                    explodeParticle: "bottleBrownBreak",
                    img: {
                        sprite: "map-bottle-01.img",
                        residue: "none"
                    },
                    loot: [],
                    sound: {
                        bullet: "glass_bullet",
                        punch: "glass_bullet",
                        explode: "window_break_01",
                        enter: "none"
                    }
                }),
                bottle_02: B({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.5, .5)),
                    health: 20,
                    hitParticle: "bottleBlueChip",
                    explodeParticle: "bottleBlueBreak",
                    img: {
                        sprite: "map-bottle-02.img",
                        residue: "none"
                    },
                    loot: [],
                    sound: {
                        bullet: "glass_bullet",
                        punch: "glass_bullet",
                        explode: "window_break_01",
                        enter: "none"
                    }
                }),
                bottle_02r: L({
                    img: {
                        tint: 13172736
                    }
                }),
                bottle_02o: L({
                    collidable: !1,
                    img: {
                        tint: 16734720
                    }
                }),
                bottle_02y: L({
                    collidable: !1,
                    img: {
                        tint: 16776960
                    }
                }),
                bottle_02g: L({
                    collidable: !1,
                    img: {
                        tint: 32768
                    }
                }),
                bottle_02b: L({
                    img: {
                        tint: 27903
                    }
                }),
                bottle_02i: L({
                    collidable: !1,
                    img: {
                        tint: 4915330
                    }
                }),
                bottle_02v: L({
                    img: {
                        tint: 15631086
                    }
                }),
                candle_01: {
                    type: "obstacle",
                    map: {
                        display: !1,
                        color: 16777215,
                        scale: 1
                    },
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .5
                    },
                    collision: _e.createCircle(ve.create(0, 0), .5),
                    height: .5,
                    collidable: !1,
                    destructible: !1,
                    health: 150,
                    hitParticle: "goldChip",
                    explodeParticle: "barrelBreak",
                    reflectBullets: !1,
                    loot: [],
                    img: {
                        sprite: "map-candle-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "none",
                        punch: "none",
                        explode: "none",
                        enter: "none"
                    }
                },
                deposit_box_01: M({
                    img: {
                        sprite: "map-deposit-box-01.img"
                    },
                    loot: [s("tier_world", 1, 1)]
                }),
                deposit_box_02: M({
                    explodeParticle: "depositBoxGoldBreak",
                    img: {
                        sprite: "map-deposit-box-02.img"
                    },
                    loot: [s("tier_soviet", 1, 2), s("tier_guns", 1, 1)]
                }),
                drawers_01: I({
                    img: {
                        sprite: "map-drawers-01.img"
                    },
                    loot: [s("tier_container", 1, 1)]
                }),
                drawers_02: I({
                    img: {
                        sprite: "map-drawers-02.img"
                    },
                    loot: [s("tier_soviet", 2, 3)]
                }),
                fire_ext_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .8
                    },
                    collision: _e.createCircle(ve.create(.35, 0), 1),
                    height: .5,
                    collidable: !0,
                    destructible: !0,
                    createSmoke: !0,
                    health: 75,
                    hitParticle: "redChip",
                    explodeParticle: "redBreak",
                    reflectBullets: !0,
                    loot: [],
                    map: {
                        display: !1,
                        color: 6697728,
                        scale: .875
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    img: {
                        sprite: "map-fire-ext-01.img",
                        residue: "map-fire-ext-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "barrel_bullet",
                        punch: "barrel_bullet",
                        explode: "explosion_smoke_01",
                        enter: "none"
                    }
                },
                grill_01: D({
                    collision: _e.createCircle(ve.create(0, 0), 1.55),
                    img: {
                        sprite: "map-grill-01.img"
                    }
                }),
                gun_mount_01: C({
                    loot: [l("m870", 1)],
                    img: {
                        sprite: "map-gun-mount-01.img"
                    }
                }),
                gun_mount_02: C({
                    loot: [l("mp220", 1)],
                    img: {
                        sprite: "map-gun-mount-02.img"
                    }
                }),
                gun_mount_03: C({
                    loot: [l("qbb97", 1)],
                    img: {
                        sprite: "map-gun-mount-03.img"
                    }
                }),
                gun_mount_04: C({
                    loot: [l("woodaxe_bloody", 1)],
                    img: {
                        sprite: "map-gun-mount-04.img"
                    }
                }),
                gun_mount_05: C({
                    loot: [l("m1100", 1)],
                    img: {
                        sprite: "map-gun-mount-05.img"
                    }
                }),
                locker_01: A({
                    img: {
                        sprite: "map-locker-01.img"
                    },
                    loot: [s("tier_world", 1, 1)]
                }),
                locker_02: A({
                    img: {
                        sprite: "map-locker-02.img"
                    },
                    loot: [s("tier_police", 1, 1)]
                }),
                locker_03: A({
                    img: {
                        sprite: "map-locker-03.img"
                    },
                    loot: [l("outfitKhaki", 1), l("ak47", 1), l("backpack02", 1)]
                }),
                oven_01: D(),
                piano_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .75
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3.75, 1)),
                    height: .5,
                    collidable: !0,
                    destructible: !1,
                    health: 75,
                    hitParticle: "woodChip",
                    explodeParticle: ["woodPlank", "book"],
                    reflectBullets: !1,
                    loot: [s("tier_world", 1, 1)],
                    map: {
                        display: !1,
                        color: 6697728,
                        scale: .875
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    img: {
                        sprite: "map-piano-01.img",
                        residue: "map-drawers-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "piano_hit",
                        punch: "piano_hit",
                        explode: "drawers_break_01",
                        enter: "none"
                    }
                },
                planter_01: O({}),
                planter_02: O({
                    img: {
                        sprite: "map-planter-02.img"
                    }
                }),
                planter_03: O({
                    img: {
                        sprite: "map-planter-03.img"
                    }
                }),
                planter_04: O({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                    img: {
                        sprite: "map-planter-04.img"
                    },
                    destructible: !1,
                    button: {
                        interactionRad: .1,
                        interactionText: "game-use",
                        useOnce: !0,
                        useType: "",
                        useDelay: .25,
                        useDir: ve.create(1, 0),
                        useImg: "map-planter-05.img",
                        sound: {
                            on: "watering_01",
                            off: "watering_01"
                        }
                    }
                }),
                planter_06: O({
                    img: {
                        sprite: "map-planter-06.img",
                        residue: "map-planter-res-02.img"
                    }
                }),
                planter_07: O({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                    img: {
                        sprite: "map-planter-07.img",
                        residue: "map-planter-res-03.img"
                    },
                    destructible: !0
                }),
                pot_01: B({}),
                pot_02: B({
                    img: {
                        sprite: "map-pot-02.img"
                    },
                    loot: [l("spas12", 1), l("outfitIslander", 1)]
                }),
                pot_03: B({
                    img: {
                        sprite: "map-pot-03.img"
                    }
                }),
                pot_04: B({
                    img: {
                        sprite: "map-pot-03.img"
                    },
                    loot: [l("outfitWoodsCloak", 1), l("backpack03", 1)]
                }),
                pot_05: B({
                    img: {
                        sprite: "map-pot-03.img"
                    },
                    loot: [s("tier_pavilion", 1, 1)]
                }),
                potato_01: R({}),
                potato_02: R({
                    img: {
                        sprite: "map-potato-02.img"
                    }
                }),
                potato_03: R({
                    img: {
                        sprite: "map-potato-03.img"
                    }
                }),
                power_box_01: E(),
                pumpkin_01: F(),
                pumpkin_02: F({
                    health: 140,
                    img: {
                        sprite: "map-pumpkin-02.img"
                    },
                    loot: [s("tier_guns", 1, 2), s("tier_surviv", 1, 2), s("tier_skins", 1, 1)]
                }),
                refrigerator_01: N(),
                refrigerator_01b: N({
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: 1
                    },
                    health: 250
                }),
                recorder_01: j({
                    button: {
                        sound: {
                            on: "log_01"
                        }
                    }
                }),
                recorder_02: j({
                    button: {
                        sound: {
                            on: "log_02"
                        }
                    }
                }),
                recorder_03: j({
                    button: {
                        sound: {
                            on: "log_03"
                        }
                    }
                }),
                recorder_04: j({
                    button: {
                        sound: {
                            on: "log_04"
                        }
                    }
                }),
                recorder_05: j({
                    button: {
                        sound: {
                            on: "log_05"
                        }
                    }
                }),
                recorder_06: j({
                    button: {
                        sound: {
                            on: "log_06"
                        }
                    }
                }),
                recorder_07: j({
                    button: {
                        sound: {
                            on: "footstep_07"
                        }
                    }
                }),
                recorder_08: j({
                    button: {
                        sound: {
                            on: "footstep_08"
                        }
                    }
                }),
                recorder_09: j({
                    button: {
                        sound: {
                            on: "footstep_09"
                        }
                    }
                }),
                recorder_10: j({
                    button: {
                        sound: {
                            on: "cell_control_03"
                        }
                    }
                }),
                recorder_11: j({
                    button: {
                        sound: {
                            on: "log_11"
                        }
                    }
                }),
                screen_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .85
                    },
                    collision: _e.createAabbExtents(ve.create(0, .05), ve.create(4, .2)),
                    height: .5,
                    collidable: !0,
                    destructible: !0,
                    health: 25,
                    hitParticle: "clothHit",
                    explodeParticle: "barrelBreak",
                    reflectBullets: !1,
                    loot: [],
                    map: {
                        display: !1,
                        color: 6697728,
                        scale: .875
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    img: {
                        sprite: "map-screen-01.img",
                        residue: "map-screen-res-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "cloth_bullet",
                        punch: "cloth_punch",
                        explode: "screen_break_01",
                        enter: "none"
                    }
                },
                sandbags_01: V({}),
                sandbags_02: V({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.1, 1.4)),
                    img: {
                        sprite: "map-sandbags-02.img"
                    }
                }),
                silo_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: 1
                    },
                    collision: _e.createCircle(ve.create(0, 0), 7.75),
                    height: 10,
                    collidable: !0,
                    destructible: !1,
                    health: 300,
                    hitParticle: "barrelChip",
                    explodeParticle: "barrelBreak",
                    reflectBullets: !0,
                    loot: [],
                    map: {
                        display: !0,
                        color: 4079166,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-silo-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "silo_bullet",
                        punch: "silo_bullet",
                        explode: "barrel_break_01",
                        enter: "none"
                    }
                },
                stairs_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: 1
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2)),
                    height: .5,
                    collidable: !1,
                    destructible: !0,
                    health: 100,
                    hitParticle: "woodChip",
                    explodeParticle: "woodPlank",
                    reflectBullets: !1,
                    loot: [],
                    map: {
                        display: !1,
                        color: 6697728,
                        scale: .875
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    img: {
                        sprite: "map-stairs-broken-01.img",
                        residue: "map-table-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 60
                    },
                    sound: {
                        bullet: "wood_prop_bullet",
                        punch: "wood_prop_bullet",
                        explode: "crate_break_01",
                        enter: "none"
                    }
                },
                stand_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .75
                    },
                    collision: _e.createAabbExtents(ve.create(0, .15), ve.create(1.25, 1.25)),
                    height: .5,
                    collidable: !0,
                    destructible: !0,
                    health: 75,
                    hitParticle: "woodChip",
                    explodeParticle: "woodPlank",
                    reflectBullets: !1,
                    loot: [s("tier_world", 1, 1)],
                    map: {
                        display: !1,
                        color: 6697728,
                        scale: .875
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    img: {
                        sprite: "map-stand-01.img",
                        residue: "map-drawers-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "wood_prop_bullet",
                        punch: "wood_prop_bullet",
                        explode: "drawers_break_01",
                        enter: "none"
                    }
                },
                stone_01: q({}),
                stone_01b: q({
                    img: {
                        residue: "map-stone-res-01b.img"
                    }
                }),
                stone_01f: q({
                    map: {
                        display: !0,
                        color: 8224125,
                        scale: 1
                    }
                }),
                stone_01x: q({
                    map: {
                        display: !0,
                        color: 6052956,
                        scale: 1
                    },
                    img: {
                        sprite: "map-stone-01x.img",
                        residue: "map-stone-res-01x.img"
                    }
                }),
                stone_02: q({
                    img: {
                        tint: 15066597
                    },
                    loot: [s("tier_surviv", 2, 3), l("ak47", 1), l("outfitKhaki", 1)]
                }),
                stone_03: G({}),
                stone_03b: G({
                    img: {
                        sprite: "map-stone-03b.img",
                        residue: "map-stone-res-01.img"
                    }
                }),
                stone_03f: G({
                    img: {
                        sprite: "map-stone-03f.img",
                        residue: "map-stone-res-02f.img"
                    }
                }),
                stone_03x: G({
                    img: {
                        sprite: "map-stone-03x.img",
                        residue: "map-stone-res-02x.img"
                    }
                }),
                stone_04: q({
                    stonePlated: !0,
                    scale: {
                        createMin: .8,
                        createMax: .8,
                        destroy: .75
                    },
                    hitParticle: "rockEyeChip",
                    explodeParticle: "rockEyeBreak",
                    loot: [s("tier_eye_block", 1, 1)],
                    terrain: {
                        grass: !0,
                        beach: !0,
                        riverShore: !0
                    },
                    map: {
                        display: !0,
                        color: 1512466,
                        scale: 1
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.8, 1.8)),
                    img: {
                        sprite: "map-stone-04.img",
                        residue: "map-stone-res-04.img"
                    }
                }),
                stone_05: q({
                    stonePlated: !0,
                    hitParticle: "rockEyeChip",
                    explodeParticle: "rockEyeBreak",
                    loot: [s("tier_eye_stone", 1, 1)],
                    terrain: {
                        grass: !0,
                        beach: !0,
                        riverShore: !0
                    },
                    map: {
                        display: !0,
                        color: 1512466,
                        scale: 1
                    },
                    collision: _e.createCircle(ve.create(0, 0), 1.7),
                    img: {
                        sprite: "map-stone-05.img",
                        residue: "map-stone-res-01b.img"
                    }
                }),
                stone_06: q({
                    stonePlated: !0,
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .8
                    },
                    height: 10,
                    terrain: {
                        grass: !0,
                        beach: !0,
                        riverShore: !0
                    },
                    map: {
                        display: !0,
                        color: 3618615,
                        scale: 1
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 2)),
                    img: {
                        sprite: "map-stone-06.img",
                        scale: .5,
                        residue: "map-stone-res-06.img"
                    }
                }),
                stove_01: E({
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .85
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3, 2.25)),
                    disableBuildingOccupied: !0,
                    damageCeiling: !0,
                    explosion: "explosion_stove",
                    height: 10,
                    health: 500,
                    img: {
                        sprite: "map-stove-01.img"
                    },
                    sound: {
                        bullet: "wall_bullet",
                        punch: "metal_punch",
                        explode: "oven_break_01",
                        enter: "none"
                    }
                }),
                stove_02: E({
                    collision: _e.createCircle(ve.create(0, 0), 1.5),
                    disableBuildingOccupied: !0,
                    damageCeiling: !0,
                    explosion: "explosion_stove",
                    height: 10,
                    health: 400,
                    img: {
                        sprite: "map-stove-02.img"
                    },
                    sound: {
                        bullet: "wall_bullet",
                        punch: "metal_punch",
                        explode: "oven_break_01",
                        enter: "none"
                    }
                }),
                table_01: U(),
                table_01x: U({
                    img: {
                        sprite: "map-table-01x.img"
                    }
                }),
                table_02: U({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 2.5)),
                    health: 125,
                    img: {
                        sprite: "map-table-02.img",
                        residue: "map-table-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 60
                    }
                }),
                table_02x: U({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 2.5)),
                    health: 125,
                    img: {
                        sprite: "map-table-02x.img",
                        residue: "map-table-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 60
                    }
                }),
                table_03: U({
                    collision: _e.createCircle(ve.create(0, 0), 2.5),
                    health: 125,
                    img: {
                        sprite: "map-table-03.img",
                        residue: "map-table-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 60
                    }
                }),
                table_03x: U({
                    collision: _e.createCircle(ve.create(0, 0), 2.5),
                    health: 125,
                    img: {
                        sprite: "map-table-03x.img",
                        residue: "map-table-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 60
                    }
                }),
                toilet_01: H({
                    img: {
                        sprite: "map-toilet-01.img"
                    },
                    loot: [s("tier_toilet", 2, 3)]
                }),
                toilet_02: H({
                    img: {
                        sprite: "map-toilet-02.img"
                    },
                    loot: [s("tier_soviet", 3, 4)]
                }),
                toilet_02b: H({
                    img: {
                        sprite: "map-toilet-02.img",
                        tint: 11842740
                    },
                    loot: [l("fireaxe", 1)]
                }),
                toilet_03: H({
                    reflectBullets: !0,
                    hitParticle: "barrelChip",
                    explodeParticle: "toiletMetalBreak",
                    img: {
                        sprite: "map-toilet-03.img",
                        residue: "map-toilet-res-02.img"
                    },
                    loot: [s("tier_world", 1, 2)],
                    sound: {
                        bullet: "toilet_metal_bullet",
                        punch: "toilet_metal_bullet",
                        explode: "toilet_break_02"
                    }
                }),
                toilet_04: H({
                    reflectBullets: !0,
                    hitParticle: "barrelChip",
                    explodeParticle: "toiletMetalBreak",
                    img: {
                        sprite: "map-toilet-04.img",
                        residue: "map-toilet-res-02.img"
                    },
                    loot: [s("tier_soviet", 2, 3)],
                    sound: {
                        bullet: "toilet_metal_bullet",
                        punch: "toilet_metal_bullet",
                        explode: "toilet_break_02"
                    }
                }),
                tree_01: W(),
                tree_interior_01: W({
                    img: {
                        zIdx: 200
                    }
                }),
                tree_08f: W({
                    scale: {
                        createMin: 1.2,
                        createMax: 1.6
                    },
                    health: 200,
                    map: {
                        color: 995844,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-08f.img",
                        residue: "map-tree-res-01.img",
                        scale: .35,
                        zIdx: 801
                    }
                }),
                tree_01x: W({
                    img: {
                        sprite: "map-tree-01x.img"
                    }
                }),
                tree_02: W({
                    health: 120,
                    collision: _e.createCircle(ve.create(0, 0), 1.6),
                    aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(1.6, 1.6)),
                    height: .5,
                    loot: [l("woodaxe", 1)],
                    map: {
                        display: !1
                    },
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .9
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-tree-04.img",
                        scale: .5,
                        zIdx: 10
                    }
                }),
                tree_03: W({
                    img: {
                        tint: 11645361
                    },
                    loot: [s("tier_surviv", 2, 3), l("mosin", 1), l("outfitWoodland", 1)]
                }),
                tree_05: W({
                    collision: _e.createCircle(ve.create(0, 0), 2.3),
                    aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(12, 12)),
                    scale: {
                        createMin: 1.2,
                        createMax: 1.3
                    },
                    health: 400,
                    map: {
                        color: 5911831,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-05.img",
                        residue: "map-tree-res-02.img",
                        tint: 16777215,
                        scale: .7,
                        zIdx: 801
                    }
                }),
                tree_05b: W({
                    collision: _e.createCircle(ve.create(0, 0), 2.3),
                    aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(12, 12)),
                    scale: {
                        createMin: 1,
                        createMax: 1
                    },
                    health: 500,
                    loot: [s("tier_shotguns", 1, 1), s("tier_lmgs", 1, 1), l("outfitTreeSpooky", 1)],
                    map: {
                        color: 5911831,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-05.img",
                        residue: "map-tree-res-02.img",
                        tint: 16777215,
                        scale: .7,
                        zIdx: 801
                    }
                }),
                tree_05c: W({
                    collision: _e.createCircle(ve.create(0, 0), 1.05),
                    aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(4, 4)),
                    scale: {
                        createMin: 1.6,
                        createMax: 1.6
                    },
                    health: 200,
                    map: {
                        color: 9064739,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-05c.img",
                        residue: "map-tree-res-02.img",
                        tint: 16777215,
                        scale: .35,
                        zIdx: 801
                    }
                }),
                tree_06: W({
                    img: {
                        sprite: "map-tree-06.img"
                    },
                    map: {
                        color: 7700520
                    }
                }),
                tree_07: W({
                    scale: {
                        createMin: 1,
                        createMax: 1.2
                    },
                    map: {
                        color: 5199637,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-07.img"
                    }
                }),
                tree_07s: W({
                    scale: {
                        createMin: 1,
                        createMax: 1.2
                    },
                    map: {
                        color: 16697057,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-07s.img"
                    },
                    terrain: {
                        grass: !0,
                        beach: !1,
                        riverShore: !0
                    }
                }),
                tree_07sr: W({
                    scale: {
                        createMin: 1,
                        createMax: 1.2
                    },
                    map: {
                        color: 16697057,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-07s.img"
                    },
                    terrain: {
                        grass: !1,
                        beach: !1,
                        riverShore: !0
                    }
                }),
                tree_08: W({
                    scale: {
                        createMin: 1.2,
                        createMax: 1.4
                    },
                    health: 225,
                    map: {
                        color: 11033868,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-08.img",
                        residue: "map-tree-res-02.img",
                        scale: .35
                    }
                }),
                tree_08b: W({
                    scale: {
                        createMin: 1.75,
                        createMax: 2
                    },
                    health: 300,
                    map: {
                        color: 9647632,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-08.img",
                        residue: "map-tree-res-02.img",
                        tint: 14383224,
                        scale: .35,
                        zIdx: 801
                    }
                }),
                tree_08c: W({
                    scale: {
                        createMin: 1.75,
                        createMax: 2
                    },
                    health: 500,
                    loot: [s("tier_shotguns", 2, 3), s("tier_lmgs", 2, 3), l("outfitWoodland", 1)],
                    map: {
                        color: 7817749,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-08.img",
                        residue: "map-tree-res-02.img",
                        tint: 11645361,
                        scale: .35,
                        zIdx: 801
                    }
                }),
                tree_08s: W({
                    scale: {
                        createMin: 1.2,
                        createMax: 1.4
                    },
                    health: 225,
                    map: {
                        color: 16746936,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-08s.img",
                        residue: "map-tree-res-02.img",
                        scale: .35
                    },
                    terrain: {
                        grass: !0,
                        beach: !1,
                        riverShore: !0
                    }
                }),
                tree_08sb: W({
                    scale: {
                        createMin: 1.75,
                        createMax: 2
                    },
                    health: 300,
                    map: {
                        color: 16734619,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-08s.img",
                        residue: "map-tree-res-02.img",
                        tint: 14383224,
                        scale: .35,
                        zIdx: 801
                    },
                    terrain: {
                        grass: !0,
                        beach: !1,
                        riverShore: !0
                    }
                }),
                tree_08sc: W({
                    scale: {
                        createMin: 1.75,
                        createMax: 2
                    },
                    health: 500,
                    loot: [s("tier_shotguns", 2, 3), s("tier_lmgs", 2, 3), l("outfitWoodland", 1)],
                    map: {
                        color: 8268107,
                        scale: 3
                    },
                    img: {
                        sprite: "map-tree-08s.img",
                        residue: "map-tree-res-02.img",
                        tint: 11645361,
                        scale: .35,
                        zIdx: 801
                    }
                }),
                tree_08sr: W({
                    scale: {
                        createMin: 1.2,
                        createMax: 1.4
                    },
                    health: 225,
                    map: {
                        color: 16746936,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-08s.img",
                        residue: "map-tree-res-02.img",
                        scale: .35
                    },
                    terrain: {
                        grass: !1,
                        beach: !1,
                        riverShore: !0
                    }
                }),
                tree_09: W({
                    health: 120,
                    collision: _e.createCircle(ve.create(0, 0), 1.6),
                    aabb: _e.createAabbExtents(ve.create(0, 0), ve.create(5.75, 5.75)),
                    height: .5,
                    map: {
                        display: !0,
                        color: 8602624,
                        scale: 1
                    },
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .75
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-tree-09.img",
                        scale: .5,
                        zIdx: 10
                    }
                }),
                tree_10: W({
                    collision: _e.createCircle(ve.create(0, 0), 1.25),
                    scale: {
                        createMin: .9,
                        createMax: 1.1
                    },
                    map: {
                        color: 7571807,
                        scale: 2.5
                    },
                    img: {
                        sprite: "map-tree-10.img"
                    }
                }),
                tree_11: W({
                    collision: _e.createCircle(ve.create(0, 0), 1.25),
                    scale: {
                        createMin: 1,
                        createMax: 1
                    },
                    img: {
                        sprite: "map-tree-11.img",
                        scale: .5,
                        alpha: .92,
                        zIdx: 201
                    }
                }),
                tree_switch_01: K({
                    img: {
                        sprite: "map-tree-switch-01.img"
                    }
                }),
                tree_switch_02: K({
                    img: {
                        sprite: "map-tree-switch-02.img"
                    }
                }),
                tree_switch_03: K({
                    img: {
                        sprite: "map-tree-switch-03.img"
                    }
                }),
                vat_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .9
                    },
                    collision: _e.createCircle(ve.create(0, 0), 2),
                    height: .5,
                    collidable: !0,
                    destructible: !0,
                    health: 250,
                    reflectBullets: !1,
                    hitParticle: "glassChip",
                    explodeParticle: "windowBreak",
                    loot: [],
                    map: {
                        display: !0,
                        color: 11776947,
                        scale: 1
                    },
                    terrain: {
                        grass: !1,
                        beach: !1
                    },
                    img: {
                        sprite: "map-vat-01.img",
                        residue: "map-vat-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "glass_bullet",
                        punch: "glass_bullet",
                        explode: "window_break_01",
                        enter: "none"
                    }
                },
                vat_02: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .95
                    },
                    collision: _e.createCircle(ve.create(0, 0), 3.1),
                    height: .5,
                    collidable: !0,
                    destructible: !1,
                    health: 1e3,
                    reflectBullets: !1,
                    hitParticle: "glassChip",
                    explodeParticle: "windowBreak",
                    loot: [],
                    map: {
                        display: !0,
                        color: 11776947,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    img: {
                        sprite: "map-vat-02.img",
                        residue: "map-vat-res.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "glass_bullet",
                        punch: "glass_bullet",
                        explode: "window_break_01",
                        enter: "none"
                    }
                },
                vending_01: function(e) {
                    var t = {
                        type: "obstacle",
                        scale: {
                            createMin: 1,
                            createMax: 1,
                            destroy: .75
                        },
                        collision: _e.createAabbExtents(ve.create(0, .15), ve.create(1.7, 1.25)),
                        height: .5,
                        collidable: !0,
                        destructible: !0,
                        health: 150,
                        hitParticle: "blueChip",
                        explodeParticle: ["windowBreak", "lockerBreak"],
                        reflectBullets: !0,
                        loot: [s("tier_vending_soda", 1, 3), l("soda", 1)],
                        map: {
                            display: !1,
                            color: 10925,
                            scale: .875
                        },
                        terrain: {
                            grass: !0,
                            beach: !0
                        },
                        img: {
                            sprite: "map-vending-soda-01.img",
                            residue: "map-vending-res.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            zIdx: 10
                        },
                        sound: {
                            bullet: "wall_bullet",
                            punch: "metal_punch",
                            explode: "vending_break_01",
                            enter: "none"
                        }
                    };
                    return ke.mergeDeep(t, {})
                }(),
                wheel_01: X({
                    button: {
                        interactionRad: 1,
                        interactionText: "game-use",
                        useOnce: !0,
                        useType: "",
                        useDelay: 2.5,
                        useDir: ve.create(-1, 0),
                        useImg: "map-wheel-02.img",
                        sound: {
                            on: "wheel_control_01",
                            off: ""
                        }
                    }
                }),
                wheel_02: X({
                    img: {
                        sprite: "map-wheel-02.img"
                    }
                }),
                wheel_03: X({
                    img: {
                        sprite: "map-wheel-03.img"
                    }
                }),
                woodpile_01: Y({}),
                woodpile_02: Y({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(6, 3)),
                    health: 400,
                    destructible: !0,
                    img: {
                        sprite: "map-woodpile-02.img",
                        residue: "map-woodpile-res-02.img"
                    }
                }),
                bank_window_01: {
                    type: "obstacle",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: 1
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 2)),
                    height: 10,
                    collidable: !0,
                    destructible: !0,
                    isWindow: !0,
                    health: 75,
                    hitParticle: "glassChip",
                    explodeParticle: ["windowBreak", "redPlank"],
                    reflectBullets: !1,
                    loot: [],
                    img: {
                        sprite: "map-building-bank-window-01.img",
                        residue: "map-building-bank-window-res-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    },
                    sound: {
                        bullet: "glass_bullet",
                        punch: "glass_bullet",
                        explode: "window_break_02",
                        enter: "none"
                    }
                },
                house_door_01: T({
                    material: "wood",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2)
                }),
                house_door_02: T({
                    material: "metal",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2),
                    door: {
                        sound: {
                            open: "door_open_02",
                            close: "door_close_02"
                        }
                    },
                    img: {
                        tint: 4934475
                    }
                }),
                house_door_03: T({
                    material: "wood",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.5, 1.75),
                    img: {
                        sprite: "map-door-03.img"
                    }
                }),
                house_door_05: T({
                    material: "glass",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2),
                    img: {
                        sprite: "map-door-05.img"
                    }
                }),
                crossing_door_01: T({
                    material: "metal",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2),
                    door: {
                        canUse: !1,
                        openOnce: !0,
                        sound: {
                            open: "door_open_02",
                            close: "door_close_02"
                        }
                    },
                    img: {
                        tint: 3159362
                    }
                }),
                cell_door_01: T({
                    material: "metal",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2),
                    door: {
                        canUse: !1,
                        openOnce: !0,
                        sound: {
                            open: "door_open_02",
                            close: "door_close_02"
                        }
                    },
                    img: {
                        tint: 1776411
                    }
                }),
                eye_door_01: T({
                    material: "metal",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2),
                    door: {
                        canUse: !1,
                        openOnce: !0,
                        openOneWay: -1,
                        sound: {
                            open: "door_open_02",
                            close: "door_close_02"
                        }
                    },
                    img: {
                        tint: 921102
                    }
                }),
                lab_door_01: P({
                    img: {
                        tint: 5373952
                    }
                }),
                lab_door_02: P({
                    door: {
                        openOneWay: !0,
                        slideOffset: -3.75,
                        casingImg: {
                            pos: ve.create(6, 0)
                        }
                    },
                    img: {
                        tint: 5373952
                    }
                }),
                lab_door_03: P({
                    door: {
                        openOneWay: !0
                    },
                    img: {
                        tint: 5373952
                    }
                }),
                house_window_01: we(),
                house_window_broken_01: xe(),
                lab_window_01: we({
                    destroyType: "lab_window_broken_01"
                }),
                lab_window_broken_01: xe({
                    img: {
                        tint: 1316379
                    }
                }),
                container_05_collider: Z({
                    material: "metal",
                    extents: ve.create(2.75, 6)
                }),
                container_05: {
                    type: "building",
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .5
                    },
                    zIdx: 1,
                    map: {
                        display: !0,
                        color: 11485762,
                        scale: 1
                    },
                    terrain: {
                        grass: !1,
                        beach: !1
                    },
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))]
                        }],
                        imgs: [{
                            sprite: "",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 2.4), ve.create(2.5, 5.75))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 2.4), ve.create(2.5, 5.75))],
                        imgs: [{
                            sprite: "map-building-container-ceiling-05.img",
                            scale: .5,
                            alpha: 1,
                            tint: 11485762
                        }]
                    },
                    mapObjects: [{
                        type: "container_05_collider",
                        pos: ve.create(0, 2.4),
                        scale: 1,
                        ori: 0
                    }]
                },
                greenhouse_01: re({}),
                greenhouse_02: re({
                    floor_images: [{
                        sprite: "map-building-greenhouse-floor-02.img",
                        pos: ve.create(0, 10),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }, {
                        sprite: "map-building-greenhouse-floor-02.img",
                        pos: ve.create(0, -10),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, 21),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }, {
                        sprite: "map-building-porch-01.img",
                        pos: ve.create(0, -21),
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        rot: 2
                    }],
                    ceiling_images: [{
                        sprite: "map-building-greenhouse-ceiling-02.img",
                        scale: 1,
                        alpha: 1,
                        tint: 16777215
                    }],
                    mapObjects: [{
                        type: "glass_wall_10",
                        pos: ve.create(-7, 19.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(-7, -19.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(-12.5, 15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(-12.5, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(-12.5, -15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(-12.5, -5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(7, 19.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(7, -19.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(12.5, 15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(12.5, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(12.5, -15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_10",
                        pos: ve.create(12.5, -5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_door_05",
                        pos: ve.create(2, 19.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_05",
                        pos: ve.create(-2, -19.75),
                        scale: 1,
                        ori: 3
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(-4.5, 14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(-7, 2.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(-7, -2.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(-4.5, -14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(4.5, 14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(7, 2.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(7, -2.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            planter_06: 2,
                            "": 1
                        }),
                        pos: ve.create(4.5, -14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-15, 11),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(-15, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(15.5, -7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(19.5, -7),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "bunker_structure_08b",
                        pos: ve.create(-9.5, -15.5),
                        scale: 1,
                        ori: 0
                    }]
                }),
                bunker_chrys_01: {
                    type: "building",
                    map: {
                        display: !1,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 10), ve.create(3.6, 5.8)),
                            color: 6707790
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 3.25))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-generic-floor-03.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, -.25), ve.create(1.5, 3.25))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, -.25), ve.create(1.5, 3.25))],
                        imgs: [{
                            sprite: "map-bunker-generic-ceiling-02.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_5",
                        pos: ve.create(0, -3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_7",
                        pos: ve.create(-2, .1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_7",
                        pos: ve.create(2, .1),
                        scale: 1,
                        ori: 0
                    }]
                },
                lab_door_chrys: T({
                    destructible: !1,
                    material: "concrete",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.3, 2),
                    door: {
                        canUse: !1,
                        openOnce: !0,
                        openOneWay: !1,
                        openSpeed: 7,
                        autoOpen: !1,
                        autoClose: !1,
                        slideToOpen: !0,
                        slideOffset: 3.75,
                        sound: {
                            open: "door_open_03",
                            close: "door_close_03",
                            error: "door_error_01"
                        },
                        casingImg: {
                            sprite: "map-door-slot-01.img",
                            pos: ve.create(-2, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 1316379,
                            zIdx: 60
                        }
                    },
                    img: {
                        tint: 5373952
                    }
                }),
                bunker_chrys_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(11, -12), ve.create(14.5, 9))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-chamber-floor-01a.img",
                            pos: ve.create(0, 1.85),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-chrys-chamber-floor-01b.img",
                            pos: ve.create(11, -10.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(11, -12), ve.create(14.5, 9))],
                        scopeOut: [_e.createAabbExtents(ve.create(11, -12), ve.create(14.5, 9))],
                        imgs: [{
                            sprite: "map-bunker-chrys-chamber-ceiling-01.img",
                            pos: ve.create(11.5, -11),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }]
                    },
                    puzzle: {
                        solution: "bunker_chrys_01",
                        completeUseType: "lab_door_chrys",
                        completeOffDelay: 1,
                        completeUseDelay: 2,
                        errorResetDelay: 1,
                        pieceResetDelay: 10,
                        sound: {
                            fail: "door_error_01",
                            complete: "none"
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_5",
                        pos: ve.create(0, 4),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_26",
                        pos: ve.create(-3, -8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_9",
                        pos: ve.create(3, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_19",
                        pos: ve.create(14, -3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_25",
                        pos: ve.create(11, -20),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(25, -5.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(25, -17.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(4.5, -4.15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_03",
                        pos: ve.create(8, -4.15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(.5, -16.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(12, -9.5),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(12, -13.5),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "couch_01",
                        pos: ve.create(15.5, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "screen_01",
                        pos: ve.create(23, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "switch_01",
                        pos: ve.create(18.5, -4.25),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "ichi"
                    }, {
                        type: "switch_01",
                        pos: ve.create(21.5, -4.25),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "shi"
                    }, {
                        type: "switch_01",
                        pos: ve.create(18.5, -18.75),
                        scale: 1,
                        ori: 2,
                        puzzlePiece: "ni"
                    }, {
                        type: "switch_01",
                        pos: ve.create(21.5, -18.75),
                        scale: 1,
                        ori: 2,
                        puzzlePiece: "san"
                    }, {
                        type: "lab_door_chrys",
                        pos: ve.create(25.5, -9.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bunker_chrys_compartment_01",
                        pos: ve.create(39.5, -6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_chrys_compartment_02",
                        pos: ve.create(43.5, 19),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_chrys_compartment_03",
                        pos: ve.create(43.5, 43),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_chrys_sublevel_01b: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(11, -12), ve.create(14.5, 9))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-chamber-floor-01a.img",
                            pos: ve.create(0, 1.85),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-chrys-chamber-floor-01b.img",
                            pos: ve.create(11, -10.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(11, -12), ve.create(14.5, 9))],
                        scopeOut: [_e.createAabbExtents(ve.create(11, -12), ve.create(14.5, 9))],
                        imgs: [{
                            sprite: "map-bunker-chrys-chamber-ceiling-01.img",
                            pos: ve.create(11.5, -11),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }]
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_5",
                        pos: ve.create(0, 4),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_26",
                        pos: ve.create(-3, -8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_9",
                        pos: ve.create(3, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_19",
                        pos: ve.create(14, -3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_25",
                        pos: ve.create(11, -20),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(25, -5.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(25, -17.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(4.5, -4.15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(.5, -16.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(12, -9.5),
                        scale: .8,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(12, -13.5),
                        scale: .8,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "couch_01",
                        pos: ve.create(15.5, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "switch_02",
                        pos: ve.create(18.5, -4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "switch_02",
                        pos: ve.create(21.5, -4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "switch_02",
                        pos: ve.create(18.5, -18.75),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "switch_02",
                        pos: ve.create(21.5, -18.75),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(25.5, -9.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bunker_chrys_compartment_01b",
                        pos: ve.create(39.5, -6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_chrys_compartment_02b",
                        pos: ve.create(43.5, 19),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_chrys_compartment_03b",
                        pos: ve.create(43.5, 43),
                        scale: 1,
                        ori: 0
                    }]
                },
                vault_door_chrys_01: T({
                    material: "metal",
                    hinge: ve.create(1, 3.5),
                    extents: ve.create(1, 3.5),
                    img: {
                        sprite: "map-door-02.img"
                    },
                    door: {
                        interactionRad: 1.5,
                        openSpeed: .23,
                        openOneWay: -1,
                        openDelay: 4.1,
                        openOnce: !0,
                        spriteAnchor: ve.create(.2, 1),
                        sound: {
                            open: "none",
                            close: "none",
                            change: "vault_change_01"
                        }
                    }
                }),
                vault_door_chrys_02: T({
                    material: "metal",
                    hinge: ve.create(1, 3.5),
                    extents: ve.create(1, 3.5),
                    img: {
                        sprite: "map-door-02.img"
                    },
                    door: {
                        canUse: !1,
                        spriteAnchor: ve.create(.2, 1)
                    }
                }),
                bunker_chrys_compartment_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 2), ve.create(14, 13))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-floor-01a.img",
                            pos: ve.create(-12.5, -4.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-chrys-compartment-floor-01b.img",
                            pos: ve.create(3.5, 2),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 2), ve.create(14, 13))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 2), ve.create(14, 13))],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-ceiling-01a.img",
                            pos: ve.create(-10.5, -2.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }, {
                            sprite: "map-bunker-chrys-compartment-ceiling-01b.img",
                            pos: ve.create(4, 3),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }]
                    },
                    puzzle: {
                        solution: "bunker_chrys_02",
                        completeUseType: "vault_door_chrys_01",
                        completeOffDelay: 1,
                        completeUseDelay: 5.5,
                        errorResetDelay: 1,
                        pieceResetDelay: 10,
                        sound: {
                            fail: "door_error_01",
                            complete: "vault_change_03"
                        }
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-11, -2),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-11, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_27",
                        pos: ve.create(.5, -9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_42",
                        pos: ve.create(15.5, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_34",
                        pos: ve.create(-7.5, 17),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_column_4x8",
                        pos: ve.create(-3.5, 14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_column_4x8",
                        pos: ve.create(11.5, 14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            crate_01: 2,
                            crate_04: 1
                        }),
                        pos: ve.create(1.5, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            crate_01: 2,
                            crate_04: 1
                        }),
                        pos: ve.create(1.5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            crate_01: 2,
                            crate_04: 1
                        }),
                        pos: ve.create(6.5, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            crate_01: 2,
                            crate_04: 1
                        }),
                        pos: ve.create(6.5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "vault_door_chrys_01",
                        pos: ve.create(.5, 15.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "loot_tier_chrys_01",
                        pos: ve.create(12, -5.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_chrys_compartment_01b: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 2), ve.create(14, 13))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-floor-01a.img",
                            pos: ve.create(-12.5, -4.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-chrys-compartment-floor-01c.img",
                            pos: ve.create(3.5, 2),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 2), ve.create(14, 13))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 2), ve.create(14, 13))],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-ceiling-01a.img",
                            pos: ve.create(-10.5, -2.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }, {
                            sprite: "map-bunker-chrys-compartment-ceiling-01b.img",
                            pos: ve.create(4, 3),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }]
                    },
                    puzzle: {
                        solution: "bunker_chrys_02",
                        completeUseType: "vault_door_chrys_02",
                        completeOffDelay: 1,
                        completeUseDelay: 5.5,
                        errorResetDelay: 1,
                        pieceResetDelay: 10,
                        sound: {
                            fail: "door_error_01",
                            complete: "vault_change_03"
                        }
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-11, -2),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-11, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_27",
                        pos: ve.create(.5, -9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_42",
                        pos: ve.create(15.5, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_34",
                        pos: ve.create(-7.5, 17),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_column_4x8",
                        pos: ve.create(-3.5, 14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_column_4x8",
                        pos: ve.create(11.5, 14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(-.5, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(2.5, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(5.5, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(8.5, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(-.5, 4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(8.5, 4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(-.5, 1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(8.5, 1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(-.5, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(2.5, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(5.5, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            planter_07: 2,
                            "": 1
                        }),
                        pos: ve.create(8.5, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "vault_door_chrys_02",
                        pos: ve.create(.5, 15.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_chrys_compartment_02: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 10))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-floor-02a.img",
                            pos: ve.create(0, -2.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-chrys-compartment-floor-02b.img",
                            pos: ve.create(0, 9.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 11))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 11))],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-ceiling-02a.img",
                            pos: ve.create(0, 8.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }, {
                            sprite: "map-bunker-chrys-compartment-ceiling-02b.img",
                            pos: ve.create(0, -2.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-8, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(8, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-7.5, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(7.5, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-4, 12),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(4, 12),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "loot_tier_chrys_02",
                        pos: ve.create(8, -6.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_12",
                        pos: ve.create(0, 5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_06",
                        pos: ve.create(-8.5, 1.5),
                        scale: 1,
                        ori: 1
                    }]
                },
                bunker_chrys_compartment_02b: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 10))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-floor-02a.img",
                            pos: ve.create(0, -2.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-chrys-compartment-floor-02c.img",
                            pos: ve.create(0, 9.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 11))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 11))],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-ceiling-02a.img",
                            pos: ve.create(0, 8.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }, {
                            sprite: "map-bunker-chrys-compartment-ceiling-02b.img",
                            pos: ve.create(0, -2.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-8, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(8, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-7.5, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(7.5, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-4, 12),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(4, 12),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "loot_tier_chrys_01",
                        pos: ve.create(8, -6.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "control_panel_06",
                        pos: ve.create(-8.5, 1.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_06",
                        pos: ve.create(8.5, 1.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "stone_wall_int_4",
                        pos: ve.create(0, 10.9),
                        scale: 1,
                        ori: 1
                    }]
                },
                bunker_chrys_compartment_03: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, -1), ve.create(10, 14))]
                        }, {
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 11), ve.create(10, 4)), _e.createAabbExtents(ve.create(-7, -3), ve.create(3, 3)), _e.createAabbExtents(ve.create(8, -3), ve.create(2, 3))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-floor-03a.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 13))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 13))],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-ceiling-03a.img",
                            pos: ve.create(0, -9.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731,
                            rot: 0
                        }, {
                            sprite: "map-bunker-chrys-compartment-ceiling-03b.img",
                            pos: ve.create(0, 3),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731,
                            rot: 0
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(-7.5, -8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(7.5, -8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-11, -7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(11, -7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(-11.5, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(11.5, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(0, 13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(0, 4.75),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(3, .5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-3, .5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "wheel_03",
                        pos: ve.create(0, 9.1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wheel_03",
                        pos: ve.create(-7.6, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wheel_03",
                        pos: ve.create(7.6, 1),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "loot_tier_chrys_03",
                        pos: ve.create(0, -5.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_chrys_compartment_03b: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, -1), ve.create(10, 14))]
                        }, {
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 11), ve.create(10, 4)), _e.createAabbExtents(ve.create(-7, -3), ve.create(3, 3)), _e.createAabbExtents(ve.create(8, -3), ve.create(2, 3))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-floor-03a.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 13))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 13))],
                        imgs: [{
                            sprite: "map-bunker-chrys-compartment-ceiling-03a.img",
                            pos: ve.create(0, -9.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731,
                            rot: 0
                        }, {
                            sprite: "map-bunker-chrys-compartment-ceiling-03b.img",
                            pos: ve.create(0, 3),
                            scale: 1,
                            alpha: 1,
                            tint: 6182731,
                            rot: 0
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(-7.5, -8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(7.5, -8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-11, -7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(11, -7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(-11.5, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(11.5, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(0, 13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(0, 4.75),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(3, .5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-3, .5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "wheel_03",
                        pos: ve.create(0, 9.1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wheel_03",
                        pos: ve.create(-7.6, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wheel_02",
                        pos: ve.create(7.6, 1),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "case_05",
                        pos: ve.create(0, -5.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_structure_08: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    ori: 0,
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(5, 5), ve.create(15, 15))],
                    layers: [{
                        type: "bunker_chrys_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_chrys_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(11.5, -12.25), ve.create(14, 9.5)), _e.createAabbExtents(ve.create(40, 20), ve.create(14.45, 35))]
                },
                bunker_structure_08b: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    ori: 0,
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(5, 5), ve.create(15, 15))],
                    layers: [{
                        type: "bunker_chrys_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_chrys_sublevel_01b",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(11.5, -12.25), ve.create(14, 9.5)), _e.createAabbExtents(ve.create(40, 20), ve.create(14.45, 35))]
                },
                hedgehog_wall: Z({
                    material: "metal",
                    extents: ve.create(3, .5),
                    height: .5,
                    map: {
                        display: !0,
                        color: 5854285,
                        scale: 1
                    }
                }),
                hedgehog_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !1,
                        beach: !0
                    },
                    floor: {
                        surfaces: [],
                        imgs: [{
                            sprite: "map-hedgehog-01.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "hedgehog_wall",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "hedgehog_wall",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                cache_01: f({}),
                cache_02: f({
                    mapObjects: [{
                        type: "tree_03",
                        pos: ve.create(0, 0),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "decal_initiative_01",
                        pos: ve.create(0, 0),
                        scale: 1.2,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                cache_03: f({
                    mapObjects: [{
                        type: "bush_06",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_leaf_pile",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                cache_04: f({
                    mapObjects: [{
                        type: "pumpkin_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_light_01",
                        pos: ve.create(0, 0),
                        scale: 1.5,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                cache_05: f({
                    mapObjects: [{
                        type: "pumpkin_02",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_light_01",
                        pos: ve.create(0, 0),
                        scale: 1.5,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                cache_06: f({
                    mapObjects: [{
                        type: "bush_07",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_leaf_pile",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                cache_07: f({
                    mapObjects: [{
                        type: "barrel_01b",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_initiative_01",
                        pos: ve.create(0, 0),
                        scale: 1.1,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                candle_lit_01: f({
                    mapObjects: [{
                        type: "candle_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_light_02",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                candle_lit_02: f({
                    mapObjects: [{
                        type: "candle_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_light_03",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }]
                }),
                hut_wall_int_4: Z({
                    material: "wood",
                    extents: ve.create(.5, 2),
                    hitParticle: "tanChip",
                    img: m("map-wall-04.img", 4608e3)
                }),
                hut_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-05.img", 4608e3)
                }),
                hut_wall_int_6: Z({
                    material: "wood",
                    extents: ve.create(.5, 3),
                    hitParticle: "tanChip",
                    img: m("map-wall-06.img", 4608e3)
                }),
                hut_wall_int_12: Z({
                    material: "wood",
                    extents: ve.create(.5, 6),
                    hitParticle: "tanChip",
                    img: m("map-wall-12.img", 4608e3)
                }),
                hut_wall_int_14: Z({
                    material: "wood",
                    extents: ve.create(.5, 7),
                    hitParticle: "tanChip",
                    img: m("map-wall-14.img", 4608e3)
                }),
                hut_window_open_01: xe({
                    img: {
                        tint: 7681026
                    }
                }),
                hut_01: ae({}),
                hut_01x: ae({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-hut-ceiling-01.img",
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(4.5, .5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-05.img",
                            pos: ve.create(-.5, 5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }]
                    }
                }),
                hut_02: ae({
                    ceilingImg: "map-building-hut-ceiling-02.img",
                    specialLoot: "pot_02"
                }),
                hut_02x: ae({
                    specialLoot: "pot_02",
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-hut-ceiling-02.img",
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(4.5, .5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-05.img",
                            pos: ve.create(.5, -4.5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }]
                    }
                }),
                warehouse_wall_side: Z({
                    material: "metal",
                    extents: ve.create(25, .6)
                }),
                warehouse_wall_edge: Z({
                    material: "metal",
                    extents: ve.create(.6, 3.2)
                }),
                warehouse_01: ge({
                    topLeftObs: "crate_01",
                    topRightObs: "crate_01",
                    botRightObs: "crate_01",
                    ignoreMapSpawnReplacement: !0
                }),
                warehouse_01b: ge({
                    topLeftObs: "crate_01",
                    topRightObs: "crate_01",
                    botRightObs: "crate_01",
                    decoration_01: "candle_lit_01",
                    ignoreMapSpawnReplacement: !0
                }),
                warehouse_01f: ge({
                    topLeftObs: "crate_01",
                    topRightObs: "crate_01",
                    botRightObs: "crate_01",
                    ignoreMapSpawnReplacement: !1
                }),
                warehouse_01x: ge({
                    topLeftObs: "crate_01",
                    topRightObs: "crate_01",
                    botRightObs: "crate_01",
                    ignoreMapSpawnReplacement: !0,
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-warehouse-ceiling-01.img",
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(7.5, 5),
                            scale: .9,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-05.img",
                            pos: ve.create(-8.5, 4),
                            scale: .9,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(22.25, 11.25),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(-22.25, -11.25),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }]
                    }
                }),
                warehouse_02: ye({}),
                warehouse_02x: ye({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-warehouse-ceiling-02.img",
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(0, 4),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(20.25, -9.75),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(-20.25, 9.75),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }]
                    }
                }),
                warehouse_complex_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(26, 70.5), ve.create(47, 7.5)),
                            color: 5855577
                        }, {
                            collider: _e.createAabbExtents(ve.create(15.5, 52.5), ve.create(57.5, 10.5)),
                            color: 5855577
                        }, {
                            collider: _e.createAabbExtents(ve.create(33, 11), ve.create(75, 31)),
                            color: 5855577
                        }, {
                            collider: _e.createAabbExtents(ve.create(5, -30), ve.create(47, 10)),
                            color: 5855577
                        }, {
                            collider: _e.createAabbExtents(ve.create(-39.75, 11.25), ve.create(2, 51)),
                            color: 16109568
                        }, {
                            collider: _e.createCircle(ve.create(-39, 55), 1.25),
                            color: 6310464
                        }, {
                            collider: _e.createCircle(ve.create(-39, 20.5), 1.25),
                            color: 6310464
                        }, {
                            collider: _e.createCircle(ve.create(-39, 2), 1.25),
                            color: 6310464
                        }, {
                            collider: _e.createCircle(ve.create(-39, -31.5), 1.25),
                            color: 6310464
                        }, {
                            collider: _e.createAabbExtents(ve.create(-28, -30), ve.create(2, 2)),
                            color: 6697728
                        }, {
                            collider: _e.createAabbExtents(ve.create(-23, -33), ve.create(2, 2)),
                            color: 6697728
                        }, {
                            collider: _e.createAabbExtents(ve.create(7, 70), ve.create(2, 2)),
                            color: 6697728
                        }, {
                            collider: _e.createAabbExtents(ve.create(12, 72), ve.create(2, 2)),
                            color: 6697728
                        }, {
                            collider: _e.createCircle(ve.create(-26.5, 54.75), 1.75),
                            color: 8026746
                        }, {
                            collider: _e.createCircle(ve.create(-23.5, 57), 1.75),
                            color: 8026746
                        }, {
                            collider: _e.createCircle(ve.create(84, -15.5), 1.75),
                            color: 8026746
                        }, {
                            collider: _e.createCircle(ve.create(40, -35), 1.5),
                            color: 8026746
                        }, {
                            collider: _e.createCircle(ve.create(65, 61), 1.5),
                            color: 8026746
                        }, {
                            collider: _e.createAabbExtents(ve.create(44.5, -25), ve.create(1.4, 3.1)),
                            color: 13278307
                        }, {
                            collider: _e.createAabbExtents(ve.create(58, 47.5), ve.create(1.4, 3.1)),
                            color: 13278307
                        }]
                    },
                    terrain: {
                        waterEdge: {
                            dir: ve.create(-1, 0),
                            distMin: 72,
                            distMax: 72
                        }
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(26, 70.5), ve.create(47, 7.5)), _e.createAabbExtents(ve.create(15.5, 52.5), ve.create(57.5, 10.5)), _e.createAabbExtents(ve.create(33, 11), ve.create(75, 31)), _e.createAabbExtents(ve.create(5, -30), ve.create(47, 10))],
                    floor: {
                        surfaces: [{
                            type: "asphalt",
                            collision: [_e.createAabbExtents(ve.create(26, 70.5), ve.create(47, 7.5)), _e.createAabbExtents(ve.create(15.5, 52.5), ve.create(57.5, 10.5)), _e.createAabbExtents(ve.create(33, 11), ve.create(75, 31)), _e.createAabbExtents(ve.create(5, -30), ve.create(47, 10))]
                        }],
                        imgs: [{
                            sprite: "map-complex-warehouse-floor-01.img",
                            pos: ve.create(-31.5, 37.25),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-complex-warehouse-floor-01.img",
                            pos: ve.create(-31.5, -14.25),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215,
                            mirrorY: !0
                        }, {
                            sprite: "map-complex-warehouse-floor-02.img",
                            pos: ve.create(25.95, 19),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-complex-warehouse-floor-03.img",
                            pos: ve.create(90.4, 26.5),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215,
                            mirrorY: !0
                        }, {
                            sprite: "map-complex-warehouse-floor-03.img",
                            pos: ve.create(90.4, -4.5),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "warehouse_02",
                        pos: ve.create(5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "warehouse_02",
                        pos: ve.create(70, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "warehouse_02",
                        pos: ve.create(18, 55),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bollard_01",
                        pos: ve.create(-39, 55),
                        scale: 1,
                        ori: 2
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_06: .12
                        }),
                        pos: ve.create(-37.5, 38),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bollard_01",
                        pos: ve.create(-39, 20.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bollard_01",
                        pos: ve.create(-39, 2),
                        scale: 1,
                        ori: 2
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_06: .12
                        }),
                        pos: ve.create(-37.5, -15),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bollard_01",
                        pos: ve.create(-39, -31.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "crate_01",
                        pos: ve.create(-28, -30),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-23, -33),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "container_04",
                        pos: ve.create(-11.5, -26.575),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(-6, -29),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(9.5, -29),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "container_04",
                        pos: ve.create(15, -26.575),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "shack_02",
                        pos: ve.create(37, -30),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(44.5, -25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(84, -15.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(-3, 22),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_04",
                        pos: ve.create(-5.425, 27.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(-3, 33),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_04",
                        pos: ve.create(28, 22),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_04",
                        pos: ve.create(28, 27.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_04",
                        pos: ve.create(28, 33),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(53, 22),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "container_04",
                        pos: ve.create(55.425, 27.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(53, 33),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "container_04",
                        pos: ve.create(84, 22),
                        scale: 1,
                        ori: 3
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1,
                            container_05: 2,
                            container_06: .12,
                            "": .75
                        }),
                        pos: ve.create(86.425, 27.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-26.5, 54.75),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-23.5, 57),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(7, 70),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(12, 72),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "shack_02",
                        pos: ve.create(60, 58),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(58, 47.5),
                        scale: 1,
                        ori: 1
                    }]
                },
                logging_complex_01: oe({}),
                logging_complex_01s: oe({
                    groundTintLt: 3361294,
                    groundTintDk: 2437648
                }),
                logging_complex_02: ne({}),
                logging_complex_02s: ne({
                    groundTintDk: 2437648,
                    tree_08c: "tree_08sc"
                }),
                junkyard_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: []
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    ori: 0,
                    mapObstacleBounds: [_e.createCircle(ve.create(0, 0), 37)],
                    mapGroundPatches: [{
                        bound: _e.createAabbExtents(ve.create(-8.5, 24), ve.create(13, 9)),
                        color: 1446402
                    }, {
                        bound: _e.createAabbExtents(ve.create(26.75, 8.5), ve.create(8, 5.5)),
                        color: 1446402
                    }, {
                        bound: _e.createAabbExtents(ve.create(23.75, -15.5), ve.create(7, 5.5)),
                        color: 1446402
                    }, {
                        bound: _e.createAabbExtents(ve.create(-23.5, -10), ve.create(4.75, 3.5)),
                        color: 1446402
                    }],
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: []
                        }],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "tree_05b",
                        pos: ve.create(0, 0),
                        scale: 1.5,
                        ori: 0
                    }, {
                        type: "candle_lit_01",
                        pos: ve.create(-9, 3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "candle_lit_01",
                        pos: ve.create(9, 3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "candle_lit_01",
                        pos: ve.create(-6.5, -7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "candle_lit_01",
                        pos: ve.create(6.5, -7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "candle_lit_01",
                        pos: ve.create(0, 9),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-2.5, 29.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-6.5, 29),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-10.5, 29.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-14.5, 30),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(1.5, 23.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-2.5, 24.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-6.5, 24),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-10.5, 24),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-14.5, 23.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-18.5, 24.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-2.5, 18.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-6.5, 18),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-10.5, 18.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            refrigerator_01: 3,
                            "": 1
                        }),
                        pos: ve.create(-14.5, 19),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            table_01: 3
                        }),
                        pos: ve.create(22.5, 6),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            table_01: 3
                        }),
                        pos: ve.create(29, 6),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            table_01: 3
                        }),
                        pos: ve.create(24.5, 11),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            table_01: 3
                        }),
                        pos: ve.create(31, 11),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            oven_01: 3,
                            "": 1
                        }),
                        pos: ve.create(20, -13),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            oven_01: 3,
                            "": 1
                        }),
                        pos: ve.create(24, -12.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            oven_01: 3,
                            "": 1
                        }),
                        pos: ve.create(28, -13.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            oven_01: 3,
                            "": 1
                        }),
                        pos: ve.create(22, -18.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            oven_01: 3,
                            "": 1
                        }),
                        pos: ve.create(26, -18.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            cache_03: 3
                        }),
                        pos: ve.create(-.5, -23),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            cache_03: 3
                        }),
                        pos: ve.create(-6, -24),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            cache_03: 3
                        }),
                        pos: ve.create(-3, -27.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            vending_01: 3
                        }),
                        pos: ve.create(-25.5, -9.25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            "": 1,
                            vending_01: 3
                        }),
                        pos: ve.create(-22, -11),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }]
                },
                archway_column_1: Z({
                    material: "wood",
                    extents: ve.create(1, 1),
                    img: Object.assign(m("map-column-01.img", 7290644), {
                        residue: "map-drawers-res.img"
                    })
                }),
                archway_01: {
                    type: "building",
                    map: {
                        display: !0,
                        color: 7813914,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 1))]
                        }],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(10.5, 2))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(10.5, 2))],
                        disableScopeIn: !0,
                        imgs: [{
                            sprite: "map-building-archway-ceiling-01.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }],
                        destroy: {
                            wallCount: 1,
                            particle: "archwayBreak",
                            particleCount: 15,
                            residue: "map-archway-res-01.img"
                        }
                    },
                    mapObjects: [{
                        type: "archway_column_1",
                        pos: ve.create(-10, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "archway_column_1",
                        pos: ve.create(10, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_1",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                desert_town_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: []
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(65, 102)), _e.createAabbExtents(ve.create(0, 0), ve.create(20, 120)), _e.createAabbExtents(ve.create(-60, 40), ve.create(10, 5))],
                    mapGroundPatches: [{
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(60, 95)),
                        color: 12813354,
                        roughness: .1,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(10, 96)),
                        color: 9396511,
                        roughness: .1,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-33, 40), ve.create(27, 5)),
                        color: 9396511,
                        roughness: .1,
                        offsetDist: 1
                    }],
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(55, 25))]
                        }],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "archway_01",
                        pos: ve.create(0, 95),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "archway_01",
                        pos: ve.create(0, -95),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "police_01",
                        pos: ve.create(40, -50),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "cabin_01",
                        pos: ve.create(37, 20),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "cabin_01",
                        pos: ve.create(35, 70),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "barn_01",
                        pos: ve.create(-34, -60),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "bank_01b",
                        pos: ve.create(-35, 0),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "saloon_structure_01",
                        pos: ve.create(-35, 70),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(5, 76),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-6.75, 71),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(-6.75, 67),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(-50, 42),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-4, 44),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-1.5, 46.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_18",
                        pos: ve.create(.25, 42),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-21, 31.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(-15, 31.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(13, 34),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(7, 8),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-7.25, -12.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(-7.25, -22),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_18",
                        pos: ve.create(2.5, -56.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-1.5, -59),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(1.5, -61),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(-5.5, -74),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(7.5, -82),
                        scale: 1,
                        ori: 0
                    }]
                },
                desert_town_02: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: []
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, -3), ve.create(50, 60)), _e.createAabbExtents(ve.create(0, 0), ve.create(60, 15))],
                    mapGroundPatches: [{
                        bound: _e.createAabbExtents(ve.create(0, -3), ve.create(45, 55)),
                        color: 12813354,
                        roughness: .1,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(46, 10)),
                        color: 9396511,
                        roughness: .1,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(0, 2), ve.create(5, 50.5)),
                        color: 9396511,
                        roughness: .1,
                        offsetDist: 1
                    }],
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))]
                        }],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "archway_01",
                        pos: ve.create(45, 0),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "archway_01",
                        pos: ve.create(-45, 0),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_red_01",
                        pos: ve.create(24, 30),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "house_red_02",
                        pos: ve.create(-24, 30),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "bank_01b",
                        pos: ve.create(-10, -34),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "shack_01",
                        pos: ve.create(31, -26),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "outhouse_01",
                        pos: ve.create(28, -46),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_06",
                        pos: ve.create(29, -36),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-4.75, 34),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(-4.75, 30),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(-9, 10),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_18",
                        pos: ve.create(2.5, 1.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-2, -1),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(1.5, -3),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(16, -10),
                        scale: 1,
                        ori: 1
                    }]
                },
                statue_01: q({
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .5
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.4, 4.4)),
                    destructible: !1,
                    map: {
                        display: !0,
                        color: 5723991,
                        scale: 1
                    },
                    img: {
                        sprite: "map-statue-01.img",
                        scale: .5
                    }
                }),
                statue_03: q({
                    stonePlated: !0,
                    health: 500,
                    height: 10,
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .85
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.4, 4.4)),
                    destructible: !0,
                    map: {
                        display: !0,
                        color: 5723991,
                        scale: 1
                    },
                    img: {
                        sprite: "map-statue-03.img",
                        scale: .5,
                        residue: ""
                    }
                }),
                statue_04: q({
                    stonePlated: !0,
                    health: 500,
                    height: 10,
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .85
                    },
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4.4, 4.4)),
                    destructible: !0,
                    map: {
                        display: !0,
                        color: 5723991,
                        scale: 1
                    },
                    img: {
                        sprite: "map-statue-04.img",
                        scale: .5,
                        residue: ""
                    }
                }),
                statue_top_01: q({
                    health: 500,
                    height: 10,
                    collision: _e.createCircle(ve.create(0, 0), 2.45),
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .8
                    },
                    destructible: !0,
                    map: {
                        display: !1,
                        color: 5723991,
                        scale: 1
                    },
                    img: {
                        sprite: "map-statue-top-01.img",
                        residue: "",
                        scale: .5,
                        zIdx: 60
                    }
                }),
                statue_top_02: q({
                    health: 500,
                    height: 10,
                    collision: _e.createCircle(ve.create(0, 0), 2.45),
                    scale: {
                        createMin: 1,
                        createMax: 1,
                        destroy: .8
                    },
                    destructible: !0,
                    map: {
                        display: !1,
                        color: 5723991,
                        scale: 1
                    },
                    img: {
                        sprite: "map-statue-top-02.img",
                        residue: "",
                        scale: .5,
                        zIdx: 60
                    }
                }),
                statue_structure_01: {
                    type: "building",
                    ori: 0,
                    terrain: {},
                    floor: {
                        surfaces: [],
                        imgs: [{
                            sprite: "",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "statue_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "statue_top_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                statue_structure_02: {
                    type: "building",
                    ori: 0,
                    terrain: {},
                    floor: {
                        surfaces: [],
                        imgs: [{
                            sprite: "",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "statue_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "statue_top_02",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                statue_building_03: y({
                    statue: "statue_03"
                }),
                statue_underground_03: w({
                    crate: "crate_02d"
                }),
                statue_structure_03: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 5), ve.create(7.5, 12.5))],
                    layers: [{
                        type: "statue_building_03",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "statue_underground_03",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(-1, 0), ve.create(2.6, 2)),
                        downDir: ve.create(1, 0)
                    }],
                    mask: [_e.createAabbExtents(ve.create(5.7, 0), ve.create(4, 4))]
                },
                statue_building_04: y({
                    statue: "statue_04"
                }),
                statue_underground_04: w({
                    crate: "crate_22d"
                }),
                statue_structure_04: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 5), ve.create(7.5, 12.5))],
                    layers: [{
                        type: "statue_building_04",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "statue_underground_04",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(-1, 0), ve.create(2.6, 2)),
                        downDir: ve.create(1, 0)
                    }],
                    mask: [_e.createAabbExtents(ve.create(5.7, 0), ve.create(4, 4))]
                },
                river_town_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(70.75, .5), ve.create(30, 54.5)),
                            color: 3815994
                        }, {
                            collider: _e.createAabbExtents(ve.create(77.5, 64), ve.create(23, 10)),
                            color: 3815994
                        }, {
                            collider: _e.createAabbExtents(ve.create(111, -29.5), ve.create(10.5, 24.5)),
                            color: 3815994
                        }, {
                            collider: _e.createAabbExtents(ve.create(50, 0), ve.create(4.4, 4.4)),
                            color: 5723991
                        }]
                    },
                    terrain: {
                        bridge: {
                            nearbyWidthMult: 1
                        },
                        spawnPriority: 100
                    },
                    bridgeLandBounds: [_e.createAabbExtents(ve.create(-41, 0), ve.create(6, 10)), _e.createAabbExtents(ve.create(41, 0), ve.create(6, 10)), _e.createAabbExtents(ve.create(81, 0), ve.create(40, 54)), _e.createAabbExtents(ve.create(78, 64), ve.create(23, 10)), _e.createAabbExtents(ve.create(-76, -22), ve.create(36, 24)), _e.createAabbExtents(ve.create(-72, 22), ve.create(27, 25))],
                    bridgeWaterBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(5, 5))],
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(71, 0), ve.create(31, 56)), _e.createAabbExtents(ve.create(77, 65), ve.create(24, 10)), _e.createAabbExtents(ve.create(112, -30), ve.create(10, 26)), _e.createAabbExtents(ve.create(106, 19.5), ve.create(8, 7.25)), _e.createAabbExtents(ve.create(-71, 32), ve.create(27, 15)), _e.createAabbExtents(ve.create(-71, 16), ve.create(8, 6)), _e.createAabbExtents(ve.create(-75, -34), ve.create(40, 19)), _e.createAabbExtents(ve.create(-57, -10), ve.create(5, 11)), _e.createAabbExtents(ve.create(-86, -10), ve.create(5, 11)), _e.createAabbExtents(ve.create(-21, 0), ve.create(100, 8)), _e.createAabbExtents(ve.create(-109, 30), ve.create(7, 7.25)), _e.createAabbExtents(ve.create(0, 0), ve.create(40, 15))],
                    mapGroundPatches: [{
                        bound: _e.createAabbExtents(ve.create(-20, 0), ve.create(100, 6)),
                        color: 6632211,
                        roughness: .05,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-71, 10), ve.create(2, 9)),
                        color: 6632211,
                        roughness: 0,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-57, -10), ve.create(2, 9)),
                        color: 6632211,
                        roughness: 0,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-109, 30), ve.create(6, 6.25)),
                        color: 3293977,
                        roughness: .05,
                        offsetDist: .5
                    }, {
                        bound: _e.createAabbExtents(ve.create(-86, -10), ve.create(2, 9)),
                        color: 6632211,
                        roughness: 0,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(106, 19.5), ve.create(7, 6.25)),
                        color: 3293977,
                        roughness: .05,
                        offsetDist: .5
                    }],
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))]
                        }, {
                            type: "asphalt",
                            collision: [_e.createAabbExtents(ve.create(70.75, .5), ve.create(30, 54.5)), _e.createAabbExtents(ve.create(77.5, 64), ve.create(23, 10)), _e.createAabbExtents(ve.create(111, -29.5), ve.create(10.5, 24.5))]
                        }],
                        imgs: [{
                            sprite: "map-complex-warehouse-floor-04.img",
                            pos: ve.create(81, 10),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "bridge_xlg_structure_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barn_01",
                        pos: ve.create(-71, 30),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "house_red_01",
                        pos: ve.create(-56, -30),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_red_02",
                        pos: ve.create(-96, -30),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(-68, 2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            crate_02: 1,
                            crate_01: 3
                        }),
                        pos: ve.create(-85, 1),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            crate_02: 1,
                            crate_01: 3
                        }),
                        pos: ve.create(-90, -1),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_02f",
                        pos: ve.create(-106.5, 32.25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-111.25, 32.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-108, 27.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "statue_structure_01",
                        pos: ve.create(-50, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(45, 36),
                        scale: 1,
                        ori: 2
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(51, 36),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "shack_02",
                        pos: ve.create(47, 20),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "warehouse_02",
                        pos: ve.create(78, 40),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(95, 44),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "statue_structure_02",
                        pos: ve.create(50, 0),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "crate_01",
                        pos: ve.create(74.5, -.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(79.5, .25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(106, 22),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(104.5, 17.25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_22",
                        pos: ve.create(109.25, 17.25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(85, -13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(45, -36),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "shack_02",
                        pos: ve.create(47, -20),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "warehouse_02",
                        pos: ve.create(86, -30),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(72, -47),
                        scale: 1,
                        ori: 1
                    }]
                },
                river_town_02: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: []
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    oris: [0, 1],
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(61, -3), ve.create(24, 21)), _e.createAabbExtents(ve.create(46, -36), ve.create(6, 14)), _e.createAabbExtents(ve.create(-68, 0), ve.create(27, 8)), _e.createAabbExtents(ve.create(0, 0), ve.create(14, 14)), _e.createAabbExtents(ve.create(-80, 32), ve.create(4, 4)), _e.createAabbExtents(ve.create(-16, 13), ve.create(5, 2.5)), _e.createAabbExtents(ve.create(16, -13), ve.create(5, 2.5)), _e.createAabbExtents(ve.create(-76.5, 19.5), ve.create(2.5, 2.5)), _e.createAabbExtents(ve.create(-62, -18), ve.create(2.5, 2.5))],
                    mapGroundPatches: [{
                        bound: _e.createAabbExtents(ve.create(-5, 0), ve.create(70, 6)),
                        color: 9585940,
                        roughness: .05,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-71, 10), ve.create(2, 9)),
                        color: 9585940,
                        roughness: .05,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-76, 19), ve.create(10.5, 8)),
                        color: 9585940,
                        roughness: .1,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-57, -10), ve.create(2, 9)),
                        color: 9585940,
                        roughness: .05,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(-63, -19), ve.create(11.5, 8.5)),
                        color: 9585940,
                        roughness: .1,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(14, 10)),
                        color: 8405016,
                        roughness: .3,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(9, 22)),
                        color: 8405016,
                        roughness: .3,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(4, 33)),
                        color: 8405016,
                        roughness: .3,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(61, -3), ve.create(22, 19)),
                        color: 3815994,
                        roughness: .15,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(45, -34), ve.create(5.75, 14)),
                        color: 3815994,
                        roughness: .15,
                        offsetDist: 1
                    }, {
                        bound: _e.createAabbExtents(ve.create(69, -10), ve.create(4, 3.75)),
                        color: 14657367,
                        roughness: .2,
                        offsetDist: 1
                    }],
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))]
                        }, {
                            type: "asphalt",
                            collision: [_e.createAabbExtents(ve.create(61, -3), ve.create(22, 19)), _e.createAabbExtents(ve.create(45, -34), ve.create(5.75, 14))]
                        }],
                        imgs: [{
                            sprite: "map-complex-warehouse-floor-05.img",
                            pos: ve.create(81, 10),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "stone_06",
                        pos: ve.create(-16, 13),
                        scale: 1,
                        ori: 0,
                        inheritOri: !0
                    }, {
                        type: "stone_06",
                        pos: ve.create(16, -13),
                        scale: 1,
                        ori: 0,
                        inheritOri: !0
                    }, {
                        type: "sandbags_02",
                        pos: ve.create(-68, 2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            crate_02: 1,
                            crate_01: 4
                        }),
                        pos: ve.create(-85, 1),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            crate_02: 1,
                            crate_01: 4
                        }),
                        pos: ve.create(-90, -1),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "statue_structure_03",
                        pos: ve.create(-50, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-80, 32),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            crate_02: 1,
                            crate_01: 4
                        }),
                        pos: ve.create(-76.5, 19.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            crate_02: 1,
                            crate_01: 4
                        }),
                        pos: ve.create(-62, -18),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "statue_structure_04",
                        pos: ve.create(50, 0),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "tree_06",
                        pos: ve.create(69, -10),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(74.5, -.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(79.5, .25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: c({
                            container_01: 1,
                            container_02: 1,
                            container_03: 1
                        }),
                        pos: ve.create(45, -36),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_05c",
                        pos: ve.create(0, 2),
                        scale: 2,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "case_05",
                        pos: ve.create(0, -2),
                        scale: 1,
                        ori: 0,
                        inheritOri: !0
                    }]
                },
                shack_wall_top: Z({
                    material: "wood",
                    extents: ve.create(5.6, .35),
                    height: 10,
                    img: m("map-wall-shack-top.img")
                }),
                shack_wall_side_left: Z({
                    material: "wood",
                    extents: ve.create(.35, 3.43),
                    height: 10,
                    img: m("map-wall-shack-left.img")
                }),
                shack_wall_side_right: Z({
                    material: "wood",
                    extents: ve.create(.35, 3.8),
                    height: 10,
                    img: m("map-wall-shack-right.img")
                }),
                shack_wall_bot: Z({
                    material: "wood",
                    extents: ve.create(3.75, .35),
                    height: 10,
                    img: m("map-wall-shack-bot.img")
                }),
                shack_01: he(),
                shack_01x: he({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-shack-ceiling-01.img",
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-05.img",
                            pos: ve.create(-4, 2.5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(3.5, -.5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    }
                }),
                shack_02: ue({}),
                shack_02x: ue({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-shack-ceiling-02.img",
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-05.img",
                            pos: ve.create(-2, 1),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    }
                }),
                shack_wall_ext_2: Z({
                    material: "wood",
                    extents: ve.create(.5, 1),
                    hitParticle: "tanChip",
                    img: m("map-wall-02.img", 12556639)
                }),
                shack_wall_ext_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-05.img", 12556639)
                }),
                shack_wall_ext_9: Z({
                    material: "wood",
                    extents: ve.create(.5, 4.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-09.img", 12556639)
                }),
                shack_wall_ext_10: Z({
                    material: "wood",
                    extents: ve.create(.5, 5),
                    hitParticle: "tanChip",
                    img: m("map-wall-10.img", 12556639)
                }),
                shack_wall_ext_14: Z({
                    material: "wood",
                    extents: ve.create(.5, 7),
                    hitParticle: "tanChip",
                    img: m("map-wall-14.img", 12556639)
                }),
                shack_03a: ie({
                    terrain: {
                        bridge: {
                            nearbyWidthMult: 1
                        },
                        nearbyRiver: {
                            radMin: .75,
                            radMax: 1.5,
                            facingOri: 1
                        }
                    }
                }),
                shack_03b: ie({
                    terrain: {
                        waterEdge: {
                            dir: ve.create(0, 1),
                            distMin: 4,
                            distMax: 5
                        }
                    },
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(-7.75, 3), ve.create(1, 2)),
                            color: 6171907
                        }, {
                            collider: _e.createAabbExtents(ve.create(5, -4.75), ve.create(2, 1)),
                            color: 6171907
                        }, {
                            collider: _e.createAabbExtents(ve.create(1, 1.5), ve.create(8, 5.5)),
                            color: 5730406
                        }, {
                            collider: _e.createAabbExtents(ve.create(-10.65, 9), ve.create(2, 12)),
                            color: 6171907
                        }]
                    },
                    floor: {
                        surfaces: [{
                            type: "shack",
                            collision: [_e.createAabbExtents(ve.create(1, 1.5), ve.create(8, 5.5)), _e.createAabbExtents(ve.create(-10.65, 9), ve.create(2, 12)), _e.createAabbExtents(ve.create(-7.75, 3), ve.create(1, 2)), _e.createAabbExtents(ve.create(5, -4.75), ve.create(2, 1))]
                        }],
                        imgs: [{
                            sprite: "map-building-shack-floor-03.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-hut-floor-02.img",
                            pos: ve.create(-10.65, 9),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-shack-ceiling-03.img",
                            pos: ve.create(.5, .5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }]
                    }
                }),
                shack_03x: ie({
                    terrain: {
                        bridge: {
                            nearbyWidthMult: 1
                        },
                        nearbyRiver: {
                            radMin: .75,
                            radMax: 1.5,
                            facingOri: 1
                        }
                    },
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-shack-ceiling-03.img",
                            pos: ve.create(.5, .5),
                            scale: .667,
                            alpha: 1,
                            tint: 10461087
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(3.75, 1.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }]
                    }
                }),
                outhouse_wall_top: Z({
                    material: "wood",
                    extents: ve.create(3.2, .35),
                    height: 10,
                    hitParticle: "outhouseChip",
                    explodeParticle: "outhousePlank",
                    health: 100,
                    img: m("map-wall-outhouse-top.img")
                }),
                outhouse_wall_side: Z({
                    material: "wood",
                    extents: ve.create(.35, 3.1),
                    height: 10,
                    hitParticle: "outhouseChip",
                    explodeParticle: "outhousePlank",
                    health: 100,
                    img: m("map-wall-outhouse-side.img")
                }),
                outhouse_wall_bot: Z({
                    material: "wood",
                    extents: ve.create(1.15, .35),
                    height: 10,
                    hitParticle: "outhouseChip",
                    explodeParticle: "outhousePlank",
                    health: 100,
                    img: m("map-wall-outhouse-bot.img")
                }),
                outhouse_01: ce({}),
                outhouse_01x: ce({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-outhouse-ceiling.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(2.25, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    }
                }),
                outhouse_02: ce({
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 1.45), ve.create(3.6, 3.2))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 1.4), ve.create(3.8, 3.4))],
                        imgs: [{
                            sprite: "map-building-outhouse-ceiling.img",
                            scale: .5,
                            alpha: 1,
                            tint: 13735576
                        }],
                        destroy: {
                            wallCount: 2,
                            particleCount: 15,
                            particle: "outhouseBreak",
                            residue: "map-outhouse-res.img"
                        }
                    },
                    obs: "toilet_02b"
                }),
                brick_wall_ext_1: Z({
                    material: "brick",
                    extents: ve.create(.5, .5)
                }),
                brick_wall_ext_2: Z({
                    material: "brick",
                    extents: ve.create(.5, 1)
                }),
                brick_wall_ext_3: Z({
                    material: "brick",
                    extents: ve.create(.5, 1.5)
                }),
                brick_wall_ext_4: Z({
                    material: "brick",
                    extents: ve.create(.5, 2)
                }),
                brick_wall_ext_5: Z({
                    material: "brick",
                    extents: ve.create(.5, 2.5)
                }),
                brick_wall_ext_6: Z({
                    material: "brick",
                    extents: ve.create(.5, 3)
                }),
                brick_wall_ext_7: Z({
                    material: "brick",
                    extents: ve.create(.5, 3.5)
                }),
                brick_wall_ext_8: Z({
                    material: "brick",
                    extents: ve.create(.5, 4)
                }),
                brick_wall_ext_9: Z({
                    material: "brick",
                    extents: ve.create(.5, 4.5)
                }),
                brick_wall_ext_10: Z({
                    material: "brick",
                    extents: ve.create(.5, 5)
                }),
                brick_wall_ext_11: Z({
                    material: "brick",
                    extents: ve.create(.5, 5.5)
                }),
                brick_wall_ext_12: Z({
                    material: "brick",
                    extents: ve.create(.5, 6)
                }),
                brick_wall_ext_13: Z({
                    material: "brick",
                    extents: ve.create(.5, 6.5)
                }),
                brick_wall_ext_14: Z({
                    material: "brick",
                    extents: ve.create(.5, 7)
                }),
                brick_wall_ext_15: Z({
                    material: "brick",
                    extents: ve.create(.5, 7.5)
                }),
                brick_wall_ext_16: Z({
                    material: "brick",
                    extents: ve.create(.5, 8)
                }),
                brick_wall_ext_17: Z({
                    material: "brick",
                    extents: ve.create(.5, 8.5)
                }),
                brick_wall_ext_18: Z({
                    material: "brick",
                    extents: ve.create(.5, 9)
                }),
                brick_wall_ext_19: Z({
                    material: "brick",
                    extents: ve.create(.5, 9.5)
                }),
                brick_wall_ext_20: Z({
                    material: "brick",
                    extents: ve.create(.5, 10)
                }),
                brick_wall_ext_21: Z({
                    material: "brick",
                    extents: ve.create(.5, 10.5)
                }),
                brick_wall_ext_23: Z({
                    material: "brick",
                    extents: ve.create(.5, 11.5)
                }),
                brick_wall_ext_33: Z({
                    material: "brick",
                    extents: ve.create(.5, 16.5)
                }),
                brick_wall_ext_41: Z({
                    material: "brick",
                    extents: ve.create(.5, 20.5)
                }),
                brick_wall_ext_short_7: Z({
                    material: "brick",
                    extents: ve.create(.5, 3.5),
                    height: .5
                }),
                brick_wall_ext_thicker_4: Z({
                    material: "brick",
                    extents: ve.create(1.5, 2)
                }),
                brick_wall_ext_thicker_5: Z({
                    material: "brick",
                    extents: ve.create(1.5, 2.5)
                }),
                brick_wall_ext_thicker_6: Z({
                    material: "brick",
                    extents: ve.create(1.5, 3)
                }),
                brick_wall_ext_thicker_7: Z({
                    material: "brick",
                    extents: ve.create(1.5, 3.5)
                }),
                brick_wall_ext_thicker_8: Z({
                    material: "brick",
                    extents: ve.create(1.5, 4)
                }),
                brick_wall_ext_thicker_9: Z({
                    material: "brick",
                    extents: ve.create(1.5, 4.5)
                }),
                brick_wall_ext_thicker_15: Z({
                    material: "brick",
                    extents: ve.create(1.5, 7.5)
                }),
                brick_wall_ext_thicker_16: Z({
                    material: "brick",
                    extents: ve.create(1.5, 8)
                }),
                brick_wall_ext_thicker_24: Z({
                    material: "brick",
                    extents: ve.create(1.5, 12)
                }),
                metal_wall_ext_3: Z({
                    material: "metal",
                    extents: ve.create(.5, 1.5)
                }),
                metal_wall_ext_4: Z({
                    material: "metal",
                    extents: ve.create(.5, 2)
                }),
                metal_wall_ext_5: Z({
                    material: "metal",
                    extents: ve.create(.5, 2.5)
                }),
                metal_wall_ext_6: Z({
                    material: "metal",
                    extents: ve.create(.5, 3)
                }),
                metal_wall_ext_7: Z({
                    material: "metal",
                    extents: ve.create(.5, 3.5)
                }),
                metal_wall_ext_8: Z({
                    material: "metal",
                    extents: ve.create(.5, 4)
                }),
                metal_wall_ext_9: Z({
                    material: "metal",
                    extents: ve.create(.5, 4.5)
                }),
                metal_wall_ext_10: Z({
                    material: "metal",
                    extents: ve.create(.5, 5)
                }),
                metal_wall_ext_12: Z({
                    material: "metal",
                    extents: ve.create(.5, 6)
                }),
                metal_wall_ext_18: Z({
                    material: "metal",
                    extents: ve.create(.5, 9)
                }),
                metal_wall_ext_43: Z({
                    material: "metal",
                    extents: ve.create(.5, 21.5)
                }),
                metal_wall_ext_short_6: Z({
                    material: "metal",
                    extents: ve.create(.5, 3),
                    height: .5
                }),
                metal_wall_ext_short_7: Z({
                    material: "metal",
                    extents: ve.create(.5, 3.5),
                    height: .5
                }),
                metal_wall_ext_thick_6: Z({
                    material: "metal",
                    extents: ve.create(1, 3)
                }),
                metal_wall_ext_thick_20: Z({
                    material: "metal",
                    extents: ve.create(1, 10)
                }),
                metal_wall_ext_thicker_4: Z({
                    material: "metal",
                    extents: ve.create(1.5, 2)
                }),
                metal_wall_ext_thicker_5: Z({
                    material: "metal",
                    extents: ve.create(1.5, 2.5)
                }),
                metal_wall_ext_thicker_6: Z({
                    material: "metal",
                    extents: ve.create(1.5, 3)
                }),
                metal_wall_ext_thicker_7: Z({
                    material: "metal",
                    extents: ve.create(1.5, 3.5)
                }),
                metal_wall_ext_thicker_8: Z({
                    material: "metal",
                    extents: ve.create(1.5, 4)
                }),
                metal_wall_ext_thicker_9: Z({
                    material: "metal",
                    extents: ve.create(1.5, 4.5)
                }),
                metal_wall_ext_thicker_10: Z({
                    material: "metal",
                    extents: ve.create(1.5, 5)
                }),
                metal_wall_ext_thicker_11: Z({
                    material: "metal",
                    extents: ve.create(1.5, 5.5)
                }),
                metal_wall_ext_thicker_12: Z({
                    material: "metal",
                    extents: ve.create(1.5, 6)
                }),
                metal_wall_ext_thicker_13: Z({
                    material: "metal",
                    extents: ve.create(1.5, 6.5)
                }),
                metal_wall_ext_thicker_14: Z({
                    material: "metal",
                    extents: ve.create(1.5, 7)
                }),
                metal_wall_ext_thicker_15: Z({
                    material: "metal",
                    extents: ve.create(1.5, 7.5)
                }),
                metal_wall_ext_thicker_16: Z({
                    material: "metal",
                    extents: ve.create(1.5, 8)
                }),
                metal_wall_ext_thicker_17: Z({
                    material: "metal",
                    extents: ve.create(1.5, 8.5)
                }),
                metal_wall_ext_thicker_18: Z({
                    material: "metal",
                    extents: ve.create(1.5, 9)
                }),
                metal_wall_ext_thicker_19: Z({
                    material: "metal",
                    extents: ve.create(1.5, 9.5)
                }),
                metal_wall_ext_thicker_20: Z({
                    material: "metal",
                    extents: ve.create(1.5, 10)
                }),
                metal_wall_ext_thicker_21: Z({
                    material: "metal",
                    extents: ve.create(1.5, 10.5)
                }),
                metal_wall_ext_thicker_22: Z({
                    material: "metal",
                    extents: ve.create(1.5, 11)
                }),
                metal_wall_ext_thicker_23: Z({
                    material: "metal",
                    extents: ve.create(1.5, 11.5)
                }),
                metal_wall_ext_thicker_24: Z({
                    material: "metal",
                    extents: ve.create(1.5, 12)
                }),
                metal_wall_ext_thicker_25: Z({
                    material: "metal",
                    extents: ve.create(1.5, 12.5)
                }),
                metal_wall_ext_thicker_26: Z({
                    material: "metal",
                    extents: ve.create(1.5, 13)
                }),
                metal_wall_ext_thicker_27: Z({
                    material: "metal",
                    extents: ve.create(1.5, 13.5)
                }),
                metal_wall_ext_thicker_28: Z({
                    material: "metal",
                    extents: ve.create(1.5, 14.5)
                }),
                metal_wall_ext_thicker_29: Z({
                    material: "metal",
                    extents: ve.create(1.5, 14.5)
                }),
                metal_wall_ext_thicker_32: Z({
                    material: "metal",
                    extents: ve.create(1.5, 16)
                }),
                metal_wall_ext_thicker_34: Z({
                    material: "metal",
                    extents: ve.create(1.5, 17)
                }),
                metal_wall_ext_thicker_35: Z({
                    material: "metal",
                    extents: ve.create(1.5, 17.5)
                }),
                metal_wall_ext_thicker_42: Z({
                    material: "metal",
                    extents: ve.create(1.5, 21)
                }),
                metal_wall_ext_thicker_48: Z({
                    material: "metal",
                    extents: ve.create(1.5, 24)
                }),
                glass_wall_10: Z({
                    material: "glass",
                    extents: ve.create(.5, 5),
                    health: 50,
                    img: m("map-wall-glass-10.img")
                }),
                glass_wall_12: Z({
                    material: "glass",
                    extents: ve.create(.5, 6),
                    health: 50,
                    img: m("map-wall-glass-12.img")
                }),
                glass_wall_12_2: Z({
                    material: "glass",
                    extents: ve.create(1, 6),
                    health: 5e3,
                    img: m("map-wall-glass-12-2.img")
                }),
                concrete_wall_ext_2: Z({
                    material: "concrete",
                    extents: ve.create(.5, 1)
                }),
                concrete_wall_ext_5: Z({
                    material: "concrete",
                    extents: ve.create(.5, 2.5)
                }),
                concrete_wall_ext_6: Z({
                    material: "concrete",
                    extents: ve.create(.5, 3)
                }),
                concrete_wall_ext_7: Z({
                    material: "concrete",
                    extents: ve.create(.5, 3.5)
                }),
                concrete_wall_ext_8: Z({
                    material: "concrete",
                    extents: ve.create(.5, 4)
                }),
                concrete_wall_ext_11: Z({
                    material: "concrete",
                    extents: ve.create(.5, 5.5)
                }),
                concrete_wall_ext_13: Z({
                    material: "concrete",
                    extents: ve.create(.5, 6.5)
                }),
                concrete_wall_ext_15: Z({
                    material: "concrete",
                    extents: ve.create(.5, 7.5)
                }),
                concrete_wall_ext_16: Z({
                    material: "concrete",
                    extents: ve.create(.5, 8)
                }),
                concrete_wall_ext_17: Z({
                    material: "concrete",
                    extents: ve.create(.5, 8.5)
                }),
                panicroom_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 6))]
                        }],
                        imgs: [{
                            sprite: "map-building-panicroom-floor.img",
                            scale: .5,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 6))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(4.5, 6))],
                        imgs: [{
                            sprite: "map-building-panicroom-ceiling.img",
                            scale: .5,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_12",
                        pos: ve.create(-4, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_3",
                        pos: ve.create(-2, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_7",
                        pos: ve.create(0, -5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_12",
                        pos: ve.create(4, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_2",
                        pos: ve.create(0, -.05),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            loot_tier_1: 1,
                            "": 1
                        }),
                        pos: ve.create(0, .05),
                        scale: 1,
                        ori: 0
                    }]
                },
                barn_wall_int_2: Z({
                    material: "wood",
                    extents: ve.create(.5, 1),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-02-rounded.img", 7173701)
                }),
                barn_wall_int_4: Z({
                    material: "wood",
                    extents: ve.create(.5, 2),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-04-rounded.img", 7173701)
                }),
                barn_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-05-rounded.img", 7173701)
                }),
                barn_wall_int_6: Z({
                    material: "wood",
                    extents: ve.create(.5, 3),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-06-rounded.img", 7173701)
                }),
                barn_wall_int_7: Z({
                    material: "wood",
                    extents: ve.create(.5, 3.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-07-rounded.img", 7173701)
                }),
                barn_wall_int_8: Z({
                    material: "wood",
                    extents: ve.create(.5, 4),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-08-rounded.img", 7173701)
                }),
                barn_wall_int_11: Z({
                    material: "wood",
                    extents: ve.create(.5, 5.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-11-rounded.img", 7173701)
                }),
                barn_wall_int_13: Z({
                    material: "wood",
                    extents: ve.create(.5, 6.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-13-rounded.img", 7173701)
                }),
                barn_column_1: Z({
                    material: "concrete",
                    extents: ve.create(1, 1),
                    hitParticle: "ltgreenChip",
                    img: m("map-column-01.img", 2764060)
                }),
                barn_01: $({}),
                barn_01x: $({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-barn-ceiling-01.img",
                            pos: ve.create(0, -2),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-barn-ceiling-02.img",
                            pos: ve.create(0, 13.2),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(-14.5, 5.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(-.5, -9),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-03.img",
                            pos: ve.create(14.5, 5.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    }
                }),
                bank_wall_int_3: Z({
                    material: "wood",
                    extents: ve.create(.5, 1.5),
                    img: m("map-wall-03-rounded.img", 7951934)
                }),
                bank_wall_int_4: Z({
                    material: "wood",
                    extents: ve.create(.5, 2),
                    img: m("map-wall-04-rounded.img", 7951934)
                }),
                bank_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    img: m("map-wall-05-rounded.img", 7951934)
                }),
                bank_wall_int_8: Z({
                    material: "wood",
                    extents: ve.create(.5, 4),
                    img: m("map-wall-08-rounded.img", 7951934)
                }),
                bank_01: J({}),
                bank_01b: J({
                    vault: "vault_01b"
                }),
                bank_01x: J({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-bank-ceiling-01.img",
                            pos: ve.create(-16, 7),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-bank-ceiling-02.img",
                            pos: ve.create(6, 0),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-bank-ceiling-03.img",
                            pos: ve.create(22, 8),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(-13, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(1.25, 9.25),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(13.75, 15.25),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(15.25, -15.75),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }]
                    }
                }),
                vault_door_main: T({
                    material: "metal",
                    hinge: ve.create(1, 3.5),
                    extents: ve.create(1, 3.5),
                    img: {
                        sprite: "map-door-02.img"
                    },
                    door: {
                        interactionRad: 1.5,
                        openSpeed: .23,
                        openOneWay: -1,
                        openDelay: 4.1,
                        openOnce: !0,
                        spriteAnchor: ve.create(.2, 1),
                        sound: {
                            open: "none",
                            close: "none",
                            change: "vault_change_01"
                        }
                    }
                }),
                vault_01: Q({}),
                vault_01b: Q({
                    gold_box: 9,
                    floor_loot: "loot_tier_stonehammer"
                }),
                police_wall_int_2: Z({
                    material: "wood",
                    extents: ve.create(.5, 1),
                    img: m("map-wall-02-rounded.img", 1777447)
                }),
                police_wall_int_3: Z({
                    material: "wood",
                    extents: ve.create(.5, 1.5),
                    img: m("map-wall-03-rounded.img", 1777447)
                }),
                police_wall_int_4: Z({
                    material: "wood",
                    extents: ve.create(.5, 2),
                    img: m("map-wall-04-rounded.img", 1777447)
                }),
                police_wall_int_6: Z({
                    material: "wood",
                    extents: ve.create(.5, 3),
                    img: m("map-wall-06-rounded.img", 1777447)
                }),
                police_wall_int_7: Z({
                    material: "wood",
                    extents: ve.create(.5, 3.5),
                    img: m("map-wall-07-rounded.img", 1777447)
                }),
                police_wall_int_8: Z({
                    material: "wood",
                    extents: ve.create(.5, 4),
                    img: m("map-wall-08-rounded.img", 1777447)
                }),
                police_wall_int_10: Z({
                    material: "wood",
                    extents: ve.create(.5, 5),
                    img: m("map-wall-10-rounded.img", 1777447)
                }),
                police_01: me({}),
                police_01x: me({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-police-ceiling-01.img",
                            pos: ve.create(-21.5, 8.5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-police-ceiling-02.img",
                            pos: ve.create(10.5, 0),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-police-ceiling-03.img",
                            pos: ve.create(31.96, 12.5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(13, 17.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(-21, 14),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-03.img",
                            pos: ve.create(30.25, 6.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-snow-07.img",
                            pos: ve.create(4.5, -3.25),
                            scale: .6,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(-40.25, 14.75),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(-38.75, .75),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }]
                    }
                }),
                house_wall_int_4: Z({
                    material: "wood",
                    extents: ve.create(.5, 2),
                    hitParticle: "tanChip",
                    img: m("map-wall-04-rounded.img", 10584424)
                }),
                house_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-05-rounded.img", 10584424)
                }),
                house_wall_int_8: Z({
                    material: "wood",
                    extents: ve.create(.5, 4),
                    hitParticle: "tanChip",
                    img: m("map-wall-08-rounded.img", 10584424)
                }),
                house_wall_int_9: Z({
                    material: "wood",
                    extents: ve.create(.5, 4.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-09-rounded.img", 10584424)
                }),
                house_wall_int_11: Z({
                    material: "wood",
                    extents: ve.create(.5, 5.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-11-rounded.img", 10584424)
                }),
                house_wall_int_14: Z({
                    material: "wood",
                    extents: ve.create(.5, 7),
                    hitParticle: "tanChip",
                    img: m("map-wall-14-rounded.img", 10584424)
                }),
                house_column_1: Z({
                    material: "concrete",
                    extents: ve.create(1, 1),
                    hitParticle: "tanChip",
                    img: m("map-column-01.img", 5587506)
                }),
                house_red_01: pe({
                    stand: "stand_01"
                }),
                house_red_01b: pe({
                    porch_01: "cache_05",
                    stand: "stand_01"
                }),
                house_red_01x: pe({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-house-ceiling.img",
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(-5.5, 8.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(4.5, -7),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    }
                }),
                house_red_02: de({
                    stand: "stand_01"
                }),
                house_red_02x: de({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-house-ceiling.img",
                            scale: .667,
                            alpha: 1,
                            tint: 13619151,
                            rot: 2
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(3.5, 6),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(-4.5, -8),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }]
                    }
                }),
                cabin_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-05-rounded.img", 10584424)
                }),
                cabin_wall_int_10: Z({
                    material: "wood",
                    extents: ve.create(.5, 5),
                    hitParticle: "tanChip",
                    img: m("map-wall-10-rounded.img", 10584424)
                }),
                cabin_wall_int_13: Z({
                    material: "wood",
                    extents: ve.create(.5, 6.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-13-rounded.img", 10584424)
                }),
                cabin_01: te({}),
                cabin_01x: te({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-cabin-ceiling-01a.img",
                            pos: ve.create(0, .5),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-cabin-ceiling-01b.img",
                            pos: ve.create(4, -13),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(-13, 6),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(-3.5, -6.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-03.img",
                            pos: ve.create(10.75, 8.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-chimney-01.img",
                            pos: ve.create(13, 2),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            removeOnDamaged: !0
                        }]
                    }
                }),
                cabin_02: te({
                    cabin_mount: "gun_mount_02",
                    porch_01: "cache_05"
                }),
                dock_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(2.5, 0), ve.create(2.4, 10.25)),
                            color: 8862486
                        }, {
                            collider: _e.createAabbExtents(ve.create(-2.45, 7.75), ve.create(2.6, 2.5)),
                            color: 8862486
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1,
                        bridge: {
                            nearbyWidthMult: .75
                        }
                    },
                    bridgeLandBounds: [_e.createAabbExtents(ve.create(2.5, -10.5), ve.create(2.5, 1.5))],
                    bridgeWaterBounds: [_e.createAabbExtents(ve.create(0, 7.75), ve.create(5.5, 3.5))],
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "shack",
                            collision: [_e.createAabbExtents(ve.create(2.5, 0), ve.create(2.4, 10.25)), _e.createAabbExtents(ve.create(-2.45, 7.75), ve.create(2.6, 2.5))]
                        }],
                        imgs: [{
                            sprite: "map-building-dock-floor-01a.img",
                            pos: ve.create(-2.5, 7.85),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-dock-floor-01b.img",
                            pos: ve.create(2.5, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "bollard_01",
                        pos: ve.create(-4.25, 7.75),
                        scale: .8,
                        ori: 2
                    }, {
                        type: c({
                            barrel_01: 1,
                            crate_01: 1
                        }),
                        pos: ve.create(3, 8.25),
                        scale: .75,
                        ori: 0
                    }]
                },
                mansion_wall_int_1: Z({
                    material: "wood",
                    extents: ve.create(.5, .5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-01-rounded.img", 16768917)
                }),
                mansion_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-05-rounded.img", 16768917)
                }),
                mansion_wall_int_6: Z({
                    material: "wood",
                    extents: ve.create(.5, 3),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-06-rounded.img", 16768917)
                }),
                mansion_wall_int_7: Z({
                    material: "wood",
                    extents: ve.create(.5, 3.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-07-rounded.img", 16768917)
                }),
                mansion_wall_int_8: Z({
                    material: "wood",
                    extents: ve.create(.5, 4),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-08-rounded.img", 16768917)
                }),
                mansion_wall_int_9: Z({
                    material: "wood",
                    extents: ve.create(.5, 4.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-09-rounded.img", 16768917)
                }),
                mansion_wall_int_10: Z({
                    material: "wood",
                    extents: ve.create(.5, 5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-10-rounded.img", 16768917)
                }),
                mansion_wall_int_11: Z({
                    material: "wood",
                    extents: ve.create(.5, 5.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-11-rounded.img", 16768917)
                }),
                mansion_wall_int_12: Z({
                    material: "wood",
                    extents: ve.create(.5, 6),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-12-rounded.img", 16768917)
                }),
                mansion_wall_int_13: Z({
                    material: "wood",
                    extents: ve.create(.5, 6.5),
                    hitParticle: "ltgreenChip",
                    img: m("map-wall-13-rounded.img", 16768917)
                }),
                mansion_column_1: Z({
                    material: "concrete",
                    extents: ve.create(1, 1),
                    hitParticle: "tanChip",
                    img: m("map-column-01.img", 7432016)
                }),
                saferoom_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(6, 4))]
                        }],
                        imgs: [{
                            sprite: "map-building-saferoom-floor.img",
                            scale: .5,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(5, 3))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(5, 3))],
                        imgs: [{
                            sprite: "map-building-saferoom-ceiling.img",
                            scale: .5,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_7",
                        pos: ve.create(-5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_6",
                        pos: ve.create(1.5, 3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_9",
                        pos: ve.create(0, -3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_7",
                        pos: ve.create(5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            case_01: 1,
                            case_02: .025,
                            chest_02: 1
                        }),
                        pos: ve.create(2.5, 0),
                        scale: 1,
                        ori: 3
                    }]
                },
                mansion_01: se({}),
                mansion_01x: se({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-mansion-ceiling.img",
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-01.img",
                            pos: ve.create(6, 19.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-02.img",
                            pos: ve.create(-16, 8),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-snow-03.img",
                            pos: ve.create(20.25, -1.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-04.img",
                            pos: ve.create(10.25, -13.25),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-05.img",
                            pos: ve.create(10.25, 6.25),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-07.img",
                            pos: ve.create(-21.25, -20.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(-29.75, 13.25),
                            scale: .75,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }]
                    },
                    tree: "tree_11",
                    tree_scale: 1,
                    tree_loot: "loot_tier_1",
                    bush_chance: 999
                }),
                mansion_02: se({
                    decoration_01: "decal_web_01",
                    decoration_02: "candle_lit_01",
                    porch_01: "cache_05",
                    entry_loot: ""
                }),
                mansion_cellar_01: le({}),
                mansion_cellar_02: le({
                    decoration_01: "decal_web_01",
                    decoration_02: "candle_lit_01",
                    mid_obs_01: "pumpkin_01"
                }),
                mansion_structure_01: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    layers: [{
                        type: "mansion_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "mansion_cellar_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(28, 1.5), ve.create(3, 2.55)),
                        downDir: ve.create(-1, 0),
                        noCeilingReveal: !0
                    }, {
                        collision: _e.createAabbExtents(ve.create(1, 13.5), ve.create(2, 3.5)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(10, -.1), ve.create(15, 10.1)), _e.createAabbExtents(ve.create(17.5, 13.5), ve.create(7.49, 3.49))]
                },
                mansion_structure_02: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    layers: [{
                        type: "mansion_02",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "mansion_cellar_02",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(28, 1.5), ve.create(3, 2.55)),
                        downDir: ve.create(-1, 0),
                        noCeilingReveal: !0
                    }, {
                        collision: _e.createAabbExtents(ve.create(1, 13.5), ve.create(2, 3.5)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(10, -.1), ve.create(15, 10.1)), _e.createAabbExtents(ve.create(17.5, 13.5), ve.create(7.49, 3.49))]
                },
                saloon_column_1: Z({
                    material: "woodPerm",
                    extents: ve.create(1, 1),
                    hitParticle: "blackChip",
                    img: m("map-column-01.img", 1710618)
                }),
                saloon_bar_small: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 5)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                saloon_bar_large: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 7.5)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                saloon_bar_back_large: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.75, 5)),
                    img: {
                        sprite: "map-saloon-bar-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    }
                }),
                saloon_bar_back_small: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.75, 1.5)),
                    img: {
                        sprite: "map-saloon-bar-02.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 10
                    }
                }),
                saloon_door_secret: T({
                    destructible: !1,
                    material: "wood",
                    hitParticle: "woodChip",
                    hinge: ve.create(0, 2),
                    extents: ve.create(.75, 2),
                    door: {
                        canUse: !1,
                        openOnce: !0,
                        openOneWay: !1,
                        openSpeed: 36,
                        autoOpen: !1,
                        autoClose: !1,
                        slideToOpen: !0,
                        slideOffset: 4.5,
                        sound: {
                            open: ""
                        }
                    },
                    img: {
                        sprite: "map-door-04.img",
                        residue: "map-drawers-res.img",
                        scale: .5,
                        tint: 16777215,
                        zIdx: 9
                    }
                }),
                wood_perm_wall_ext_5: Z({
                    material: "woodPerm",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_6: Z({
                    material: "woodPerm",
                    extents: ve.create(.5, 3),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_7: Z({
                    material: "woodPerm",
                    extents: ve.create(.5, 3.5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_14: Z({
                    material: "woodPerm",
                    extents: ve.create(.5, 7),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_17: Z({
                    material: "woodPerm",
                    extents: ve.create(.5, 8.5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_35: Z({
                    material: "woodPerm",
                    extents: ve.create(.5, 17.5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_6: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 3),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_7: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 3.5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_8: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 4),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_10: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_12: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 6),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_13: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 6.5),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_18: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 9),
                    hitParticle: "blackChip"
                }),
                wood_perm_wall_ext_thicker_21: Z({
                    material: "woodPerm",
                    extents: ve.create(1.5, 10.5),
                    hitParticle: "blackChip"
                }),
                saloon_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 0), ve.create(20.5, 20.5)),
                            color: 5252110
                        }, {
                            collider: _e.createAabbExtents(ve.create(-1, 1), ve.create(19, 19)),
                            color: 4337194
                        }, {
                            collider: _e.createAabbExtents(ve.create(-3, 3), ve.create(17, 17)),
                            color: 2499104
                        }, {
                            collider: _e.createAabbExtents(ve.create(-23.5, 1), ve.create(3, 2)),
                            color: 3485483
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(22.5, 22.5))],
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "house",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(20.5, 20.5)), _e.createAabbExtents(ve.create(-23.5, 1), ve.create(3, 2))]
                        }],
                        imgs: [{
                            sprite: "map-building-saloon-floor-01.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-saloon-ceiling-02.img",
                            pos: ve.create(-23.5, 1),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(-1, 1), ve.create(19, 19))],
                        scopeOut: [_e.createAabbExtents(ve.create(1, -1), ve.create(21.5, 21.5))],
                        vision: {
                            dist: 5.5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        damage: {
                            obstacleCount: 1
                        },
                        imgs: [{
                            sprite: "map-building-saloon-ceiling-01.img",
                            pos: ve.create(0, 0),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-building-saloon-ceiling-02.img",
                            pos: ve.create(-23.5, 1),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-chimney-01.img",
                            pos: ve.create(-3, 3),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            removeOnDamaged: !0
                        }]
                    },
                    occupiedEmitters: [{
                        type: "cabin_smoke_parent",
                        pos: ve.create(0, 0),
                        rot: 0,
                        scale: 1,
                        layer: 0,
                        parentToCeiling: !0
                    }],
                    interiorSound: {
                        sound: "piano_music_01",
                        stopOnPuzzleComplete: !0
                    },
                    puzzle: {
                        solution: "saloon",
                        completeUseType: "saloon_door_secret",
                        completeOffDelay: 1,
                        completeUseDelay: 2,
                        errorResetDelay: 1,
                        pieceResetDelay: 10,
                        sound: {
                            fail: "door_error_01",
                            complete: "piano_02"
                        }
                    },
                    mapObjects: [{
                        type: "wood_perm_wall_ext_17",
                        pos: ve.create(-20, 11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_5",
                        pos: ve.create(-23, 3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_5",
                        pos: ve.create(-26, 1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_5",
                        pos: ve.create(-22, 1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_5",
                        pos: ve.create(-23, -1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_14",
                        pos: ve.create(-20, -7.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_35",
                        pos: ve.create(-3, 20),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_6",
                        pos: ve.create(-16.5, -14),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_window_01",
                        pos: ve.create(-12, -14.25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_7",
                        pos: ve.create(-7, -14),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_window_01",
                        pos: ve.create(-2, -14.25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_7",
                        pos: ve.create(3, -14),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_6",
                        pos: ve.create(14, 16.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_window_01",
                        pos: ve.create(14.25, 12),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_7",
                        pos: ve.create(14, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_window_01",
                        pos: ve.create(14.25, 2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_7",
                        pos: ve.create(14, -3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "saloon_bar_back_large",
                        pos: ve.create(-18.75, 7.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "saloon_door_secret",
                        pos: ve.create(-18.75, 2.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "saloon_bar_back_small",
                        pos: ve.create(-18.75, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-18.75, 11.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-18.75, 10),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-18.75, 9),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-18.75, 6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-18.75, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-18.75, 3.75),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_02v",
                        pos: ve.create(-18.75, -1.75),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "violet"
                    }, {
                        type: "saloon_bar_large",
                        pos: ve.create(-11, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "saloon_bar_small",
                        pos: ve.create(-14.5, -4),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-10.75, 11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_02r",
                        pos: ve.create(-11, 8),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "red"
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-11, 6.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-10.75, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-11, 1.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-10.75, -1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_02b",
                        pos: ve.create(-11, -2.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "blue"
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-13, -4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-15, -4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_01",
                        pos: ve.create(-16.5, -4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_02",
                        pos: ve.create(-17.5, 17.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "barrel"
                    }, {
                        type: "piano_01",
                        pos: ve.create(-18, -9.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "loot_tier_1",
                        pos: ve.create(-16, -9.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            gun_mount_01: 100,
                            gun_mount_02: 10
                        }),
                        pos: ve.create(-.5, 18.75),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "gun"
                    }, {
                        type: "barrel_02",
                        pos: ve.create(-3, -7),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "barrel_02",
                        pos: ve.create(-.5, -4.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "stove_02",
                        pos: ve.create(-3, 3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_02g",
                        pos: ve.create(7.25, 10.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "green"
                    }, {
                        type: "table_03",
                        pos: ve.create(7.25, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "table_03",
                        pos: ve.create(7.25, .5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bottle_02i",
                        pos: ve.create(12.5, 4.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "indigo"
                    }, {
                        type: "crate_01",
                        pos: ve.create(11, 17),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "bottle_02y",
                        pos: ve.create(8, 18.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "yellow"
                    }, {
                        type: "crate_01",
                        pos: ve.create(-23, 11.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "bush_01",
                        pos: ve.create(-23.5, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-23, -5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "saloon_column_1",
                        pos: ve.create(-19.5, -17.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_02",
                        pos: ve.create(-10, -16.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "bottle_02o",
                        pos: ve.create(3.75, -17.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "orange"
                    }, {
                        type: "saloon_column_1",
                        pos: ve.create(5.5, -17.5),
                        scale: 1,
                        ori: 0,
                        puzzlePiece: "column"
                    }, {
                        type: "saloon_column_1",
                        pos: ve.create(17.5, 19.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_02",
                        pos: ve.create(16.5, 9),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "saloon_column_1",
                        pos: ve.create(17.5, -5.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                saloon_cellar_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "brick",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(15, 9))]
                        }],
                        imgs: [{
                            sprite: "map-building-saloon-cellar-01.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(15, 9))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(15, 9))],
                        imgs: [{
                            sprite: "",
                            pos: ve.create(-2, 3.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 7,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "wood_perm_wall_ext_thicker_18",
                        pos: ve.create(-8, 10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_5",
                        pos: ve.create(1.5, 7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_thicker_12",
                        pos: ve.create(-4.5, 4),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_thicker_13",
                        pos: ve.create(-16, 2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_thicker_8",
                        pos: ve.create(-13.5, -6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_thicker_7",
                        pos: ve.create(-8, -8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_thicker_13",
                        pos: ve.create(0, -10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_thicker_7",
                        pos: ve.create(8, -8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_thicker_8",
                        pos: ve.create(13.5, -6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_thicker_13",
                        pos: ve.create(16, 2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_thicker_10",
                        pos: ve.create(12.5, 10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "wood_perm_wall_ext_thicker_6",
                        pos: ve.create(9, 5.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "wood_perm_wall_ext_thicker_21",
                        pos: ve.create(0, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "loot_tier_vector45",
                        pos: ve.create(0, -4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_04",
                        pos: ve.create(-3, -8.03),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "barrel_04",
                        pos: ve.create(0, -8.03),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "barrel_04",
                        pos: ve.create(3, -8.03),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "recorder_04",
                        pos: ve.create(12.5, 6.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                saloon_structure_01: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    layers: [{
                        type: "saloon_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "saloon_cellar_01",
                        pos: ve.create(-19, -6),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(-19.5, .75), ve.create(1.5, 2)),
                        downDir: ve.create(-1, 0)
                    }],
                    mask: [_e.createAabbExtents(ve.create(-30, .75), ve.create(10, 5))]
                },
                teahouse_wall_int_3: Z({
                    material: "wood",
                    extents: ve.create(.5, 1.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-03.img", 5505024, .95)
                }),
                teahouse_wall_int_4: Z({
                    material: "wood",
                    extents: ve.create(.5, 2),
                    hitParticle: "tanChip",
                    img: m("map-wall-04.img", 5505024, .95)
                }),
                teahouse_wall_int_5: Z({
                    material: "wood",
                    extents: ve.create(.5, 2.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-05.img", 5505024, .95)
                }),
                teahouse_wall_int_7: Z({
                    material: "wood",
                    extents: ve.create(.5, 3.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-07.img", 5505024, .95)
                }),
                teahouse_wall_int_12: Z({
                    material: "wood",
                    extents: ve.create(.5, 6),
                    hitParticle: "tanChip",
                    img: m("map-wall-12.img", 5505024, .95)
                }),
                teahouse_wall_int_13: Z({
                    material: "wood",
                    extents: ve.create(.5, 6.5),
                    hitParticle: "tanChip",
                    img: m("map-wall-13.img", 5505024, .95)
                }),
                teahouse_wall_int_14: Z({
                    material: "wood",
                    extents: ve.create(.5, 7),
                    hitParticle: "tanChip",
                    img: m("map-wall-14.img", 5505024, .95)
                }),
                teahouse_wall_int_18: Z({
                    material: "wood",
                    extents: ve.create(.5, 9),
                    hitParticle: "tanChip",
                    img: m("map-wall-18.img", 5505024, .95)
                }),
                teahouse_door_01: P({
                    img: {
                        tint: 14537141,
                        alpha: .95
                    },
                    door: {
                        interactionRad: 2,
                        openOneWay: !1,
                        openSpeed: 7,
                        autoOpen: !1,
                        autoClose: !1,
                        autoCloseDelay: 1,
                        slideToOpen: !0,
                        slideOffset: 3.75,
                        sound: {
                            open: "door_open_04",
                            close: "door_open_04",
                            error: "door_error_01"
                        },
                        casingImg: {
                            sprite: "map-door-slot-02.img",
                            pos: ve.create(-2, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 3211264,
                            zIdx: 60
                        }
                    }
                }),
                teahouse_window_open_01: xe({
                    img: {
                        tint: 12216619
                    }
                }),
                teahouse_01: function(e) {
                    var t = {
                        type: "building",
                        map: {
                            display: !0,
                            shapes: [{
                                collider: _e.createAabbExtents(ve.create(0, 0), ve.create(14, 9)),
                                color: 4608356
                            }, {
                                collider: _e.createAabbExtents(ve.create(0, 0), ve.create(7.5, 3.75)),
                                color: 5793921
                            }, {
                                collider: _e.createAabbExtents(ve.create(9, -10.15), ve.create(2, 1.5)),
                                color: 7354635
                            }, {
                                collider: _e.createAabbExtents(ve.create(-9, 10.15), ve.create(2, 1.5)),
                                color: 7354635
                            }]
                        },
                        terrain: {
                            grass: !0,
                            beach: !1
                        },
                        floor: {
                            surfaces: [{
                                type: "shack",
                                collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(14, 9)), _e.createAabbExtents(ve.create(9, -10.15), ve.create(2, 1.5)), _e.createAabbExtents(ve.create(-9, 10.15), ve.create(2, 1.5))]
                            }],
                            imgs: [{
                                sprite: "map-building-teahouse-floor-01.img",
                                pos: ve.create(0, 0),
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }, {
                                sprite: "map-building-teahouse-floor-02.img",
                                pos: ve.create(9, -10.25),
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }, {
                                sprite: "map-building-teahouse-floor-02.img",
                                pos: ve.create(-9, 10.25),
                                scale: .5,
                                alpha: 1,
                                tint: 16777215,
                                rot: 2
                            }]
                        },
                        ceiling: {
                            scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(12, 7))],
                            scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(14, 9))],
                            vision: {
                                width: 4
                            },
                            imgs: [{
                                sprite: "map-building-teahouse-ceiling-01.img",
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }],
                            destroy: {
                                wallCount: 3,
                                particle: "teahouseBreak",
                                particleCount: 25,
                                residue: "map-building-teahouse-res-01.img"
                            }
                        },
                        mapObjects: [{
                            type: "teahouse_window_open_01",
                            pos: ve.create(-6.5, -6.75),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_window_open_01",
                            pos: ve.create(11.75, 1.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "teahouse_wall_int_7",
                            pos: ve.create(11.5, -3.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "teahouse_wall_int_4",
                            pos: ve.create(11.5, 5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "teahouse_door_01",
                            pos: ve.create(-7, 6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_wall_int_18",
                            pos: ve.create(2, 6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_wall_int_3",
                            pos: ve.create(-9.5, -6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_wall_int_12",
                            pos: ve.create(1, -6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_wall_int_14",
                            pos: ve.create(-11.5, 0),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "teahouse_door_01",
                            pos: ve.create(7, -6.5),
                            scale: 1,
                            ori: 3
                        }, {
                            type: "pot_03",
                            pos: ve.create(9.5, 4.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "pot_03",
                            pos: ve.create(-9.5, -1.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "pot_03",
                            pos: ve.create(-9.5, -4.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "case_06",
                            pos: ve.create(0, 0),
                            scale: 1,
                            ori: 0
                        }]
                    };
                    return ke.mergeDeep(t, e || {})
                }({}),
                teapavilion_01: function(e) {
                    var t = {
                        type: "building",
                        map: {
                            display: !0,
                            shapes: [{
                                collider: _e.createAabbExtents(ve.create(0, 0), ve.create(9, 9)),
                                color: 10555920
                            }, {
                                collider: _e.createAabbExtents(ve.create(0, 0), ve.create(3.5, 3.5)),
                                color: 16727611
                            }, {
                                collider: _e.createAabbExtents(ve.create(0, -10.15), ve.create(2, 1.5)),
                                color: 7354635
                            }]
                        },
                        terrain: {
                            grass: !0,
                            beach: !1
                        },
                        mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(11, 11)), _e.createAabbExtents(ve.create(0, -20), ve.create(4, 12))],
                        ori: 0,
                        floor: {
                            surfaces: [{
                                type: "shack",
                                collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(9, 9)), _e.createAabbExtents(ve.create(0, -10.15), ve.create(2, 1.5))]
                            }],
                            imgs: [{
                                sprite: "map-building-pavilion-floor-01.img",
                                pos: ve.create(0, 0),
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }, {
                                sprite: "map-building-teahouse-floor-02.img",
                                pos: ve.create(0, -10.25),
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }]
                        },
                        ceiling: {
                            scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(7, 7))],
                            scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(9, 9))],
                            vision: {
                                width: 4
                            },
                            imgs: [{
                                sprite: "map-building-pavilion-ceiling-01.img",
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }],
                            destroy: {
                                wallCount: 3,
                                particle: "teapavilionBreak",
                                particleCount: 15,
                                residue: "map-building-pavilion-res-01.img"
                            }
                        },
                        mapObjects: [{
                            type: "teahouse_wall_int_12",
                            pos: ve.create(0, 6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_wall_int_13",
                            pos: ve.create(6.5, .5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "teahouse_wall_int_13",
                            pos: ve.create(-6.5, .5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "teahouse_wall_int_5",
                            pos: ve.create(-4.5, -6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_wall_int_5",
                            pos: ve.create(4.5, -6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "teahouse_door_01",
                            pos: ve.create(-2, -6.5),
                            scale: 1,
                            ori: 3
                        }, {
                            type: "pot_04",
                            pos: ve.create(4.5, 4.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "pot_05",
                            pos: ve.create(-4.5, 4.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "loot_tier_helmet_forest",
                            pos: ve.create(0, 0),
                            scale: 1,
                            ori: 0
                        }]
                    };
                    return ke.mergeDeep(t, e || {})
                }({
                    terrain: {
                        lakeCenter: !0
                    }
                }),
                teahouse_complex_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: []
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(24, 18))],
                    mapGroundPatches: [{
                        bound: _e.createAabbExtents(ve.create(0, 0), ve.create(21, 15)),
                        color: 6066442,
                        roughness: .05,
                        offsetDist: .25
                    }],
                    floor: {
                        surfaces: [{
                            type: "grass",
                            collision: []
                        }],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "teahouse_01",
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_02",
                        pos: ve.create(12, 11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_02",
                        pos: ve.create(-16, -6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_07s",
                        pos: ve.create(-3, 12),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "tree_07s",
                        pos: ve.create(-15, 12),
                        scale: .9,
                        ori: 0
                    }, {
                        type: c({
                            tree_08s: 2,
                            "": 1
                        }),
                        pos: ve.create(-10, -13),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            tree_08s: 2,
                            "": 1
                        }),
                        pos: ve.create(-17.5, 2.5),
                        scale: 1.2,
                        ori: 0
                    }, {
                        type: c({
                            tree_08s: 2,
                            "": 1
                        }),
                        pos: ve.create(18, -6.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            tree_08s: 2,
                            "": 1
                        }),
                        pos: ve.create(17.5, 5),
                        scale: 1.2,
                        ori: 0
                    }, {
                        type: "tree_07s",
                        pos: ve.create(3, -12),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "tree_07s",
                        pos: ve.create(15, -12),
                        scale: .9,
                        ori: 0
                    }]
                },
                bunker_egg_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 7.75), ve.create(2, 3.25))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-generic-floor-01.img",
                            pos: ve.create(0, 7.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                        vision: {
                            dist: 5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        imgs: []
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_short_6",
                        pos: ve.create(0, 5.3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(-2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(5, 8),
                        scale: 1.05,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(-5, 7.5),
                        scale: 1.1,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(-1.25, 15.75),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_01",
                        pos: ve.create(-5, -0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "stone_01",
                        pos: ve.create(-5.75, -1.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "decal_vent_02",
                        pos: ve.create(4.5, -8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bush_01",
                        pos: ve.create(5.75, -6.75),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_egg_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, -4.5), ve.create(10, 9))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-egg-chamber-floor-01a.img",
                            pos: ve.create(-.15, -4.6),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-egg-chamber-floor-01b.img",
                            pos: ve.create(0, 9.24),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, -4.5), ve.create(10, 9))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, -4.5), ve.create(10, 9))],
                        imgs: [{
                            sprite: "map-bunker-egg-chamber-ceiling-01.img",
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }],
                        vision: {
                            dist: 5,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(0, 11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(-10.5, -3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(10.5, -3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_24",
                        pos: ve.create(0, -14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-2, 5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_07",
                        pos: ve.create(0, -4.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-7, -11),
                        scale: .9,
                        ori: 0
                    }]
                },
                bunker_egg_sublevel_02: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, -4.5), ve.create(10, 9))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-egg-chamber-floor-01a.img",
                            pos: ve.create(-.15, -4.6),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-egg-chamber-floor-01b.img",
                            pos: ve.create(0, 9.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, -4.5), ve.create(10, 9))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, -4.5), ve.create(10, 9))],
                        imgs: [{
                            sprite: "map-bunker-egg-chamber-ceiling-01.img",
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }],
                        vision: {
                            dist: 5,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(0, 11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(-10.5, -3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(10.5, -3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_24",
                        pos: ve.create(0, -14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-2, 5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_07b",
                        pos: ve.create(0, -4.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-7, -11),
                        scale: .9,
                        ori: 0
                    }]
                },
                bunker_structure_01: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 5), ve.create(7.5, 12.5))],
                    layers: [{
                        type: "bunker_egg_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_egg_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 8.4), ve.create(2, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(0, -3.7), ve.create(10, 9.5))]
                },
                bunker_structure_01b: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 5), ve.create(7.5, 12.5))],
                    layers: [{
                        type: "bunker_egg_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_egg_sublevel_02",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 8.4), ve.create(2, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(0, -3.7), ve.create(10, 9.5))]
                },
                bunker_hydra_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(20.25, 3.5), ve.create(6.25, 5.5)),
                            color: 2894892
                        }, {
                            collider: _e.createAabbExtents(ve.create(32.25, 3.5), ve.create(6.75, 9.25)),
                            color: 3815994
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(20.25, 3.5), ve.create(6.25, 5.5)), _e.createAabbExtents(ve.create(32.25, 3.5), ve.create(6.75, 9.25))]
                        }, {
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(16.25, 3.5), ve.create(3.25, 2)), _e.createAabbExtents(ve.create(-16.5, -90.75), ve.create(2, 3.25)), _e.createAabbExtents(ve.create(40, -50.5), ve.create(2, 3.25))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hydra-floor-01.img",
                            pos: ve.create(25.75, 3.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-generic-floor-01.img",
                            pos: ve.create(-16.5, -90),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-bunker-generic-floor-01.img",
                            pos: ve.create(40, -51),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(19.25, 3.5), ve.create(6.25, 5.5)), _e.createAabbExtents(ve.create(32.25, 3.5), ve.create(6.75, 9.25))],
                        scopeOut: [_e.createAabbExtents(ve.create(19.25, 3.5), ve.create(6.25, 5.5)), _e.createAabbExtents(ve.create(32.25, 3.5), ve.create(6.75, 9.25))],
                        imgs: [{
                            sprite: "map-bunker-hydra-ceiling-01.img",
                            pos: ve.create(25.75, 3.5),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }],
                        vision: {
                            dist: 5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_13",
                        pos: ve.create(18.75, 9.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "concrete_wall_ext_13",
                        pos: ve.create(18.75, -2.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "concrete_wall_ext_11",
                        pos: ve.create(12.75, 3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_7",
                        pos: ve.create(25.75, 9),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_7",
                        pos: ve.create(25.75, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_2",
                        pos: ve.create(26.25, 12.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "concrete_wall_ext_2",
                        pos: ve.create(26.25, -5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "concrete_wall_ext_8",
                        pos: ve.create(35.25, 12.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "concrete_wall_ext_8",
                        pos: ve.create(35.25, -5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "concrete_wall_ext_17",
                        pos: ve.create(38.75, 3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "police_wall_int_7",
                        pos: ve.create(32.75, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "police_wall_int_2",
                        pos: ve.create(33.25, 4.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_01",
                        pos: ve.create(38.25, 4.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: c({
                            toilet_03: 5,
                            toilet_04: 1
                        }),
                        pos: ve.create(35.75, 10.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_08",
                        pos: ve.create(35.75, -2.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_6",
                        pos: ve.create(13, 3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(17, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(17, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "decal_vent_01",
                        pos: ve.create(-1.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_02",
                        pos: ve.create(8, -.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_6",
                        pos: ve.create(-16.5, -87.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(-19, -91),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(-14, -91),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_01",
                        pos: ve.create(-15.15, -79.55),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_6",
                        pos: ve.create(40, -53.25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(37.5, -50),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(42.5, -50),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_02",
                        pos: ve.create(40, -60.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(-11.5, -92),
                        scale: 1.05,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(-21.5, -92.5),
                        scale: 1.1,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(-17.5, -83.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(45, -50),
                        scale: 1.05,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(35, -50.5),
                        scale: 1.1,
                        ori: 0
                    }, {
                        type: "tree_01",
                        pos: ve.create(38.75, -42.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_hydra_01",
                        pos: ve.create(3.5, -48.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }]
                },
                bunker_hydra_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(3.5, 3), ve.create(9.5, 9))]
                        }, {
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(-15.5, -79.5), ve.create(3, 8)), _e.createAabbExtents(ve.create(40.5, -62), ve.create(9.5, 8))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hydra-chamber-floor-01a.img",
                            pos: ve.create(17.5, 3.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hydra-chamber-floor-01b.img",
                            pos: ve.create(3.5, 2.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hydra-chamber-floor-02.img",
                            pos: ve.create(-15.5, -83),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hydra-chamber-floor-03.img",
                            pos: ve.create(40.5, -58.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(3.5, 2.25), ve.create(10, 10)), _e.createAabbExtents(ve.create(-15, -77), ve.create(5.5, 10.5)), _e.createAabbExtents(ve.create(38, -62), ve.create(11.5, 8))],
                        scopeOut: [_e.createAabbExtents(ve.create(3.5, 2.25), ve.create(10, 10)), _e.createAabbExtents(ve.create(-15, -77), ve.create(5.5, 10.5)), _e.createAabbExtents(ve.create(38, -62), ve.create(11.5, 8))],
                        imgs: [{
                            sprite: "map-bunker-hydra-chamber-ceiling-01.img",
                            pos: ve.create(7, 2),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }, {
                            sprite: "map-bunker-hydra-chamber-ceiling-02.img",
                            pos: ve.create(-13.5, -76.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }, {
                            sprite: "map-bunker-hydra-chamber-ceiling-03.img",
                            pos: ve.create(38, -62),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 10,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(20, 3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(16.5, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(16.5, 0),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(14, 12),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(14, -5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(2, 13.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(-7, 2.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(-3, -6.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(10, -6.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(13.5, 5.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-.5, -7.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(7.5, -7.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(0, 7.25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(10.25, -2.75),
                        scale: .9,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(10.25, 9.75),
                        scale: .9,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-3.5, -3),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_23",
                        pos: ve.create(-20, -83),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_19",
                        pos: ve.create(-11, -79),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-13, -90.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(-16.5, -94),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-18.5, -87.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(-12.15, -79),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(-12.15, -74.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(-12.15, -83.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(40, -47),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(36.5, -50.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(43.5, -50.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(33, -53),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(30, -55),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(30, -66),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_16",
                        pos: ve.create(36.5, -71),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(48.25, -70),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(50, -62),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(48.25, -54),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(38, -53.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_08",
                        pos: ve.create(34, -67),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "locker_01",
                        pos: ve.create(46.5, -55.15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(48.9, -57.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(48.9, -62),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(48.9, -66.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(46.5, -68.85),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bunker_hydra_compartment_01",
                        pos: ve.create(3.5, -18.95),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_hydra_compartment_02",
                        pos: ve.create(6, -50),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_hydra_compartment_03",
                        pos: ve.create(10.5, -74.95),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_hydra_compartment_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 1.5), ve.create(9.5, 12.5))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hydra-compartment-floor-01.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 1.25), ve.create(10, 10))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 1.25), ve.create(10, 10))],
                        imgs: [{
                            sprite: "map-bunker-hydra-compartment-ceiling-01.img",
                            pos: ve.create(0, 1.25),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_17",
                        pos: ve.create(-9.75, 3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(-6.5, 9.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(6.5, 10.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(10.5, 1.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(-7.5, -6.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(8, -7.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_08",
                        pos: ve.create(6.5, 6.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "sandbags_01",
                        pos: ve.create(4.75, 1.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-4, -8.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(4, -8.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "locker_01",
                        pos: ve.create(-6, 8.4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(-8.35, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "locker_01",
                        pos: ve.create(-8.35, 1.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "locker_01",
                        pos: ve.create(-8.35, -3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "locker_01",
                        pos: ve.create(-6, -5.4),
                        scale: 1,
                        ori: 2
                    }]
                },
                metal_wall_column_5x12: Z({
                    material: "metal",
                    extents: ve.create(2.5, 6)
                }),
                bunker_hydra_compartment_02: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(-2.5, 16), ve.create(22, 4)), _e.createAabbExtents(ve.create(-2.5, 9.5), ve.create(6, 2.5)), _e.createAabbExtents(ve.create(0, -4.5), ve.create(25, 17))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hydra-compartment-floor-02.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(-2, 3), ve.create(22.5, 19.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(-2, 3), ve.create(22.5, 19.5))],
                        imgs: [{
                            sprite: "map-bunker-hydra-compartment-ceiling-02.img",
                            pos: ve.create(0, 1),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(-17, 21.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(12, 21.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_42",
                        pos: ve.create(-26, -.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_29",
                        pos: ve.create(21, 6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-19, -18.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-18.5, -14),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(-15, -15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_9",
                        pos: ve.create(-9, -16),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_9",
                        pos: ve.create(4, -16),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(10, -15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(17, -14),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_column_5x12",
                        pos: ve.create(-14.5, 13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_column_5x12",
                        pos: ve.create(9.5, 13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(-7, 12),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(2, 12),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "lab_window_01",
                        pos: ve.create(-7, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_window_01",
                        pos: ve.create(-4, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_window_01",
                        pos: ve.create(-1, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_window_01",
                        pos: ve.create(2, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_4",
                        pos: ve.create(-9, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_4",
                        pos: ve.create(4, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-20.5, 13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(15.5, 13),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_01",
                        pos: ve.create(-17.5, 7.75),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "vat_01",
                        pos: ve.create(-12.25, 7.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "vat_01",
                        pos: ve.create(-12, -2.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "vat_01",
                        pos: ve.create(-18, -2.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "vat_02",
                        pos: ve.create(-2.5, 1.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "power_box_01",
                        pos: ve.create(-2.5, -3),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "crate_01",
                        pos: ve.create(12.5, 7.75),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "vat_01",
                        pos: ve.create(7.25, 7.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "vat_01",
                        pos: ve.create(7, -2.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "vat_01",
                        pos: ve.create(13, -2.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "vat_01",
                        pos: ve.create(-10.75, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-4.5, -16.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "vat_01",
                        pos: ve.create(5.75, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "fire_ext_01",
                        pos: ve.create(1.5, -14.15),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_03",
                        pos: ve.create(-20.5, -16.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_02",
                        pos: ve.create(20.5, -8.5),
                        scale: 1,
                        ori: 2
                    }]
                },
                bunker_hydra_compartment_03: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, 2), ve.create(9, 8.75))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hydra-compartment-floor-03.img",
                            pos: ve.create(0, -.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, .75), ve.create(10, 7.75))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, .75), ve.create(10, 7.75))],
                        imgs: [{
                            sprite: "map-bunker-hydra-compartment-ceiling-03.img",
                            pos: ve.create(0, 1),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_17",
                        pos: ve.create(-10.5, -1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(0, -8),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(10.5, -1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_14",
                        pos: ve.create(2, 6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-6.5, -1.5),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-1.75, 2),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-2, -2),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "case_03",
                        pos: ve.create(7, -4),
                        scale: 1,
                        ori: 3
                    }]
                },
                bunker_structure_02: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(25.5, 3.5), ve.create(16, 11.5)), _e.createAabbExtents(ve.create(-16.5, -89.5), ve.create(7, 7.5)), _e.createAabbExtents(ve.create(40, -47.25), ve.create(6.5, 7.25)), _e.createAabbExtents(ve.create(3.5, -48.5), ve.create(3, 3))],
                    layers: [{
                        type: "bunker_hydra_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_hydra_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(16.4, 3.5), ve.create(2.6, 2)),
                        downDir: ve.create(-1, 0)
                    }, {
                        collision: _e.createAabbExtents(ve.create(-16.5, -90.4), ve.create(2, 3.1)),
                        downDir: ve.create(0, 1)
                    }, {
                        collision: _e.createAabbExtents(ve.create(40, -50.5), ve.create(2, 3.1)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(3.5, -7.2), ve.create(10.75, 20)), _e.createAabbExtents(ve.create(-15, -79.75), ve.create(5, 8.5)), _e.createAabbExtents(ve.create(39, -61.85), ve.create(12, 9)), _e.createAabbExtents(ve.create(3.5, -49.2), ve.create(23.49, 21.99)), _e.createAabbExtents(ve.create(10.5, -76.7), ve.create(10, 5.5))]
                },
                bunker_storm_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 10), ve.create(3.6, 5.8)),
                            color: 6707790
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 7.75), ve.create(2, 3.25))]
                        }, {
                            type: "shack",
                            collision: [_e.createAabbExtents(ve.create(0, 13.5), ve.create(3.75, 2.5))]
                        }, {
                            type: "asphalt",
                            collision: [_e.createAabbExtents(ve.create(5, 13.75), ve.create(1.25, 2.25))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-storm-floor-02.img",
                            pos: ve.create(1.25, 10),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 10), ve.create(3.5, 5.6))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 10), ve.create(3.8, 5.9))],
                        vision: {
                            dist: 5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        imgs: [{
                            sprite: "map-building-shack-ceiling-01.img",
                            pos: ve.create(-1, 10),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }],
                        destroy: {
                            wallCount: 2,
                            particle: "shackBreak",
                            particleCount: 25,
                            residue: "none"
                        }
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_short_6",
                        pos: ve.create(0, 5.3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(-2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "shack_wall_bot",
                        pos: ve.create(3.39, 8.6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "shack_wall_side_left",
                        pos: ve.create(.3, 4.52),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "shack_wall_top",
                        pos: ve.create(-3.39, 9.73),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "shack_wall_side_right",
                        pos: ve.create(0, 15.58),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-2, 17.9),
                        scale: .8,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(1.45, 17.7),
                        scale: .85,
                        ori: 0
                    }, {
                        type: "decal_vent_01",
                        pos: ve.create(-5, -0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_02",
                        pos: ve.create(4.5, -8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "stone_01",
                        pos: ve.create(-4.25, -1.5),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "bush_01",
                        pos: ve.create(3.75, -6.75),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_storm_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(1, -4.4), ve.create(10.5, 9))]
                        }, {
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(19, -5.5), ve.create(7.5, 8))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-storm-chamber-floor-01.img",
                            pos: ve.create(8.5, -1),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(8.5, -4.5), ve.create(18, 9.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(8.5, -4.5), ve.create(18, 9.5))],
                        imgs: [{
                            sprite: "map-bunker-storm-chamber-ceiling-01.img",
                            pos: ve.create(8.5, -1),
                            scale: 1,
                            alpha: 1,
                            tint: 16777215
                        }],
                        vision: {
                            dist: 5,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(0, 11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(-10.5, -3),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(-1.5, -14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(10.5, -11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(12.5, -11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(21.5, -14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(27.5, -5.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_17",
                        pos: ve.create(20.5, 3.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_9",
                        pos: ve.create(10.5, 2.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(12.5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-2, 5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_01",
                        pos: ve.create(-6.5, 1.5),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_04",
                        pos: ve.create(6, -1.2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_04",
                        pos: ve.create(3.9, -6.4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(16, -11.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "control_panel_02",
                        pos: ve.create(20, -11.25),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(24, -11.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "crate_08",
                        pos: ve.create(23.5, -.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            case_03: 1,
                            chest_02: 9
                        }),
                        pos: ve.create(16.5, .25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(11.5, -2),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-7, -11),
                        scale: .9,
                        ori: 0
                    }]
                },
                bunker_structure_03: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 6), ve.create(7, 16.5))],
                    layers: [{
                        type: "bunker_storm_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_storm_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 8.4), ve.create(2, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(8.5, -3.7), ve.create(18, 9.5))]
                },
                bunker_conch_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(20, 3.35), ve.create(5.5, 2.5)),
                            color: 2703694
                        }, {
                            collider: _e.createAabbExtents(ve.create(46.5, -32.55), ve.create(5.5, 2.5)),
                            color: 2703694
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(16.25, 3.5), ve.create(3.25, 2)), _e.createAabbExtents(ve.create(44.25, -32.5), ve.create(3.25, 2)), _e.createAabbExtents(ve.create(22, 3.35), ve.create(8, 2.5)), _e.createAabbExtents(ve.create(50.5, -32.55), ve.create(8, 2.5))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-conch-floor-01.img",
                            pos: ve.create(20.75, 3.45),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-conch-floor-01.img",
                            pos: ve.create(48.75, -32.45),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(19, 3.35), ve.create(5.5, 2.5)), _e.createAabbExtents(ve.create(47.5, -32.55), ve.create(5.5, 2.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(22, 3.35), ve.create(8, 2.5)), _e.createAabbExtents(ve.create(50.5, -32.55), ve.create(8, 2.5))],
                        imgs: [{
                            sprite: "map-bunker-conch-ceiling-01.img",
                            pos: ve.create(19.25, 3.35),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-conch-ceiling-01.img",
                            pos: ve.create(47.25, -32.55),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }],
                        vision: {}
                    },
                    mapObjects: [{
                        type: "container_wall_top",
                        pos: ve.create(13.7, 3.35),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_wall_side",
                        pos: ve.create(19.6, 5.7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_wall_side",
                        pos: ve.create(19.6, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(24, 9),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(18, -2),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "container_wall_top",
                        pos: ve.create(41.7, -32.55),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_wall_side",
                        pos: ve.create(47.6, -34.9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "container_wall_side",
                        pos: ve.create(47.6, -30.2),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(47, -27),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(40, -37),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_03",
                        pos: ve.create(-2, -13.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_conch_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(1, 4), ve.create(12.5, 3.5)), _e.createAabbExtents(ve.create(28, -30), ve.create(13.5, 4.5))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-conch-chamber-floor-01.img",
                            pos: ve.create(4, 5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-conch-chamber-floor-02.img",
                            pos: ve.create(34.86, -29.9),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(1, 3.5), ve.create(12.5, 5)), _e.createAabbExtents(ve.create(26.75, -30), ve.create(15.25, 4.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(1, 3.5), ve.create(12.5, 5)), _e.createAabbExtents(ve.create(26.75, -30), ve.create(15.25, 4.5))],
                        imgs: [{
                            sprite: "map-bunker-conch-chamber-ceiling-01.img",
                            pos: ve.create(-2, 3.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }, {
                            sprite: "map-bunker-conch-chamber-ceiling-02.img",
                            pos: ve.create(26.25, -29.9),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 7,
                            width: 3
                        }
                    },
                    occupiedEmitters: [{
                        type: "bunker_bubbles_01",
                        pos: ve.create(-2, -13.5),
                        rot: 0,
                        scale: .5,
                        layer: 0
                    }],
                    mapObjects: [{
                        type: "house_door_02",
                        pos: ve.create(13.5, 1.35),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(20, 3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(16.5, 6.7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_29",
                        pos: ve.create(7, 0),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_16",
                        pos: ve.create(5.5, 9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_9",
                        pos: ve.create(-7, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(-13, 3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(9.5, 7.85),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(5, 7.85),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(.5, 7.85),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_pipes_01",
                        pos: ve.create(-4.5, 5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "house_door_02",
                        pos: ve.create(41.5, -34.55),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(48, -32.4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(38.5, -35.9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(42, -29.2),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(34, -26.7),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(27, -33.4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(20, -30.9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(23.5, -23.9),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "decal_pipes_04",
                        pos: ve.create(22, -29.9),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "loot_tier_2",
                        pos: ve.create(31, -30),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_conch_compartment_01",
                        pos: ve.create(-1.5, -12.4),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_conch_compartment_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "water",
                            collision: [_e.createAabbExtents(ve.create(1, -2.5), ve.create(15, 15.5))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-conch-compartment-floor-01a.img",
                            pos: ve.create(-3, -.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-conch-compartment-floor-01b.img",
                            pos: ve.create(9.75, -17.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(-1.5, -1), ve.create(12.5, 12)), _e.createAabbExtents(ve.create(9.5, -14.5), ve.create(4, 2.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(-1.5, -1), ve.create(12.5, 12)), _e.createAabbExtents(ve.create(9.5, -14.5), ve.create(4, 2.5))],
                        imgs: [{
                            sprite: "map-bunker-conch-compartment-ceiling-01.img",
                            pos: ve.create(-.75, -5.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 7,
                            width: 3
                        }
                    },
                    occupiedEmitters: [{
                        type: "bunker_bubbles_01",
                        pos: ve.create(-.5, -1),
                        rot: 0,
                        scale: .5,
                        layer: 0
                    }],
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(-11.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-15, 7.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(-15.5, .5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(-13.5, -6.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(-11.5, -11.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(-3.5, -13.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_5",
                        pos: ve.create(4.5, -14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(9.5, -18.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(13.5, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_19",
                        pos: ve.create(11.5, -.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_19",
                        pos: ve.create(3.5, 10.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-10, 11),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(-12.25, 4.25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_02",
                        pos: ve.create(-12, .25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "fire_ext_01",
                        pos: ve.create(-3, 8.75),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_09",
                        pos: ve.create(2.75, 6.25),
                        scale: 1,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(7.5, 6.25),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "decal_pipes_02",
                        pos: ve.create(7.25, 7.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-3.75, -2),
                        scale: .8,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-1.25, -4.25),
                        scale: .8,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-7.5, -9.5),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(3.5, -9.5),
                        scale: 1,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "decal_pipes_03",
                        pos: ve.create(-5.25, -9.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(13.5, -17),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_structure_04: {
                    type: "structure",
                    terrain: {
                        waterEdge: {
                            dir: ve.create(-1, 0),
                            distMin: 15,
                            distMax: 16
                        }
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(21, 3.5), ve.create(9.5, 8)), _e.createAabbExtents(ve.create(48, -32.5), ve.create(10, 8))],
                    layers: [{
                        type: "bunker_conch_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_conch_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(16.9, 3.5), ve.create(2.6, 2)),
                        downDir: ve.create(-1, 0)
                    }, {
                        collision: _e.createAabbExtents(ve.create(44.9, -32.5), ve.create(2.6, 2)),
                        downDir: ve.create(-1, 0)
                    }],
                    mask: [_e.createAabbExtents(ve.create(-1.5, -9.2), ve.create(15.7, 22)), _e.createAabbExtents(ve.create(28.25, -32), ve.create(14, 8))]
                },
                bunker_crossing_stairs_01: g({}),
                bunker_crossing_stairs_01b: g({
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, .75), ve.create(2, 3.25))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, .75), ve.create(2, 3.25))],
                        imgs: [{
                            sprite: "map-bunker-crossing-ceiling-01.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    }
                }),
                bunker_crossing_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 0), ve.create(5, 5)),
                            color: 1984867
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [],
                        imgs: [{
                            sprite: "map-bunker-crossing-floor-01.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "bunker_crossing_stairs_01b",
                        pos: ve.create(34.5, 28.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "bunker_crossing_stairs_01b",
                        pos: ve.create(-36, 20),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bunker_crossing_stairs_01b",
                        pos: ve.create(36, -14),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_crossing_stairs_01",
                        pos: ve.create(-34.5, -22.5),
                        scale: 1,
                        ori: 1
                    }]
                },
                bunker_crossing_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 3.25), ve.create(38, 28))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-crossing-chamber-floor-01.img",
                            pos: ve.create(-11.44, 24),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-bunker-crossing-chamber-floor-03.img",
                            pos: ve.create(28.5, 23.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 2
                        }, {
                            sprite: "map-bunker-crossing-chamber-floor-02.img",
                            pos: ve.create(-28.5, -17.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-bunker-crossing-chamber-floor-01.img",
                            pos: ve.create(11.45, -18),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(-3, 27.5), ve.create(35.1, 5)), _e.createAabbExtents(ve.create(3, -21.5), ve.create(35.1, 5)), _e.createAabbExtents(ve.create(-4, 20.5), ve.create(3, 3)), _e.createAabbExtents(ve.create(4, -14.5), ve.create(3, 3))],
                        scopeOut: [_e.createAabbExtents(ve.create(-3, -27.5), ve.create(35, 5)), _e.createAabbExtents(ve.create(3, -21.5), ve.create(35, 5)), _e.createAabbExtents(ve.create(-4, 20.5), ve.create(3, 3)), _e.createAabbExtents(ve.create(4, -14.5), ve.create(3, 3))],
                        imgs: [{
                            sprite: "map-bunker-crossing-chamber-ceiling-01.img",
                            pos: ve.create(-3.5, 24),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }, {
                            sprite: "map-bunker-crossing-chamber-ceiling-01.img",
                            pos: ve.create(3.5, -18),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335,
                            rot: 2
                        }],
                        vision: {
                            dist: 7,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(38.5, 28.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_door_02",
                        pos: ve.create(32, 30.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "decal_pipes_05",
                        pos: ve.create(13, 28.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_48",
                        pos: ve.create(15, 32),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_35",
                        pos: ve.create(21.5, 25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(2.5, 23.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-.5, 20.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-7.5, 20.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_32",
                        pos: ve.create(-22, 29),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(-39.5, 23),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(-36, 16),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-38, 22.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-32.5, 19.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_22",
                        pos: ve.create(-20, 22),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-4.5, 29),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(-38.5, -22.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-32, -20.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "decal_pipes_05",
                        pos: ve.create(-12, -22.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "metal_wall_ext_thicker_48",
                        pos: ve.create(-15, -26),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(-31.5, -19),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_16",
                        pos: ve.create(-12, -19),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-2.5, -17.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(.5, -14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(7.5, -14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_32",
                        pos: ve.create(22, -23),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(39.5, -17),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "concrete_wall_ext_6",
                        pos: ve.create(36, -10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(38, -16.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(32.5, -13.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_22",
                        pos: ve.create(20, -16),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(4.5, -23),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "crate_06",
                        pos: ve.create(-12.5, -22.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_06",
                        pos: ve.create(-7, -22.75),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_crossing_compartment_01",
                        pos: ve.create(1.5, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_crossing_bathroom: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "water",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))]
                        }],
                        imgs: [{
                            sprite: "",
                            scale: .5,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(3.75, 2))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(3.75, 2))],
                        imgs: [{
                            sprite: "map-building-crossing-bathroom-ceiling.img",
                            scale: .5,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: c({
                            toilet_03: 5,
                            toilet_04: 1
                        }),
                        pos: ve.create(2, 0),
                        scale: 1,
                        ori: 3
                    }]
                },
                bunker_crossing_compartment_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "water",
                            collision: [_e.createAabbExtents(ve.create(-1, 3), ve.create(17, 17.5))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-crossing-compartment-floor-02.img",
                            pos: ve.create(-22.5, -10),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-crossing-compartment-floor-01.img",
                            pos: ve.create(4, 3),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(4, 3), ve.create(22, 14.5)), _e.createAabbExtents(ve.create(-22, -11), ve.create(4.5, 9))],
                        scopeOut: [_e.createAabbExtents(ve.create(4, 3), ve.create(22, 14.5)), _e.createAabbExtents(ve.create(-22, -11), ve.create(4.5, 9))],
                        imgs: [{
                            sprite: "map-bunker-crossing-compartment-ceiling-01a.img",
                            pos: ve.create(-22.475, -11),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }, {
                            sprite: "map-bunker-crossing-compartment-ceiling-01b.img",
                            pos: ve.create(3.975, 3),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 7,
                            width: 3
                        }
                    },
                    occupiedEmitters: [{
                        type: "bunker_bubbles_02",
                        pos: ve.create(-1.5, 0),
                        rot: 0,
                        scale: .5,
                        layer: 0
                    }],
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(-14, 16),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-7.5, 17.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(5.5, 16),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(16, 13.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(22, 8),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(28, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(17.5, 6.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "bunker_crossing_bathroom",
                        pos: ve.create(22, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(22, 1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(16, -6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(9.5, -10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(4.5, -11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_19",
                        pos: ve.create(-9, -10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-19.5, -8),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(-20, -14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_17",
                        pos: ve.create(-27, -11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(-23, -1),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_14",
                        pos: ve.create(-19, 7.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "control_panel_04",
                        pos: ve.create(-15.25, 8.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(-15.5, 12.75),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "control_panel_03",
                        pos: ve.create(-15.5, 4.25),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-5, 10.25),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-3.25, 12.5),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(1.15, 14.85),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_03",
                        pos: ve.create(4.5, 14.85),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bookshelf_01",
                        pos: ve.create(10.5, 13),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bed_sm_01",
                        pos: ve.create(10.5, 10),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "crate_01",
                        pos: ve.create(-4.5, -6.25),
                        scale: .8,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-3, -2.5),
                        scale: .8,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-1, -6.25),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "fire_ext_01",
                        pos: ve.create(14, -.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "refrigerator_01",
                        pos: ve.create(8.25, -6.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "oven_01",
                        pos: ve.create(12.25, -6.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "crossing_door_01",
                        pos: ve.create(-17.85, -2.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "couch_01",
                        pos: ve.create(-12, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "screen_01",
                        pos: ve.create(-12, -7.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-23.5, -4.5),
                        scale: .8,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "loot_tier_woodaxe",
                        pos: ve.create(-23.5, -8.5),
                        scale: .8,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-23.5, -14),
                        scale: .8,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crossing_door_01",
                        pos: ve.create(-21.5, -20.15),
                        scale: 1,
                        ori: 1
                    }]
                },
                bunker_structure_05: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1,
                        bridge: {
                            nearbyWidthMult: 1.2
                        },
                        spawnPriority: 100
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(35.5, 28.5), ve.create(6, 6)), _e.createAabbExtents(ve.create(-36, 19), ve.create(6, 6)), _e.createAabbExtents(ve.create(36, -13), ve.create(6, 6)), _e.createAabbExtents(ve.create(-35.5, -22.5), ve.create(6, 6)), _e.createAabbExtents(ve.create(0, 0), ve.create(6, 6))],
                    bridgeLandBounds: [_e.createAabbExtents(ve.create(35.5, 28.5), ve.create(5, 5)), _e.createAabbExtents(ve.create(-36, 19), ve.create(5, 5)), _e.createAabbExtents(ve.create(36, -13), ve.create(5, 5)), _e.createAabbExtents(ve.create(-35.5, -22.5), ve.create(5, 5))],
                    bridgeWaterBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(5, 5))],
                    layers: [{
                        type: "bunker_crossing_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_crossing_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(35.6, 28.5), ve.create(2.6, 2)),
                        downDir: ve.create(-1, 0)
                    }, {
                        collision: _e.createAabbExtents(ve.create(-36, 19), ve.create(2, 2.6)),
                        downDir: ve.create(0, 1)
                    }, {
                        collision: _e.createAabbExtents(ve.create(36, -13), ve.create(2, 2.6)),
                        downDir: ve.create(0, -1)
                    }, {
                        collision: _e.createAabbExtents(ve.create(-35.5, -22.5), ve.create(2.6, 2)),
                        downDir: ve.create(1, 0)
                    }],
                    mask: [_e.createAabbExtents(ve.create(-3.7, 27), ve.create(36.5, 5)), _e.createAabbExtents(ve.create(3.7, -21), ve.create(36.5, 5)), _e.createAabbExtents(ve.create(0, 3), ve.create(30, 18.95))]
                },
                bunker_hatchet_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 10), ve.create(3.6, 5.8)),
                            color: 6707790
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 7.75), ve.create(2, 3.25))]
                        }, {
                            type: "shack",
                            collision: [_e.createAabbExtents(ve.create(0, 13.5), ve.create(3.75, 2.5)), _e.createAabbExtents(ve.create(5, 13.75), ve.create(1.25, 2.25))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-storm-floor-02.img",
                            pos: ve.create(1.25, 10),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 10), ve.create(3.5, 5.6))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 10), ve.create(3.8, 5.9))],
                        vision: {
                            dist: 5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        imgs: [{
                            sprite: "map-building-shack-ceiling-01.img",
                            pos: ve.create(-1, 10),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }],
                        destroy: {
                            wallCount: 2,
                            particle: "shackBreak",
                            particleCount: 25,
                            residue: "none"
                        }
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_short_6",
                        pos: ve.create(0, 5.3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(-2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_short_7",
                        pos: ve.create(2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "shack_wall_bot",
                        pos: ve.create(3.39, 8.6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "shack_wall_side_left",
                        pos: ve.create(.3, 4.52),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "shack_wall_top",
                        pos: ve.create(-3.39, 9.73),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "shack_wall_side_right",
                        pos: ve.create(0, 15.58),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-2, 17.9),
                        scale: .8,
                        ori: 0,
                        inheritOri: !1
                    }, {
                        type: "barrel_01",
                        pos: ve.create(1.45, 17.7),
                        scale: .85,
                        ori: 0
                    }, {
                        type: "decal_vent_01",
                        pos: ve.create(5, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "decal_vent_02",
                        pos: ve.create(5, -8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "tree_07",
                        pos: ve.create(6.75, -4.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_hatchet_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(-3, -4.4), ve.create(13, 9))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hatchet-chamber-floor-01a.img",
                            pos: ve.create(0, -4.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-chamber-floor-01b.img",
                            pos: ve.create(0, 9.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-chamber-floor-01c.img",
                            pos: ve.create(-15, -9.475),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(-3, -4.4), ve.create(13, 9.25))],
                        scopeOut: [_e.createAabbExtents(ve.create(-3, -4.4), ve.create(13, 9.25))],
                        imgs: [{
                            sprite: "map-bunker-hatchet-chamber-ceiling-01.img",
                            pos: ve.create(-3, -4.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 5,
                            width: 3
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(0, 11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(-8.5, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(8.5, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(10.5, -6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(-10.5, -1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_14",
                        pos: ve.create(-16, -7.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_25",
                        pos: ve.create(-3.5, -14.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-2, 5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-5, .5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(6.75, -10.75),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_06",
                        pos: ve.create(0, -11),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "crate_06",
                        pos: ve.create(7, -4),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "bunker_hatchet_compartment_01",
                        pos: ve.create(-32, -1.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_hatchet_compartment_02",
                        pos: ve.create(-63.5, -4),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bunker_hatchet_compartment_03",
                        pos: ve.create(-55, 20.5),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_hatchet_compartment_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(16, 13))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hatchet-compartment-floor-01.img",
                            pos: ve.create(0, .5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(16, 12.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(16, 12.5))],
                        imgs: [{
                            sprite: "map-bunker-hatchet-compartment-ceiling-01.img",
                            pos: ve.create(0, 0),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(10.5, 2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(3.5, 7),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(-3.5, 14.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(-10.5, 6),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_32",
                        pos: ve.create(0, -13),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_14",
                        pos: ve.create(-16, -6),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(16, -7.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-16, -7.5),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-9, 12.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "metal_wall_ext_10",
                        pos: ve.create(8.65, -.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_10",
                        pos: ve.create(3, 5.15),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "locker_01",
                        pos: ve.create(.5, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(5.5, 5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "locker_01",
                        pos: ve.create(8.5, 2),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "locker_01",
                        pos: ve.create(8.5, -3),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "barrel_01",
                        pos: ve.create(1.5, -.5),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "fire_ext_01",
                        pos: ve.create(.5, -11.25),
                        scale: .9,
                        ori: 1
                    }, {
                        type: "couch_01",
                        pos: ve.create(-7.5, -2.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-7, 8.5),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }]
                },
                bunker_hatchet_compartment_02: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(16, 15))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hatchet-compartment-floor-02a.img",
                            pos: ve.create(4, -8.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-compartment-floor-02b.img",
                            pos: ve.create(.75, 6),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-compartment-floor-02c.img",
                            pos: ve.create(-14, .5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-compartment-floor-02d.img",
                            pos: ve.create(-6.27, 14.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(-.5, 0), ve.create(16, 15))],
                        scopeOut: [_e.createAabbExtents(ve.create(-.5, 0), ve.create(16, 15))],
                        imgs: [{
                            sprite: "map-bunker-hatchet-compartment-ceiling-02.img",
                            pos: ve.create(-.5, -.5),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(11.5, -10.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_13",
                        pos: ve.create(10, 4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(3, 9.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(6, -13),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_12",
                        pos: ve.create(-1.5, -16.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_7",
                        pos: ve.create(-9, -13.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_11",
                        pos: ve.create(-13, -8.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_15",
                        pos: ve.create(-17, .5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_6",
                        pos: ve.create(-12.5, 6.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_25",
                        pos: ve.create(-11, 20.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_14",
                        pos: ve.create(-4, 15),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "lab_door_01",
                        pos: ve.create(-5.5, 15),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-1.25, .5),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(2.75, -1.75),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_04",
                        pos: ve.create(3, 2.5),
                        scale: .85,
                        ori: 0
                    }, {
                        type: "crate_01",
                        pos: ve.create(-7.5, 11),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "control_panel_06",
                        pos: ve.create(2, 6.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "control_panel_06",
                        pos: ve.create(6.75, 1.5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "loot_tier_hatchet_melee",
                        pos: ve.create(6.75, 6.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_12_2",
                        pos: ve.create(-10.5, -1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "glass_wall_12_2",
                        pos: ve.create(-1.5, -10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "loot_tier_imperial_skin",
                        pos: ve.create(-13.5, -4.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_pineapple_skin",
                        pos: ve.create(-13.5, -1),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_tarkhany_skin",
                        pos: ve.create(-13.5, 2.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_spetsnaz_skin",
                        pos: ve.create(-5, -13),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_lumber_skin",
                        pos: ve.create(-1.5, -13),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "loot_tier_verde_skin",
                        pos: ve.create(2, -13),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_hatchet_compartment_03: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(19, 10))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-hatchet-compartment-floor-03a.img",
                            pos: ve.create(-14.5, -8.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-compartment-floor-03b.img",
                            pos: ve.create(-9, 3),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-compartment-floor-03c.img",
                            pos: ve.create(5.5, -.25),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-hatchet-compartment-floor-03d.img",
                            pos: ve.create(14.5, -3.75),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(19, 9.5))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(19, 9.5))],
                        imgs: [{
                            sprite: "map-bunker-hatchet-compartment-ceiling-03.img",
                            pos: ve.create(0, 0),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_25",
                        pos: ve.create(1.5, -4),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(12, 3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_10",
                        pos: ve.create(1.5, 6.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_21",
                        pos: ve.create(-10.5, 10),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "crate_01",
                        pos: ve.create(-16, -5),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_01",
                        pos: ve.create(3, -.5),
                        scale: .85,
                        ori: 0,
                        ignoreMapSpawnReplacement: !0
                    }, {
                        type: "crate_06",
                        pos: ve.create(-11.75, -1.05),
                        scale: .85,
                        ori: 0
                    }, {
                        type: "crate_06",
                        pos: ve.create(-7, -1.05),
                        scale: .85,
                        ori: 0
                    }, {
                        type: "case_03",
                        pos: ve.create(-2.5, 6.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-7, 6.75),
                        scale: .9,
                        ori: 0
                    }, {
                        type: "barrel_01",
                        pos: ve.create(-11, 5.5),
                        scale: .9,
                        ori: 0
                    }]
                },
                bunker_structure_06: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(1, 6), ve.create(7, 13.5))],
                    layers: [{
                        type: "bunker_hatchet_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_hatchet_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 8.4), ve.create(2, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(-3, -3.7), ve.create(13, 9.5)), _e.createAabbExtents(ve.create(-48.025, 6), ve.create(32, 24.95))]
                },
                bunker_eye_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 7.5), ve.create(2, 3.25)),
                            color: 6946816
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "container",
                            collision: [_e.createAabbExtents(ve.create(0, 7.75), ve.create(2, 3.25))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-generic-floor-01.img",
                            pos: ve.create(0, 7.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 8.25), ve.create(2, 3.25))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 8.25), ve.create(2, 3.25))],
                        imgs: [{
                            sprite: "map-bunker-generic-ceiling-01.img",
                            pos: ve.create(0, 7.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }]
                    },
                    puzzle: {
                        solution: "bunker_eye_01",
                        completeUseType: "eye_door_01",
                        completeOffDelay: 1,
                        completeUseDelay: 2,
                        errorResetDelay: 1,
                        pieceResetDelay: 2,
                        sound: {
                            fail: "door_error_01",
                            complete: ""
                        }
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_6",
                        pos: ve.create(0, 5.3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_7",
                        pos: ve.create(-2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_7",
                        pos: ve.create(2.5, 8.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bush_01",
                        pos: ve.create(5, 23),
                        scale: 1.2,
                        ori: 0
                    }]
                },
                vault_door_eye: T({
                    material: "metal",
                    hinge: ve.create(1, 3.5),
                    extents: ve.create(1, 3.5),
                    img: {
                        sprite: "map-door-02.img"
                    },
                    door: {
                        interactionRad: 1.5,
                        openSpeed: 10,
                        openOneWay: -1,
                        openDelay: .1,
                        openOnce: !0,
                        canUse: !1,
                        spriteAnchor: ve.create(.2, 1),
                        sound: {
                            open: "none",
                            close: "none",
                            change: "none"
                        }
                    }
                }),
                metal_wall_column_4x8: Z({
                    material: "metal",
                    extents: ve.create(2, 4)
                }),
                stone_wall_int_4: Z({
                    material: "stone",
                    extents: ve.create(.6, 2),
                    img: m("map-wall-04-stone.img", 16777215)
                }),
                bunker_eye_sublevel_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [{
                            type: "bunker",
                            collision: [_e.createAabbExtents(ve.create(0, -12), ve.create(14, 17))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-eye-chamber-floor-01a.img",
                            pos: ve.create(0, -8.5),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-bunker-eye-chamber-floor-01b.img",
                            pos: ve.create(13, -23),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, -12), ve.create(14, 17))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, -12), ve.create(14, 17))],
                        imgs: [{
                            sprite: "map-bunker-eye-chamber-ceiling-01.img",
                            pos: ve.create(0, -12),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }],
                        vision: {
                            dist: 5,
                            width: 3
                        }
                    },
                    puzzle: {
                        solution: "bunker_eye_02",
                        completeUseType: "vault_door_eye",
                        completeOffDelay: 1,
                        completeUseDelay: 5.25,
                        errorResetDelay: 1,
                        pieceResetDelay: 10,
                        sound: {
                            fail: "door_error_01",
                            complete: "vault_change_02"
                        }
                    },
                    mapObjects: [{
                        type: "concrete_wall_ext_6",
                        pos: ve.create(0, 11.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(-3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(3.5, 8),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(-7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(7, 5.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_34",
                        pos: ve.create(-10.5, -10),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(13, -26.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_4",
                        pos: ve.create(15.5, -23),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_8",
                        pos: ve.create(13, -19.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_ext_thicker_24",
                        pos: ve.create(10.5, -5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_column_4x8",
                        pos: ve.create(-7.5, -29),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "metal_wall_column_4x8",
                        pos: ve.create(7.5, -29),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "house_door_02",
                        pos: ve.create(-2, 5),
                        scale: 1,
                        ori: 3
                    }, {
                        type: "stone_04",
                        pos: ve.create(12, -23),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "stone_wall_int_4",
                        pos: ve.create(9.4, -23),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "recorder_08",
                        pos: ve.create(7.5, 2),
                        scale: 1,
                        ori: 2
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(-7, 1),
                        scale: 1,
                        ori: 1,
                        puzzlePiece: "swine"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(-7, -4),
                        scale: 1,
                        ori: 1,
                        puzzlePiece: "egg"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(-7, -9),
                        scale: 1,
                        ori: 1,
                        puzzlePiece: "storm"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(-7, -14),
                        scale: 1,
                        ori: 1,
                        puzzlePiece: "caduceus"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(-7, -19),
                        scale: 1,
                        ori: 1,
                        puzzlePiece: "crossing"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(-7, -24),
                        scale: 1,
                        ori: 1,
                        puzzlePiece: "conch"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(7, -4),
                        scale: 1,
                        ori: 3,
                        puzzlePiece: "cloud"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(7, -9),
                        scale: 1,
                        ori: 3,
                        puzzlePiece: "hydra"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(7, -14),
                        scale: 1,
                        ori: 3,
                        puzzlePiece: "hatchet"
                    }, {
                        type: "control_panel_02b",
                        pos: ve.create(7, -19),
                        scale: 1,
                        ori: 3,
                        puzzlePiece: "harpsichord"
                    }, {
                        type: "candle_lit_02",
                        pos: ve.create(0, -1.5),
                        scale: .75,
                        ori: 0
                    }, {
                        type: "candle_lit_02",
                        pos: ve.create(0, -11.5),
                        scale: .75,
                        ori: 0
                    }, {
                        type: "candle_lit_02",
                        pos: ve.create(0, -21.5),
                        scale: .75,
                        ori: 0
                    }, {
                        type: "vault_door_eye",
                        pos: ve.create(3.5, -30),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "bunker_eye_compartment_01",
                        pos: ve.create(0, -39),
                        scale: 1,
                        ori: 0
                    }]
                },
                bunker_eye_compartment_01: {
                    type: "building",
                    map: {
                        display: !1,
                        color: 6707790,
                        scale: 1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 2,
                    floor: {
                        surfaces: [{
                            type: "tile",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 10))]
                        }],
                        imgs: [{
                            sprite: "map-bunker-eye-compartment-floor-01.img",
                            pos: ve.create(0, 0),
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 10))],
                        scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(10, 10))],
                        imgs: [{
                            sprite: "map-bunker-eye-compartment-ceiling-01.img",
                            pos: ve.create(0, 0),
                            scale: 1,
                            alpha: 1,
                            tint: 6250335
                        }]
                    },
                    mapObjects: [{
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(10.5, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_20",
                        pos: ve.create(-10.5, -2),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "metal_wall_ext_thicker_18",
                        pos: ve.create(0, -10.5),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "loot_tier_eye_02",
                        pos: ve.create(0, -3.5),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "recorder_09",
                        pos: ve.create(-7, -7),
                        scale: 1,
                        ori: 2
                    }]
                },
                bunker_structure_07: {
                    type: "structure",
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    ori: 2,
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(-1, 8), ve.create(7, 6)), _e.createAabbExtents(ve.create(-40, -70), ve.create(2, 2)), _e.createAabbExtents(ve.create(40, -70), ve.create(2, 2)), _e.createAabbExtents(ve.create(0, -30), ve.create(2, 2)), _e.createAabbExtents(ve.create(5, 23), ve.create(2, 2))],
                    layers: [{
                        type: "bunker_eye_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bunker_eye_sublevel_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, 8.4), ve.create(2, 2.6)),
                        downDir: ve.create(0, -1)
                    }],
                    mask: [_e.createAabbExtents(ve.create(0, -22.2), ve.create(13.5, 28))]
                },
                bridge_lg_under_column: Z({
                    material: "concrete",
                    extents: ve.create(2.5, 10)
                }),
                concrete_wall_column_5x4: Z({
                    material: "concrete",
                    extents: ve.create(2.5, 2)
                }),
                bridge_rail_3: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 2)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                bridge_rail_12: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 6.5)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                bridge_lg_01: ee({}),
                bridge_lg_01x: ee({
                    ceiling: {
                        imgs: [{
                            sprite: "map-building-bridge-lg-ceiling.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }, {
                            sprite: "map-snow-03.img",
                            pos: ve.create(-10, -4),
                            scale: .4,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-07.img",
                            pos: ve.create(8, 4),
                            scale: .4,
                            alpha: 1,
                            tint: 16777215,
                            rot: 0
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(15, -5.25),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 1
                        }, {
                            sprite: "map-snow-06.img",
                            pos: ve.create(-15, 5.25),
                            scale: .667,
                            alpha: 1,
                            tint: 16777215,
                            rot: 3
                        }]
                    }
                }),
                bridge_lg_under_01: {
                    type: "building",
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        vision: {
                            dist: 5.5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        imgs: []
                    },
                    mapObjects: [{
                        type: "bridge_lg_under_column",
                        pos: ve.create(-14, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bridge_lg_under_column",
                        pos: ve.create(14, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                bridge_lg_structure_01: {
                    type: "structure",
                    terrain: {
                        bridge: {
                            nearbyWidthMult: 5
                        }
                    },
                    layers: [{
                        type: "bridge_lg_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bridge_lg_under_01",
                        pos: ve.create(0, 0),
                        ori: 0,
                        underground: !1
                    }],
                    bridgeLandBounds: [_e.createAabbExtents(ve.create(-34, 0), ve.create(6, 9)), _e.createAabbExtents(ve.create(34, 0), ve.create(6, 9))],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, -9.5), ve.create(11.5, 1.5)),
                        downDir: ve.create(0, 1),
                        lootOnly: !0
                    }, {
                        collision: _e.createAabbExtents(ve.create(0, 9.5), ve.create(11.5, 1.5)),
                        downDir: ve.create(0, -1),
                        lootOnly: !0
                    }],
                    mask: [_e.createAabbExtents(ve.create(0, 0), ve.create(12, 8))]
                },
                bridge_xlg_under_column: Z({
                    material: "concrete",
                    extents: ve.create(2.5, 14)
                }),
                concrete_wall_column_9x4: Z({
                    material: "concrete",
                    extents: ve.create(4.5, 2)
                }),
                bridge_rail_20: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 10)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                bridge_xlg_01: function(e) {
                    var t = {
                        type: "building",
                        map: {
                            display: !0,
                            shapes: [{
                                collider: _e.createAabbExtents(ve.create(0, 0), ve.create(38.5, 12)),
                                color: 2894124
                            }, {
                                collider: _e.createAabbExtents(ve.create(-16, -13), ve.create(3, 1.5)),
                                color: 3618615
                            }, {
                                collider: _e.createAabbExtents(ve.create(16, -13), ve.create(3, 1.5)),
                                color: 3618615
                            }, {
                                collider: _e.createAabbExtents(ve.create(-16, 13), ve.create(3, 1.5)),
                                color: 3618615
                            }, {
                                collider: _e.createAabbExtents(ve.create(16, 13), ve.create(3, 1.5)),
                                color: 3618615
                            }]
                        },
                        terrain: {
                            grass: !0,
                            beach: !1
                        },
                        zIdx: 1,
                        floor: {
                            surfaces: [{
                                type: "asphalt",
                                collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(38.5, 12))]
                            }],
                            imgs: [{
                                sprite: "map-building-bridge-xlg-floor.img",
                                scale: .5,
                                alpha: 1,
                                tint: 16777215
                            }]
                        },
                        ceiling: {
                            scopeIn: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                            scopeOut: [_e.createAabbExtents(ve.create(0, 0), ve.create(0, 0))],
                            imgs: []
                        },
                        mapObjects: [{
                            type: "bridge_rail_20",
                            pos: ve.create(-26, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_20",
                            pos: ve.create(-26, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_20",
                            pos: ve.create(26, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_20",
                            pos: ve.create(26, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "concrete_wall_column_9x4",
                            pos: ve.create(-16, -13),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "concrete_wall_column_9x4",
                            pos: ve.create(-16, 13),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "concrete_wall_column_9x4",
                            pos: ve.create(16, -13),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "concrete_wall_column_9x4",
                            pos: ve.create(16, 13),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "concrete_wall_ext_5",
                            pos: ve.create(-9, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "concrete_wall_ext_5",
                            pos: ve.create(-9, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "concrete_wall_ext_5",
                            pos: ve.create(9, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "concrete_wall_ext_5",
                            pos: ve.create(9, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_3",
                            pos: ve.create(-5, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_3",
                            pos: ve.create(-5, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_3",
                            pos: ve.create(5, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "bridge_rail_3",
                            pos: ve.create(5, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "concrete_wall_ext_7",
                            pos: ve.create(0, 11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "concrete_wall_ext_7",
                            pos: ve.create(0, -11.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "loot_tier_1",
                            pos: ve.create(-25, 3),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "loot_tier_1",
                            pos: ve.create(25, 3),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "sandbags_01",
                            pos: ve.create(-14, 6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "sandbags_01",
                            pos: ve.create(-20, -8),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "barrel_01",
                            pos: ve.create(-14, -8),
                            scale: .9,
                            ori: 0
                        }, {
                            type: "crate_01",
                            pos: ve.create(0, 2.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_01",
                            pos: ve.create(0, -2.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_04",
                            pos: ve.create(0, 7.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_04",
                            pos: ve.create(0, -7.5),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_01",
                            pos: ve.create(-5, 0),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_01",
                            pos: ve.create(5, 0),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_01",
                            pos: ve.create(-27, -8),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "crate_01",
                            pos: ve.create(27, -8),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "sandbags_01",
                            pos: ve.create(14, 6.5),
                            scale: 1,
                            ori: 1
                        }, {
                            type: "sandbags_01",
                            pos: ve.create(20, -8),
                            scale: 1,
                            ori: 0
                        }, {
                            type: "barrel_01",
                            pos: ve.create(14, -8),
                            scale: .9,
                            ori: 0
                        }]
                    };
                    return ke.mergeDeep(t, e || {})
                }({}),
                bridge_xlg_under_01: {
                    type: "building",
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        vision: {
                            dist: 5.5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        imgs: []
                    },
                    mapObjects: [{
                        type: "bridge_xlg_under_column",
                        pos: ve.create(-14, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "bridge_xlg_under_column",
                        pos: ve.create(14, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                bridge_xlg_structure_01: {
                    type: "structure",
                    terrain: {
                        bridge: {
                            nearbyWidthMult: 5
                        }
                    },
                    layers: [{
                        type: "bridge_xlg_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bridge_xlg_under_01",
                        pos: ve.create(0, 0),
                        ori: 0,
                        underground: !1
                    }],
                    bridgeLandBounds: [_e.createAabbExtents(ve.create(-41, 0), ve.create(5, 10)), _e.createAabbExtents(ve.create(41, 0), ve.create(5, 10))],
                    bridgeWaterBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(5, 5))],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, -13.5), ve.create(11.5, 1.5)),
                        downDir: ve.create(0, 1),
                        lootOnly: !0
                    }, {
                        collision: _e.createAabbExtents(ve.create(0, 13.5), ve.create(11.5, 1.5)),
                        downDir: ve.create(0, -1),
                        lootOnly: !0
                    }],
                    mask: [_e.createAabbExtents(ve.create(0, 0), ve.create(12, 12))]
                },
                bridge_rail_28: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.4, 14)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                brick_wall_ext_3_0_low: xe({
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(.5, 1.5)),
                    img: {
                        sprite: "",
                        scale: .5,
                        alpha: 1,
                        tint: 4456448,
                        zIdx: 10
                    }
                }),
                brick_wall_ext_11_5: Z({
                    material: "brick",
                    extents: ve.create(.5, 5.75)
                }),
                bridge_md_01: {
                    type: "building",
                    map: {
                        display: !0,
                        shapes: [{
                            collider: _e.createAabbExtents(ve.create(0, 0), ve.create(14, 3.5)),
                            color: 9322264
                        }]
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 1,
                    floor: {
                        surfaces: [{
                            type: "shack",
                            collision: [_e.createAabbExtents(ve.create(0, 0), ve.create(13.5, 3.5))]
                        }],
                        imgs: [{
                            sprite: "map-building-bridge-md-floor.img",
                            scale: .5,
                            alpha: 1,
                            tint: 16777215
                        }]
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        imgs: []
                    },
                    mapObjects: [{
                        type: "bridge_rail_28",
                        pos: ve.create(0, 3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "bridge_rail_28",
                        pos: ve.create(0, -3),
                        scale: 1,
                        ori: 1
                    }, {
                        type: "brick_wall_ext_3_0_low",
                        pos: ve.create(-6, 4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "brick_wall_ext_3_0_low",
                        pos: ve.create(6, 4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "brick_wall_ext_3_0_low",
                        pos: ve.create(-6, -4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "brick_wall_ext_3_0_low",
                        pos: ve.create(6, -4.25),
                        scale: 1,
                        ori: 0
                    }, {
                        type: c({
                            loot_tier_1: 1,
                            loot_tier_2: 1
                        }),
                        pos: ve.create(0, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                bridge_md_under_01: {
                    type: "building",
                    map: {
                        display: !1
                    },
                    terrain: {
                        grass: !0,
                        beach: !1
                    },
                    zIdx: 0,
                    floor: {
                        surfaces: [],
                        imgs: []
                    },
                    ceiling: {
                        scopeIn: [],
                        scopeOut: [],
                        vision: {
                            dist: 5.5,
                            width: 2.75,
                            linger: .5,
                            fadeRate: 6
                        },
                        imgs: []
                    },
                    mapObjects: [{
                        type: "brick_wall_ext_11_5",
                        pos: ve.create(-6, 0),
                        scale: 1,
                        ori: 0
                    }, {
                        type: "brick_wall_ext_11_5",
                        pos: ve.create(6, 0),
                        scale: 1,
                        ori: 0
                    }]
                },
                bridge_md_structure_01: {
                    type: "structure",
                    terrain: {
                        bridge: {
                            nearbyWidthMult: 8
                        }
                    },
                    mapObstacleBounds: [_e.createAabbExtents(ve.create(0, 0), ve.create(23, 7))],
                    layers: [{
                        type: "bridge_md_01",
                        pos: ve.create(0, 0),
                        ori: 0
                    }, {
                        type: "bridge_md_under_01",
                        pos: ve.create(0, 0),
                        ori: 0,
                        underground: !1
                    }],
                    bridgeLandBounds: [_e.createAabbExtents(ve.create(-15.5, 0), ve.create(3, 5)), _e.createAabbExtents(ve.create(15.5, 0), ve.create(3, 5))],
                    stairs: [{
                        collision: _e.createAabbExtents(ve.create(0, -4.75), ve.create(5.5, 1.25)),
                        downDir: ve.create(0, 1),
                        lootOnly: !0
                    }, {
                        collision: _e.createAabbExtents(ve.create(0, 4.75), ve.create(5.5, 1.25)),
                        downDir: ve.create(0, -1),
                        lootOnly: !0
                    }],
                    mask: [_e.createAabbExtents(ve.create(0, 0), ve.create(6.5, 3.6))]
                },
                container_wall_top: Z({
                    material: "metal",
                    extents: ve.create(2.75, .4)
                }),
                container_wall_side: Z({
                    material: "metal",
                    extents: ve.create(.4, 5.5)
                }),
                container_wall_side_open: Z({
                    material: "metal",
                    extents: ve.create(.4, 6)
                }),
                container_01: k({
                    open: !1,
                    tint: 2703694,
                    ceilingSprite: "map-building-container-ceiling-01.img"
                }),
                container_02: k({
                    open: !1,
                    tint: 2703694,
                    ceilingSprite: "map-building-container-ceiling-02.img"
                }),
                container_03: k({
                    open: !1,
                    tint: 2703694,
                    ceilingSprite: "map-building-container-ceiling-03.img"
                }),
                container_04: k({
                    open: !0,
                    tint: 3560807,
                    ceilingSprite: "map-building-container-open-ceiling-01.img"
                }),
                container_01x: k({
                    open: !1,
                    tint: 2703694,
                    ceilingImgs: [{
                        sprite: "map-building-container-ceiling-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 2703694
                    }, {
                        sprite: "map-snow-05.img",
                        pos: ve.create(0, 3),
                        scale: .6,
                        alpha: 1,
                        tint: 16777215,
                        rot: 0
                    }]
                }),
                container_06: k({
                    open: !1,
                    tint: 12227840,
                    ceilingSprite: "map-building-container-ceiling-01.img",
                    loot_spawner_01: "loot_tier_sv98",
                    loot_spawner_02: "loot_tier_scopes_sniper"
                }),
                loot_tier_1: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_world",
                    terrain: {
                        grass: !0,
                        beach: !0,
                        riverShore: !0
                    }
                },
                loot_tier_2: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_container",
                    terrain: {
                        grass: !0,
                        beach: !0,
                        riverShore: !0
                    }
                },
                loot_tier_beach: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_world",
                    terrain: {
                        grass: !1,
                        beach: !0
                    }
                },
                loot_tier_vault_floor: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_vault_floor",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_police_floor: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_police_floor",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_mansion_floor: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_mansion_floor",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_sv98: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_sv98",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_scopes_sniper: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_scopes_sniper",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_woodaxe: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_woodaxe",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_fireaxe: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_fireaxe",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_stonehammer: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_stonehammer",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_hatchet_melee: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_hatchet_melee",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_leaf_pile: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_leaf_pile",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_islander_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_islander_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_verde_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_verde_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_lumber_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_lumber_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_imperial_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_imperial_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_pineapple_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_pineapple_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_tarkhany_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_tarkhany_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_spetsnaz_skin: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_spetsnaz_skin",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_eye_01: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_eye_01",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_eye_02: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_eye_02",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_vector45: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_vector45",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_chrys_01: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_chrys_01",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_chrys_02: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_chrys_02",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_chrys_02b: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_chrys_02b",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_chrys_03: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_chrys_03",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                loot_tier_helmet_forest: {
                    type: "loot_spawner",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    tier: "tier_forest_helmet",
                    terrain: {
                        grass: !0,
                        beach: !0
                    }
                },
                decal_barrel_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    img: {
                        sprite: "map-barrel-res-01.img",
                        scale: .24,
                        alpha: 1,
                        tint: 0,
                        zIdx: 11
                    }
                },
                decal_frag_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    img: {
                        sprite: "map-barrel-res-01.img",
                        scale: .2,
                        alpha: .8,
                        tint: 0,
                        zIdx: 11
                    }
                },
                decal_frag_small_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    img: {
                        sprite: "map-barrel-res-01.img",
                        scale: .12,
                        alpha: .8,
                        tint: 2105376,
                        zIdx: 11
                    }
                },
                decal_bomb_iron_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    lifetime: {
                        min: 6,
                        max: 10
                    },
                    fadeChance: .6,
                    img: {
                        sprite: "map-barrel-res-01.img",
                        scale: .2,
                        alpha: .8,
                        tint: 0,
                        zIdx: 11
                    }
                },
                decal_smoke_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    img: {
                        sprite: "map-smoke-res.img",
                        scale: .2,
                        alpha: .5,
                        tint: 16777215,
                        zIdx: 11
                    }
                },
                decal_snowball_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    lifetime: 5,
                    fadeChance: 1,
                    img: {
                        sprite: "map-snowball-res.img",
                        scale: .2,
                        alpha: .25,
                        tint: 16777215,
                        zIdx: 11
                    }
                },
                decal_potato_explosion: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 1),
                    height: 0,
                    lifetime: 5,
                    fadeChance: 1,
                    img: {
                        sprite: "map-potato-res.img",
                        scale: .2,
                        alpha: .25,
                        tint: 16777215,
                        zIdx: 11
                    }
                },
                decal_vent_01: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 2),
                    height: 0,
                    img: {
                        sprite: "map-bunker-vent-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 0
                    }
                },
                decal_vent_02: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 2),
                    height: 0,
                    img: {
                        sprite: "map-bunker-vent-02.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 0
                    }
                },
                decal_vent_03: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 2),
                    height: 0,
                    img: {
                        sprite: "map-bunker-vent-03.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 0
                    }
                },
                decal_hydra_01: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    height: 0,
                    img: {
                        sprite: "map-bunker-hydra-floor-04.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 0
                    }
                },
                decal_pipes_01: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1, 4.5)),
                    height: 1,
                    img: {
                        sprite: "map-pipes-01.img",
                        scale: .5,
                        alpha: .96,
                        tint: 16777215,
                        zIdx: 60
                    }
                },
                decal_pipes_02: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(4, 3)),
                    height: 1,
                    img: {
                        sprite: "map-pipes-02.img",
                        scale: .5,
                        alpha: .96,
                        tint: 16777215,
                        zIdx: 60
                    }
                },
                decal_pipes_03: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(10.5, 4)),
                    height: 1,
                    img: {
                        sprite: "map-pipes-03.img",
                        scale: .5,
                        alpha: .96,
                        tint: 16777215,
                        zIdx: 60
                    }
                },
                decal_pipes_04: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1, 5.5)),
                    height: 1,
                    img: {
                        sprite: "map-pipes-04.img",
                        scale: .5,
                        alpha: .96,
                        tint: 16777215,
                        zIdx: 60
                    }
                },
                decal_pipes_05: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1, 3.5)),
                    height: 1,
                    img: {
                        sprite: "map-pipes-05.img",
                        scale: .5,
                        alpha: .96,
                        tint: 16777215,
                        zIdx: 60
                    }
                },
                decal_initiative_01: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 3),
                    height: 0,
                    img: {
                        sprite: "map-decal-initiative.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 0
                    }
                },
                decal_web_01: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                    height: 1,
                    img: {
                        sprite: "map-web-01.img",
                        scale: .5,
                        alpha: .75,
                        tint: 16777215,
                        zIdx: 60
                    }
                },
                decal_light_01: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(3.25, 3.25)),
                    height: 1,
                    img: {
                        sprite: "map-light-01.img",
                        scale: 1,
                        alpha: .5,
                        tint: 16751616,
                        zIdx: 60,
                        flicker: !0,
                        flickerMin: .9,
                        flickerMax: 1.1,
                        flickerRate: .5,
                        ignoreAdjust: !0
                    }
                },
                decal_light_02: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    height: 1,
                    img: {
                        sprite: "map-light-01.img",
                        scale: .75,
                        alpha: .5,
                        tint: 16760397,
                        zIdx: 60,
                        flicker: !0,
                        flickerMin: .8,
                        flickerMax: 1.2,
                        flickerRate: .2,
                        ignoreAdjust: !0
                    }
                },
                decal_light_03: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(2.5, 2.5)),
                    height: 1,
                    img: {
                        sprite: "map-light-01.img",
                        scale: .75,
                        alpha: .5,
                        tint: 8585216,
                        zIdx: 60,
                        flicker: !0,
                        flickerMin: .8,
                        flickerMax: 1.2,
                        flickerRate: .2,
                        ignoreAdjust: !0
                    }
                },
                decal_blood_01: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                    height: 0,
                    img: {
                        sprite: "part-splat-01.img",
                        scale: .25,
                        alpha: .95,
                        tint: 4001294,
                        zIdx: 0
                    }
                },
                decal_blood_02: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                    height: 0,
                    img: {
                        sprite: "part-splat-02.img",
                        scale: .25,
                        alpha: .95,
                        tint: 4001294,
                        zIdx: 0
                    }
                },
                decal_blood_03: {
                    type: "decal",
                    collision: _e.createAabbExtents(ve.create(0, 0), ve.create(1.5, 1.5)),
                    height: 0,
                    img: {
                        sprite: "part-splat-03.img",
                        scale: .25,
                        alpha: .95,
                        tint: 4001294,
                        zIdx: 0
                    }
                },
                decal_chrys_01: {
                    type: "decal",
                    collision: _e.createCircle(ve.create(0, 0), 2),
                    height: 1,
                    img: {
                        sprite: "map-bunker-vent-01.img",
                        scale: .5,
                        alpha: 1,
                        tint: 16777215,
                        zIdx: 3
                    }
                }
            };
        e.exports = {
            Defs: Pe,
            MapStateFlags: Me,
            MinScale: .125,
            MaxScale: 2.5,
            oriToRad: i,
            radToOri: r,
            getBoundingCollider: o,
            Nt: .8,
            Vt: .9,
            jt: function(e, t) {
                return e.sprite && e.sprite.visible && e.sprite.alpha < t
            }
        }
    },
    d306eab6: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r(e, t, a) {
            return t in e ? Object.defineProperty(e, t, {
                value: a,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : e[t] = a, e
        }

        function o(e, t) {
            return {
                name: e,
                defaultValue: t
            }
        }

        function n(e) {
            return new f(x.Key, e)
        }

        function s(e) {
            return new f(x.MouseButton, e)
        }

        function l(e) {
            return new f(x.MouseWheel, e)
        }
        var c, m = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            p = a("8ee62bea"),
            d = a("ca1f6916"),
            h = a("14a25ec1"),
            u = a("6d61bfc0"),
            g = a("989ad62a"),
            y = g.Input,
            w = a("4b8d140f"),
            x = w.InputType,
            f = w.InputValue,
            b = w.Key,
            _ = w.MouseButton,
            S = w.MouseWheel,
            k = (c = {}, r(c, y.MoveLeft, o("Move Left", n(b.A))), r(c, y.MoveRight, o("Move Right", n(b.D))), r(c, y.MoveUp, o("Move Up", n(b.W))), r(c, y.MoveDown, o("Move Down", n(b.S))), r(c, y.Fire, o("Fire", s(_.Left))), r(c, y.Reload, o("Reload", n(b.R))), r(c, y.Cancel, o("Cancel", n(b.X))), r(c, y.Interact, o("Interact", n(b.F))), r(c, y.Revive, o("Revive", null)), r(c, y.Use, o("Open/Use", null)), r(c, y.Loot, o("Loot", null)), r(c, y.EquipPrimary, o("Equip Primary", n(b.One))), r(c, y.EquipSecondary, o("Equip Secondary", n(b.Two))), r(c, y.EquipMelee, o("Equip Melee", n(b.Three))), r(c, y.EquipThrowable, o("Equip Throwable", n(b.Four))), r(c, y.EquipNextWeap, o("Equip Next Weapon", l(S.Down))), r(c, y.EquipPrevWeap, o("Equip Previous Weapon", l(S.Up))), r(c, y.EquipLastWeap, o("Equip Last Weapon", n(b.Q))), r(c, y.StowWeapons, o("Stow Weapons", n(b.E))), r(c, y.EquipPrevScope, o("Equip Previous Scope", null)), r(c, y.EquipNextScope, o("Equip Next Scope", null)), r(c, y.UseBandage, o("Use Bandage", n(b.Seven))), r(c, y.UseHealthKit, o("Use Med Kit", n(b.Eight))), r(c, y.UseSoda, o("Use Soda", n(b.Nine))), r(c, y.UsePainkiller, o("Use Pills", n(b.Zero))), r(c, y.SwapWeapSlots, o("Switch Gun Slots", n(b.T))), r(c, y.ToggleMap, o("Toggle Map", n(b.M))), r(c, y.CycleUIMode, o("Toggle Minimap", n(b.V))), r(c, y.EmoteMenu, o("Emote Menu", s(_.Right))), r(c, y.TeamPingMenu, o("Team Ping Hold", n(b.C))), r(c, y.EquipOtherGun, o("Equip Other Gun", null)), r(c, y.Fullscreen, o("Full Screen", n(b.L))), r(c, y.HideUI, o("Hide UI", null)), r(c, y.TeamPingSingle, o("Team Ping Menu", null)), c),
            v = function() {
                function e(t, a) {
                    i(this, e), this.input = t, this.config = a, this.binds = [], this.boundKeys = {}, this.menuHovered = !1, this.loadBinds()
                }
                return m(e, [{
                    key: "toArray",
                    value: function() {
                        var e = new ArrayBuffer(2 * this.binds.length + 1),
                            t = new h.BitStream(e);
                        t.writeUint8(1);
                        for (var a = 0; a < this.binds.length; a++) {
                            var i = this.binds[a],
                                r = i ? i.type : 0,
                                o = i ? i.code : 0;
                            t.writeBits(3 & r, 2), t.writeUint8(255 & o)
                        }
                        var n = new Uint8Array(e, 0, t.byteIndex),
                            s = u.crc16(n),
                            l = new Uint8Array(n.length + 2);
                        return l.set(n), l[l.length - 2] = s >> 8 & 255, l[l.length - 1] = 255 & s, l
                    }
                }, {
                    key: "fromArray",
                    value: function(e) {
                        var t = new Uint8Array(e);
                        if (!t || t.length < 3) return !1;
                        var a = t[t.length - 2] << 8 | t[t.length - 1];
                        if (t = t.slice(0, t.length - 2), u.crc16(t) != a) return !1;
                        for (var i = new ArrayBuffer(t.length), r = new Uint8Array(i), o = 0; o < t.length; o++) r[o] = t[o];
                        var n = new h.BitStream(i),
                            s = n.readUint8();
                        this.clearAllBinds();
                        for (var l = 0; n.length - n.index >= 10;) {
                            var c = l++,
                                m = n.readBits(2),
                                p = n.readUint8();
                            c >= 0 && c < y.Count && m != x.None && this.setBind(c, 0 != m ? new f(m, p) : null)
                        }
                        return s < 1 && (this.upgradeBinds(s), this.saveBinds()), !0
                    }
                }, {
                    key: "toBase64",
                    value: function() {
                        return d.fromByteArray(this.toArray())
                    }
                }, {
                    key: "fromBase64",
                    value: function(e) {
                        var t = !1;
                        try {
                            t = this.fromArray(d.toByteArray(e))
                        } catch (e) {
                            console.log("Error", e)
                        }
                        return t
                    }
                }, {
                    key: "saveBinds",
                    value: function() {
                        this.config.set("binds", this.toBase64())
                    }
                }, {
                    key: "loadBinds",
                    value: function() {
                        this.fromBase64(this.config.get("binds") || "") || (this.loadDefaultBinds(), this.saveBinds())
                    }
                }, {
                    key: "upgradeBinds",
                    value: function(e) {
                        for (var t = [], a = 0; a < t.length; a++) {
                            for (var i = t[a], r = k[i].defaultValue, o = !1, n = 0; n < this.binds.length; n++)
                                if (this.binds[n] && this.binds[n].equals(r)) {
                                    o = !0;
                                    break
                                }
                            o || this.setBind(i, r)
                        }
                    }
                }, {
                    key: "clearAllBinds",
                    value: function() {
                        for (var e = 0; e < y.Count; e++) this.binds[e] = null;
                        this.boundKeys = {}
                    }
                }, {
                    key: "setBind",
                    value: function(e, t) {
                        if (t)
                            for (var a = 0; a < this.binds.length; a++) this.binds[a] && this.binds[a].equals(t) && (this.binds[a] = null);
                        var i = this.binds[e];
                        i && i.type == x.Key && (this.boundKeys[i.code] = null), this.binds[e] = t, t && t.type == x.Key && (this.boundKeys[t.code] = !0)
                    }
                }, {
                    key: "getBind",
                    value: function(e) {
                        return this.binds[e]
                    }
                }, {
                    key: "preventMenuBind",
                    value: function(e) {
                        return e && this.menuHovered && (2 == e.type || 3 == e.type)
                    }
                }, {
                    key: "isKeyBound",
                    value: function(e) {
                        return this.boundKeys[e]
                    }
                }, {
                    key: "isBindPressed",
                    value: function(e) {
                        var t = this.binds[e];
                        return !this.preventMenuBind(t) && t && this.input.isInputValuePressed(t)
                    }
                }, {
                    key: "isBindReleased",
                    value: function(e) {
                        var t = this.binds[e];
                        return !this.preventMenuBind(t) && t && this.input.isInputValueReleased(t)
                    }
                }, {
                    key: "isBindDown",
                    value: function(e) {
                        var t = this.binds[e];
                        return !this.preventMenuBind(t) && t && this.input.isInputValueDown(t)
                    }
                }, {
                    key: "loadDefaultBinds",
                    value: function() {
                        this.clearAllBinds();
                        for (var e = Object.keys(k), t = 0; t < e.length; t++) {
                            var a = e[t],
                                i = k[a];
                            this.setBind(parseInt(a), i.defaultValue)
                        }
                    }
                }]), e
            }(),
            z = function() {
                function e(t, a) {
                    var r = this;
                    i(this, e), this.input = t, this.inputBinds = a, p(".js-btn-keybind-restore").on("click", function() {
                        r.inputBinds.loadDefaultBinds(), r.inputBinds.saveBinds(), r.refresh()
                    })
                }
                return m(e, [{
                    key: "cancelBind",
                    value: function() {
                        this.input.captureNextInput(null)
                    }
                }, {
                    key: "refresh",
                    value: function() {
                        var e = this,
                            t = Object.keys(k),
                            a = this.inputBinds.binds,
                            i = p(".js-keybind-list");
                        i.empty();
                        for (var r = 0; r < t.length; r++) ! function(r) {
                            var o = t[r],
                                s = k[o],
                                l = a[o],
                                c = p("<a/>", {
                                    class: "btn-game-menu btn-darken btn-keybind-desc",
                                    text: s.name
                                }),
                                m = p("<div/>", {
                                    class: "btn-keybind-display",
                                    text: l ? l.toString() : ""
                                });
                            c.on("click", function(t) {
                                var a = p(t.target);
                                a.addClass("btn-keybind-desc-selected"), e.input.captureNextInput(function(t, i) {
                                    t.preventDefault(), t.stopPropagation();
                                    var r = [b.Control, b.Shift, b.Alt, b.Windows, b.ContextMenu, b.F1, b.F2, b.F3, b.F4, b.F5, b.F6, b.F7, b.F8, b.F9, b.F10, b.F11, b.F12];
                                    if (i.type == x.Key && -1 != r.indexOf(i.code)) return !1;
                                    if (a.removeClass("btn-keybind-desc-selected"), !i.equals(n(b.Escape))) {
                                        var s = i;
                                        i.equals(n(b.Backspace)) && (s = null), e.inputBinds.setBind(parseInt(o), s), e.inputBinds.saveBinds(), e.refresh()
                                    }
                                    return !0
                                })
                            }), i.append(p("<div/>", {
                                class: "ui-keybind-container"
                            }).append(c).append(m))
                        }(r);
                        p("#keybind-link").html(this.inputBinds.toBase64())
                    }
                }]), e
            }();
        e.exports = {
            InputBinds: v,
            InputBindUi: z
        }
    },
    d3da5587: function(e, t, a) {
        "use strict";

        function i(e, t, a) {
            return t in e ? Object.defineProperty(e, t, {
                value: a,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : e[t] = a, e
        }

        function r(e) {
            return document.getElementById(e)
        }

        function o(e) {
            return 0 == e.button
        }

        function n(e) {
            return "which" in e ? 3 == e.which : 2 == e.button
        }

        function s(e) {
            return e && e.length > 4 ? "img/loot/" + e.slice(0, -4) + ".svg" : ""
        }

        function l(e, t, a) {
            if (e instanceof Array)
                for (var i = 0; i < e.length; i++) l(e[i], void 0 !== a ? t[a] : t, i);
            else if (e instanceof Object)
                for (var r = Object.keys(e), o = 0; o < r.length; o++) {
                    var n = r[o];
                    l(e[n], void 0 !== a ? t[a] : t, n)
                } else t[a] = e
        }

        function c(e, t, a) {
            if (t instanceof Array) {
                for (var i = [], r = 0; r < t.length; r++) i[r] = c(e[r], t[r], a);
                return i
            }
            if (t instanceof Object) {
                for (var o = {}, n = Object.keys(t), s = 0; s < n.length; s++) {
                    var l = n[s];
                    o[l] = c(e[l], t[l], a)
                }
                return o
            }
            return e != t || a
        }

        function m() {
            var e = [];
            for (var t in f.items) f.items.hasOwnProperty(t) && "scope" == f.items[t].type && e.push(t);
            return e
        }

        function p() {
            var e = [];
            for (var t in f.items)
                if (f.items.hasOwnProperty(t)) {
                    var a = f.items[t].type;
                    "heal" != a && "boost" != a && "ammo" != a || e.push(t)
                }
            return e
        }

        function d() {
            return ["chest", "helmet", "backpack"]
        }

        function h() {
            return [0, 1]
        }

        function u() {
            this.mobile = !1, this.touch = !1, this.pickupMessage = {
                message: "",
                ticker: 0,
                duration: 0,
                opacity: 0
            }, this.killFeed = [];
            for (var e = 0; e < C; e++) this.killFeed.push({
                text: "",
                color: "#000000",
                offset: 0,
                opacity: 0,
                ticker: Number.MAX_VALUE
            });
            this.weapons = [];
            for (var t = 0; t < f.WeaponSlot.Count; t++) this.weapons[t] = {
                slot: t,
                name: "",
                ammo: 0,
                equipped: !1,
                selectable: !1,
                opacity: 0,
                width: 0,
                ticker: 0,
                bind: D[t],
                bindStr: ""
            };
            this.ammo = {
                current: 0,
                remaining: 0,
                displayCurrent: !1,
                displayRemaining: !1
            }, this.interaction = {
                type: E.None,
                text: "",
                key: "",
                usable: !1
            }, this.scopes = [];
            for (var a = m(), i = 0; i < a.length; i++) this.scopes.push({
                type: a[i],
                visible: !1,
                equipped: !1,
                selectable: !1
            });
            this.loot = [];
            for (var r = p(), o = 0; o < r.length; o++) this.loot.push({
                type: r[o],
                count: 0,
                maximum: 0,
                selectable: !1,
                width: 0,
                ticker: 0
            });
            this.gear = [];
            for (var n = d(), s = 0; s < n.length; s++) this.gear.push({
                type: n[s],
                item: "",
                selectable: !1,
                width: 0,
                ticker: 0,
                rot: 0
            });
            this.perks = [];
            for (var l = h(), c = 0; c < l.length; c++) this.perks.push({
                type: l[c],
                subtype: "",
                width: 0,
                ticker: 0,
                pulse: !1,
                cooldown: !1,
                cooldownPct: 0,
                cooldownCount: "",
                charges: 0
            });
            this.health = 100, this.boost = 0, this.downed = !1
        }

        function g(e, t) {
            var a = this;
            this.localization = e, this.inputBinds = t, this.oldState = new u, this.newState = new u, this.frameCount = 0, this.dom = {
                debugButton: r("ui-debug-button"),
                emoteButton: r("ui-emote-button"),
                menu: {
                    touchStyles: r("btn-touch-styles"),
                    aimLine: r("btn-game-aim-line")
                },
                pickupMessage: r("ui-pickup-message"),
                killFeed: {
                    div: r("ui-killfeed-contents"),
                    lines: []
                },
                weapons: [],
                ammo: {
                    current: r("ui-current-clip"),
                    remaining: r("ui-remaining-ammo"),
                    reloadButton: r("ui-reload-button-container")
                },
                interaction: {
                    div: r("ui-interaction"),
                    key: r("ui-interaction-press"),
                    text: r("ui-interaction-description")
                },
                health: {
                    inner: r("ui-health-actual"),
                    depleted: r("ui-health-depleted")
                },
                boost: {
                    div: r("ui-boost-counter"),
                    bars: [r("ui-boost-counter-0").firstElementChild, r("ui-boost-counter-1").firstElementChild, r("ui-boost-counter-2").firstElementChild, r("ui-boost-counter-3").firstElementChild]
                },
                scopes: [],
                loot: [],
                gear: [],
                perks: []
            };
            for (var i = 0; i < C; i++) {
                var s = "ui-killfeed-" + i,
                    l = r(s);
                if (!l) {
                    l = document.createElement("div"), l.id = s, l.classList.add("killfeed-div");
                    var c = document.createElement("div");
                    c.classList.add("killfeed-text"), l.appendChild(c), this.dom.killFeed.div.appendChild(l)
                }
                this.dom.killFeed.lines.push({
                    line: l,
                    text: l.firstElementChild
                })
            }
            for (var g = 0; g < 4; g++) {
                var y = r("ui-weapon-id-" + (g + 1)),
                    w = {
                        div: y,
                        name: y.getElementsByClassName("ui-weapon-name")[0],
                        number: y.getElementsByClassName("ui-weapon-number")[0],
                        image: y.getElementsByClassName("ui-weapon-image")[0],
                        ammo: y.getElementsByClassName("ui-weapon-ammo-counter")[0]
                    };
                this.dom.weapons.push(w)
            }
            for (var x = m(), b = 0; b < x.length; b++) {
                var _ = x[b],
                    S = {
                        scopeType: _,
                        div: r("ui-scope-" + _)
                    };
                this.dom.scopes.push(S)
            }
            for (var k = p(), v = 0; v < k.length; v++) {
                var z = k[v],
                    M = r("ui-loot-" + z);
                if (M) {
                    var P = {
                        lootType: z,
                        div: M,
                        count: M.getElementsByClassName("ui-loot-count")[0],
                        image: M.getElementsByClassName("ui-loot-image")[0],
                        overlay: M.getElementsByClassName("ui-loot-overlay")[0]
                    };
                    this.dom.loot.push(P)
                }
            }
            for (var I = d(), E = 0; E < I.length; E++) {
                var D = I[E],
                    O = r("ui-armor-" + D),
                    B = {
                        gearType: D,
                        div: O,
                        level: O.getElementsByClassName("ui-armor-level")[0],
                        image: O.getElementsByClassName("ui-armor-image")[0]
                    };
                this.dom.gear.push(B)
            }
            for (var L = h(), R = 0; R < L.length; R++) {
                var F = L[R],
                    j = r("ui-perk-" + F),
                    N = {
                        perkType: F,
                        div: j,
                        divTitle: j.getElementsByClassName("tooltip-title")[0],
                        divDesc: j.getElementsByClassName("tooltip-desc")[0],
                        image: j.getElementsByClassName("ui-armor-image")[0],
                        divCooldown: j.getElementsByClassName("ui-armor-counter-inner")[0],
                        divCounter: j.getElementsByClassName("ui-ability-cooldown")[0]
                    };
                this.dom.perks.push(N)
            }
            this.uiEvents = [], this.eventListeners = [];
            var V = function(e, t, i) {
                a.eventListeners.push({
                    event: e,
                    elem: t,
                    fn: i
                }), t.addEventListener(e, i)
            };
            this.itemActions = [];
            for (var q = function(e, t, i, r) {
                    a.itemActions.push({
                        action: e,
                        type: t,
                        data: i,
                        div: r,
                        actionQueued: !1,
                        actionTime: 0
                    })
                }, G = 0; G < this.dom.weapons.length; G++) q("use", "weapon", G, this.dom.weapons[G].div), q("drop", "weapon", G, this.dom.weapons[G].div);
            for (var U = 0; U < this.dom.scopes.length; U++) {
                var H = this.dom.scopes[U];
                q("use", "scope", H.scopeType, H.div), "1xscope" != H.scopeType && q("drop", "loot", H.scopeType, H.div)
            }
            for (var W = 0; W < this.dom.loot.length; W++) {
                var K = this.dom.loot[W],
                    Z = f.items[K.lootType];
                "heal" != Z.type && "boost" != Z.type || q("use", "loot", K.lootType, K.div), q("drop", "loot", K.lootType, K.div)
            }
            for (var X = 0; X < this.dom.gear.length; X++) {
                var Y = this.dom.gear[X];
                "backpack" != Y.gearType && q("drop", "loot", Y.gearType, Y.div)
            }
            for (var J = 0; J < this.itemActions.length; J++) ! function(e) {
                var t = a.itemActions[e];
                V("mousedown", t.div, function(e) {
                    ("use" == t.action && o(e) || "drop" == t.action && n(e)) && (e.stopPropagation(), t.actionQueued = !0)
                }), V("mouseup", t.div, function(e) {
                    t.actionQueued && ("use" == t.action && o(e) || "drop" == t.action && n(e)) && (e.stopPropagation(), a.pushAction(t), t.actionQueued = !1)
                }), V("touchstart", t.div, function(e) {
                    e.changedTouches.length > 0 && (e.stopPropagation(), t.actionQueued = !0, t.actionTime = (new Date).getTime(), t.touchOsId = e.changedTouches[0].identifier)
                }), V("touchend", t.div, function(e) {
                    (new Date).getTime() - t.actionTime < A && t.actionQueued && "use" == t.action && a.pushAction(t), t.actionQueued = !1
                }), V("touchcancel", t.div, function(e) {
                    t.actionQueued = !1
                })
            }(J);
            var Q = document.getElementById("cvs");
            this.clearQueuedItemActions = function() {
                for (var e = 0; e < a.itemActions.length; e++) a.itemActions[e].actionQueued = !1;
                T.touch && Q.focus()
            }, window.addEventListener("mouseup", this.clearQueuedItemActions), window.addEventListener("focus", this.clearQueuedItemActions)
        }

        function y() {
            var e = function(e, t) {
                r(e).getElementsByClassName("ui-loot-image")[0].src = t
            };
            e("ui-loot-bandage", "img/loot/loot-medical-bandage.svg"), e("ui-loot-healthkit", "img/loot/loot-medical-healthkit.svg"), e("ui-loot-soda", "img/loot/loot-medical-soda.svg"), e("ui-loot-painkiller", "img/loot/loot-medical-pill.svg"), e("ui-loot-9mm", "img/loot/loot-ammo-box.svg"), e("ui-loot-12gauge", "img/loot/loot-ammo-box.svg"), e("ui-loot-762mm", "img/loot/loot-ammo-box.svg"), e("ui-loot-556mm", "img/loot/loot-ammo-box.svg"), e("ui-loot-50AE", "img/loot/loot-ammo-box.svg"), e("ui-loot-308sub", "img/loot/loot-ammo-box.svg"), e("ui-loot-flare", "img/loot/loot-ammo-box.svg"), e("ui-loot-45acp", "img/loot/loot-ammo-box.svg"), r("mag-glass-white").src = "img/gui/mag-glass.svg", r("ui-minimize-img").src = "img/gui/minimize.svg"
        }
        var w, x = a("6b42806d"),
            f = a("989ad62a"),
            b = a("ceee80d9"),
            _ = f.Input,
            S = f.Action,
            k = a("10899aea"),
            v = a("300e2704"),
            z = a("1901e2d9"),
            M = a("c2a798c8"),
            T = a("ce29f17f"),
            P = (a("26be8056"), f.DamageType),
            I = v.PickupMsgType,
            C = 6,
            A = 750,
            E = {
                None: 0,
                Cancel: 1,
                Loot: 2,
                Revive: 3,
                Object: 4
            },
            D = (w = {}, i(w, f.WeaponSlot.Primary, _.EquipPrimary), i(w, f.WeaponSlot.Secondary, _.EquipSecondary), i(w, f.WeaponSlot.Melee, _.EquipMelee), i(w, f.WeaponSlot.Throwable, _.EquipThrowable), w);
        g.prototype = {
            n: function() {
                for (var e = 0; e < this.eventListeners.length; e++) {
                    var t = this.eventListeners[e];
                    t.elem.removeEventListener(t.event, t.fn)
                }
                window.removeEventListener("focus", this.clearQueuedItemActions), window.removeEventListener("mouseup", this.clearQueuedItemActions)
            },
            pushAction: function(e) {
                this.uiEvents.push({
                    action: e.action,
                    type: e.type,
                    data: e.data
                })
            },
            flushInput: function() {
                this.uiEvents = []
            },
            c: function(e, t, a, i, r, o, n) {
                var s = this.newState;
                if (s.mobile = T.mobile, s.touch = T.touch, s.touch)
                    for (var m = 0; m < this.itemActions.length; m++) {
                        var p = this.itemActions[m];
                        if (p.actionQueued && "drop" == p.action) {
                            var d = (new Date).getTime(),
                                h = d - p.actionTime;
                            h >= A && (this.pushAction(p), p.actionTime = d)
                        }
                    }
                s.pickupMessage.ticker += e;
                var u = s.pickupMessage.ticker,
                    g = s.pickupMessage.duration;
                s.pickupMessage.opacity = k.smoothstep(u, 0, .2) * (1 - k.smoothstep(u, g, g + .2));
                for (var y = 0, w = 0; w < s.killFeed.length; w++) {
                    var b = s.killFeed[w];
                    b.ticker += e;
                    var _ = b.ticker;
                    b.offset = y, b.opacity = k.smoothstep(_, 0, .25) * (1 - k.smoothstep(_, 6, 6.5)), y += k.min(_ / .25, 1), T.mobile && (b.opacity = _ < 6.5 ? 1 : 0)
                }
                s.health = t.ie.dead ? 0 : k.max(t.re.health, 1), s.boost = t.re.boost, s.downed = t.ie.downed;
                var v = E.None,
                    P = null,
                    I = !0;
                if (!t.ie.dead) {
                    for (var C = null, D = 0, O = o.pe.m(), B = 0; B < O.length; B++) {
                        var L = O[B];
                        if (L.active && !L.dead && z.sameLayer(L.layer, t.layer)) {
                            var R = L.getInteraction();
                            if (R) {
                                var F = x.intersectCircle(L.collider, t.ie.pos, R.rad + t.rad);
                                F && F.pen >= D && (C = L, D = F.pen)
                            }
                        }
                    }
                    C && (v = E.Object, P = C, I = !0);
                    var j = r.ea();/*lootBarn.itemf888*/
                    if (j && !t.ie.downed) {
                        var N = f.items[j.name],
                            V = t.na(f.WeaponSlot.Primary),
                            q = t.na(f.WeaponSlot.Secondary),
                            G = V && q,
                            U = "gun" != N.type || !G || "gun" == t.oa(),
                            H = !1;
                        (s.touch && "helmet" == N.type && t.aa() == N.level && j.name != t.ie.helmet || "chest" == N.type && t.ia() == N.level && j.name != t.ie.chest) && (H = !0), (U || T.uiLayout == T.UiLayout.Sm) && (v = E.Loot, P = j), I = U && (!s.touch || "gun" == N.type || "melee" == N.type || "skin" == N.type || H)
                    }
                    if (t.action.type == S.None && !t.ie.downed)
                        for (var W = i.ne(t.__id).teamId, K = i.Se.m(), Z = 0; Z < K.length; Z++) {
                            var X = K[Z];
                            if (X.active) {
                                var Y = i.ne(X.__id).teamId;
                                if (X.__id != t.__id && W == Y && X.ie.downed && !X.ie.dead && X.action.type != S.Revive) {
                                    var J = M.length(M.sub(X.ie.pos, t.ie.pos));
                                    J < f.player.reviveMaxRange && z.sameLayer(X.layer, t.layer) && (v = E.Revive, P = t, I = !0)
                                }
                            }
                        }
                    t.action.type == S.Revive && t.ie.downed && (v = E.None, P = null, I = !1), t.action.type != S.UseItem && (t.action.type != S.Revive || t.ie.downed) || a || (v = E.Cancel, P = null, I = !0)
                }
                s.interaction.type = v, s.interaction.text = this.getInteractionText(v, P), s.interaction.key = this.getInteractionKey(v), s.interaction.usable = I && !a;
                for (var Q = 0; Q < t.re.weapons.length; Q++) {
                    var $ = t.re.weapons[Q],
                        ee = s.weapons[Q];
                    ee.name = $.name, ee.ammo = $.ammo, Q == f.WeaponSlot.Throwable && (ee.ammo = t.re.inventory[$.name] || 0);
                    var te = ee.equipped;
                    ee.equipped = Q == t.re.curWeapIdx, ee.selectable = ("" != $.name || 0 == Q || 1 == Q) && !a;
                    var ae = ee.equipped ? 1 : .6,
                        ie = ae - ee.opacity,
                        re = k.min(ie, k.sign(ie) * e / .15);
                    ee.opacity = k.clamp(ee.opacity + re, 0, 1), T.mobile && (ee.opacity = ae), ee.ticker += e, ee.equipped && te || (ee.ticker = 0), this.frameCount < 2 && (ee.ticker = 1);
                    var oe = k.min(ee.ticker / .09, Math.PI),
                        ne = Math.sin(oe);
                    ee.width = ne < .001 ? 0 : ne, T.mobile && (ee.width = 0);
                    var se = n.getBind(ee.bind);
                    ee.bindStr = se ? se.toString() : ""
                }
                var le = s.weapons[t.re.curWeapIdx],
                    ce = f.items[le.name],
                    me = le.ammo,
                    pe = "throwable" == ce.type ? 0 : t.re.inventory[ce.ammo];
                s.ammo.current = me, s.ammo.remaining = pe, s.ammo.displayCurrent = "melee" != ce.type, s.ammo.displayRemaining = pe > 0;
                for (var de = 0; de < s.scopes.length; de++) {
                    var he = s.scopes[de];
                    he.visible = t.re.inventory[he.type] > 0, he.equipped = he.visible && t.re.scope == he.type, he.selectable = he.visible && !a
                }
                for (var ue = t.ra(), ge = 0; ge < s.loot.length; ge++) {
                    var ye = s.loot[ge],
                        we = ye.count;
                    ye.count = t.re.inventory[ye.type] || 0, ye.maximum = f.bagSizes[ye.type][ue], ye.selectable = ye.count > 0 && !a, ye.count > we && (ye.ticker = 0), this.frameCount < 2 && (ye.ticker = 1), ye.ticker += e;
                    var xe = k.min(ye.ticker / .05, Math.PI),
                        fe = Math.sin(xe);
                    ye.width = fe < .001 ? 0 : fe, T.mobile && (ye.width = 0)
                }
                for (var be = 0; be < s.gear.length; be++) {
                    var _e = s.gear[be],
                        Se = "";
                    "chest" == _e.type ? Se = t.ie.chest : "helmet" == _e.type ? Se = t.ie.helmet : "backpack" == _e.type && "backpack00" == (Se = t.ie.backpack) && (Se = "");
                    var ke = _e.item;
                    _e.item = Se, _e.selectable = "" != Se && !a, ke != _e.item && (_e.ticker = 0), this.frameCount < 2 && (_e.ticker = 1), _e.ticker += e;
                    var ve = k.min(_e.ticker / .05, Math.PI),
                        ze = Math.sin(ve);
                    _e.width = ze < .001 ? 0 : ze, T.mobile && (_e.width = 0)
                }
                for (var Me = 0; Me < s.perks.length; Me++) {
                    var Te = s.perks[Me],
                        Pe = t.ie.role;
                    1 == Te.type && 3 == Pe && (Pe = 4), Te.selectable = 1 == Te.type && !a, Te.cooldown = 1 == Te.type;
                    var Ie = Te.subtype;
                    Te.subtype = Pe, Ie != Te.subtype && (Te.ticker = 0), this.frameCount < 2 && (Te.ticker = 1), Te.ticker += e;
                    var Ce = k.min(Te.ticker / .05, Math.PI),
                        Ae = Math.sin(Ce);
                    Te.width = Ae < .001 ? 0 : Ae, T.mobile && (Te.width = 0), Te.pulse = !a && !T.mobile && Te.ticker < 4
                }
                var Ee = c(this.oldState, this.newState, 0 == this.frameCount++);
                this.render(Ee, this.newState), l(this.newState, this.oldState)
            },
            render: function(e, t) {
                var a = this.dom;
                e.mobile, e.touch && (a.interaction.key.style.backgroundImage = t.touch ? "url('img/gui/tap.svg')" : "none", t.touch && (a.interaction.key.innerHTML = ""), a.menu.touchStyles.style.display = t.touch ? "flex" : "none", a.menu.aimLine.style.display = t.touch ? "block" : "none", a.ammo.reloadButton.style.display = t.touch ? "block" : "none", a.emoteButton.style.display = t.touch ? "block" : "none", a.debugButton && (a.debugButton.style.display = t.touch ? "block" : "none")), e.pickupMessage.message && (a.pickupMessage.innerHTML = t.pickupMessage.message), e.pickupMessage.opacity && (a.pickupMessage.style.opacity = t.pickupMessage.opacity);
                for (var i = 0; i < e.killFeed.length; i++) {
                    var r = e.killFeed[i],
                        o = a.killFeed.lines[i],
                        n = t.killFeed[i];
                    if (r.text && (o.text.innerHTML = n.text), r.offset) {
                        var l = T.uiLayout != T.UiLayout.Sm || T.tablet ? 35 : 15;
                        o.line.style.top = Math.floor(n.offset * l) + "px"
                    }
                    r.color && (o.text.style.color = n.color), r.opacity && (o.line.style.opacity = n.opacity)
                }
                if (e.health || e.downed) {
                    for (var c = [{
                            health: 100,
                            color: [179, 179, 179]
                        }, {
                            health: 100,
                            color: [255, 255, 255]
                        }, {
                            health: 75,
                            color: [255, 255, 255]
                        }, {
                            health: 75,
                            color: [255, 158, 158]
                        }, {
                            health: 25,
                            color: [255, 82, 82]
                        }, {
                            health: 25,
                            color: [255, 0, 0]
                        }, {
                            health: 0,
                            color: [255, 0, 0]
                        }], m = 0, p = Math.ceil(t.health); c[m].health > p && m < c.length - 1;) m++;
                    var d = c[k.max(m - 1, 0)],
                        h = c[m],
                        u = k.delerp(t.health, d.health, h.health),
                        g = [Math.floor(k.lerp(u, d.color[0], h.color[0])), Math.floor(k.lerp(u, d.color[1], h.color[1])), Math.floor(k.lerp(u, d.color[2], h.color[2]))];
                    t.downed && (g = [255, 0, 0]), a.health.inner.style.backgroundColor = "rgba(" + g[0] + ", " + g[1] + ", " + g[2] + ", 1.0)", a.health.inner.style.width = t.health + "%", a.health.depleted.style.width = t.health + "%", a.health.depleted.style.display = t.health > 0 ? "block" : "none", t.health > 25 ? a.health.inner.classList.remove("ui-bar-danger") : a.health.inner.classList.add("ui-bar-danger")
                }
                if (e.boost) {
                    for (var y = f.player.boostBreakpoints, w = 0, x = 0; x < y.length; x++) w += y[x];
                    for (var b = t.boost / 100, _ = 0; _ < a.boost.bars.length; _++) {
                        var S = y[_] / w,
                            v = k.clamp(b / S, 0, 1);
                        b = k.max(b - S, 0), a.boost.bars[_].style.width = 100 * v + "%"
                    }
                    a.boost.div.style.opacity = 0 == t.boost ? 0 : 1
                }
                e.interaction.type && (a.interaction.div.style.display = t.interaction.type == E.None ? "none" : "flex"), e.interaction.text && (a.interaction.text.innerHTML = t.interaction.text), e.interaction.key && (a.interaction.key.innerHTML = t.touch ? "" : t.interaction.key, a.interaction.key.className = a.interaction.key.innerHTML.length > 1 ? "ui-interaction-small" : "ui-interaction-large"), e.interaction.usable && (a.interaction.key.style.display = t.interaction.usable ? "block" : "none");
                for (var z = 0; z < e.weapons.length; z++) {
                    var M = e.weapons[z],
                        P = a.weapons[z],
                        I = t.weapons[z];
                    if (M.name) {
                        var C = "" != I.name,
                            A = "",
                            D = "",
                            O = !1,
                            B = 0,
                            L = 1;
                        if (C) {
                            var R = f.items[I.name];
                            A = this.localization.translate("game-hud-" + I.name) || this.localization.translate("game-" + I.name), D = R.lootImg.sprite, O = R.isDual && T.uiLayout == T.UiLayout.Sm || R.lootImg.rot, R.lootImg.rot && (B = 180 * R.lootImg.rot / Math.PI), R.lootImg.mirror && (L = -1)
                        }
                        P.name.innerHTML = A, P.image.src = s(D), P.image.style.display = C ? "inline" : "none", P.image.style.transform = O ? "rotate(" + B + "deg) scaleX(" + L + ")" : ""
                    }
                    if (M.equipped && (P.div.style.backgroundColor = I.equipped ? "rgba(0, 0, 0, 0.4)" : "rgba(0, 0, 0, 0)"), M.selectable && (P.div.style.pointerEvents = "" != I.name || I.selectable ? "auto" : "none"), M.width) {
                        var F = k.lerp(I.width, 83.33, 100);
                        P.div.style.width = F + "%"
                    }
                    M.opacity && (P.div.style.opacity = I.opacity), M.ammo && P.ammo && (P.ammo.innerHTML = I.ammo, P.ammo.style.display = I.ammo > 0 ? "block" : "none"), M.bindStr && (P.number.innerHTML = I.bindStr[0] || "")
                }
                if (e.ammo.current) {
                    var j = t.ammo.current;
                    a.ammo.current.innerHTML = j, a.ammo.current.style.color = j > 0 ? "white" : "red"
                }
                if (e.ammo.remaining) {
                    var N = t.ammo.remaining;
                    a.ammo.remaining.innerHTML = N, a.ammo.remaining.style.color = N > 0 ? "white" : "red"
                }
                e.ammo.displayCurrent && (a.ammo.current.style.opacity = t.ammo.displayCurrent ? 1 : 0), e.ammo.displayRemaining && (a.ammo.remaining.style.opacity = t.ammo.displayRemaining ? 1 : 0, a.ammo.reloadButton.style.opacity = t.ammo.displayRemaining ? 1 : 0);
                for (var V = 0; V < e.scopes.length; V++) {
                    var q = e.scopes[V],
                        G = a.scopes[V],
                        U = t.scopes[V];
                    q.visible && (G.div.style.display = U.visible ? T.mobile && !T.tablet ? "flex" : "inline-block" : "none"), q.equipped && (U.equipped ? (G.div.classList.add("ui-zoom-active"), G.div.classList.remove("ui-zoom-inactive")) : (G.div.classList.remove("ui-zoom-active"), G.div.classList.add("ui-zoom-inactive"))), q.selectable && (G.div.style.pointerEvents = U.selectable ? "auto" : "none")
                }
                for (var H = 0; H < e.loot.length; H++) {
                    var W = e.loot[H],
                        K = a.loot[H],
                        Z = t.loot[H];
                    if (W && K && Z) {
                        if ((W.count || W.maximum) && (K.count.innerHTML = Z.count, K.div.style.opacity = f.items[K.lootType].special && 0 == Z.count ? 0 : Z.count > 0 ? 1 : .25, K.div.style.color = Z.count == Z.maximum ? "#ff9900" : "#ffffff"), W.width) {
                            var X = 1 + .33 * Z.width,
                                Y = "scale(" + X + ", " + X + ")";
                            K.image.style.transform = Y, K.overlay && (K.overlay.style.transform = Y)
                        }
                        W.selectable && (K.div.style.pointerEvents = Z.selectable ? "auto" : "none")
                    }
                }
                for (var J = 0; J < e.gear.length; J++) {
                    var Q = e.gear[J],
                        $ = a.gear[J],
                        ee = t.gear[J];
                    if (Q.item) {
                        var te = "" != ee.item ? f.items[ee.item] : null,
                            ae = te ? te.level : 0;
                        $.div.style.display = te ? "block" : "none", $.level.innerHTML = this.localization.translate("game-level-" + ae), $.level.style.color = ae >= 3 ? "#ff9900" : "#ffffff", $.image.src = te ? s(te.lootImg.sprite) : ""
                    }
                    if (Q.selectable && ($.div.style.pointerEvents = ee.selectable ? "auto" : "none"), Q.width) {
                        var ie = 1 + .33 * ee.width;
                        $.image.style.transform = "scale(" + ie + ", " + ie + ")";
                        var re = "" != ee.item ? f.items[ee.item] : null;
                        re && re.lootImg.rot && ($.image.style.transform = "scale(" + ie + ", " + ie + ") rotate(" + 180 * re.lootImg.rot / Math.PI + "deg)")
                    }
                }
                for (var oe = 0; oe < e.perks.length; oe++) {
                    var ne = e.perks[oe],
                        se = a.perks[oe],
                        le = t.perks[oe];
                    if (ne.subtype) {
                        var ce = le.subtype;
                        se.divTitle.innerHTML = this.localization.translate("game-perk-title-" + ce), se.divDesc.innerHTML = this.localization.translate("game-perk-desc-" + ce), se.div.style.display = ce > 0 ? "block" : "none", se.image.src = ce > 0 ? "img/gui/perk-" + ce + ".svg" : ""
                    }
                    if (ne.pulse && (le.pulse ? se.div.classList.add("ui-perk-pulse") : se.div.classList.remove("ui-perk-pulse")), ne.width) {
                        var me = 1 + .33 * le.width;
                        se.image.style.transform = "scale(" + me + ", " + me + ")"
                    }
                }
            },
            displayPickupMessage: function(e) {
                var t = this.newState.pickupMessage;
                t.message = this.getPickupMessageText(e), t.ticker = 0, t.duration = 3
            },
            addKillFeed: function(e, t) {
                var a = this.newState.killFeed,
                    i = a[a.length - 1];
                i.text = e, i.color = t, i.ticker = 0, a.sort(function(e, t) {
                    return e.ticker - t.ticker
                })
            },
            getKillFeedText: function(e, t, a, i, r) {
                switch (i) {
                    case P.Player:
                        return t + " " + this.localization.translate(r ? "game-knocked-out" : "game-killed") + " " + e + " " + this.localization.translate("game-with") + " " + this.localization.translate("game-" + a);
                    case P.Bleeding:
                        var o = this.localization.translate(t ? "game-finally-killed" : "game-finally-bled-out");
                        return t ? t + " " + o + " " + e : e + " " + o;
                    case P.Gas:
                        var n = void 0,
                            s = void 0;
                        return r ? (n = this.localization.translate("game-the-red-zone"), s = this.localization.translate("game-knocked-out")) : s = this.localization.translate(t ? "game-finally-killed" : "game-died-outside"), n ? n + " " + s + " " + e : e + " " + s;
                    case P.Airdrop:
                        var l = b.Defs[a],
                            c = this.localization.translate("game-the-air-drop"),
                            m = void 0;
                        return m = r ? this.localization.translate("game-knocked-out") : l && !l.airdropCrate ? this.localization.translate("game-killed") : this.localization.translate("game-crushed"), c + " " + m + " " + e;
                    case P.Airstrike:
                        var p = this.localization.translate(r ? "game-knocked-out" : "game-killed");
                        return t ? t + " " + p + " " + e + " " + this.localization.translate("game-with") + " " + this.localization.translate("game-an-air-strike") : this.localization.translate("game-the-air-strike") + " " + p + " " + e;
                    default:
                        return ""
                }
            },
            getKillFeedColor: function(e, t, a, i) {
                return i ? "#efeeee" : e == t ? "#d1777c" : e == a ? "#00bfff" : "#efeeee"
            },
            getAssignRoleKillFeedText: function(e, t, a) {
                switch (e) {
                    case f.Role.FactionLeader:
                        var i = 1 == a ? this.localization.translate("game-red-leader") : this.localization.translate("game-blue-leader");
                        return t + " " + this.localization.translate("game-promoted-to") + " " + i + "!";
                    case f.Role.Lieutenant:
                        var r = this.localization.translate("game-lieutenant");
                        return t + " " + this.localization.translate("game-promoted-to") + " " + r + "!";
                    default:
                        return ""
                }
            },
            getRoleKillFeedText: function(e, t, a, i, r) {
                var o = "undefined";
                switch (r) {
                    case f.Role.FactionLeader:
                        o = 1 == t ? this.localization.translate("game-red-leader") : this.localization.translate("game-blue-leader");
                        break;
                    case f.Role.WoodsKing:
                        o = this.localization.translate("game-woods-king")
                }
                return a == P.Player ? e + " " + this.localization.translate(i ? "game-knocked-out" : "game-killed") + " " + o + "!" : o + " " + this.localization.translate(i ? "game-is-down" : "game-is-dead") + "!"
            },
            getPickupMessageText: function(e) {
                var t, a = (t = {}, i(t, I.Full, "game-not-enough-space"), i(t, I.AlreadyOwned, "game-item-already-owned"), i(t, I.AlreadyEquipped, "game-item-already-equipped"), i(t, I.BetterItemEquipped, "game-better-item-equipped"), i(t, I.GunCannotFire, "game-gun-cannot-fire"), t),
                    r = a[e] || a[I.Full];
                return this.localization.translate(r)
            },
            getInteractionText: function(e, t) {
                switch (e) {
                    case E.None:
                        return "";
                    case E.Cancel:
                        return this.localization.translate("game-cancel");
                    case E.Revive:
                        return this.localization.translate("game-revive-teammate");
                    case E.Object:
                        var a = t.getInteraction();
                        return this.localization.translate(a.action) + " " + this.localization.translate(a.object);
                    case E.Loot:
                        var i = this.localization.translate("game-" + t.name) || t.name;
                        return t.count > 1 && (i += " (" + t.count + ")"), i;
                    default:
                        return ""
                }
            },
            getInteractionKey: function(e) {
                var t = null;
                switch (e) {
                    case E.Cancel:
                        t = this.inputBinds.getBind(_.Cancel);
                        break;
                    case E.Loot:
                        t = this.inputBinds.getBind(_.Loot) || this.inputBinds.getBind(_.Interact);
                        break;
                    case E.Object:
                        t = this.inputBinds.getBind(_.Use) || this.inputBinds.getBind(_.Interact);
                        break;
                    case E.Revive:
                        t = this.inputBinds.getBind(_.Revive) || this.inputBinds.getBind(_.Interact);
                        break;
                    case E.None:
                    default:
                        t = this.inputBinds.getBind(_.Use)
                }
                return t ? t.toString() : "<Unbound>"
            }
        }, e.exports = {
            bt: g,
            loadStaticDomImages: y
        }
    },
    d49cd95c: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r(e, t, a) {
            e.moveTo(t.x, t.y), e.lineTo(a.x, a.y)
        }

        function o(e, t) {
            var a = t[0];
            e.moveTo(a.x, a.y);
            for (var i = 1; i < t.length; ++i) a = t[i], e.lineTo(a.x, a.y);
            e.closePath()
        }

        function n(e, t, a) {
            var i = t.max.x - t.min.x,
                r = t.max.y - t.min.y,
                n = x.max(t.offsetDist, .001),
                s = t.roughness,
                l = Math.round(i * s / n),
                c = Math.round(r * s / n),
                m = h.seededRand(a);
            o(e, d.generateJaggedAabbPoints(t, l, c, n, m))
        }

        function s() {
            this._ = !1, this.qe = !1, this.display = {
                ground: new l.Graphics
            }, this.mapName = "", this.mapDef = {}, this.factionMode = !1, this.potatoMode = !1, this.seed = 0, this.width = 0, this.height = 0, this.terrain = {}, this.mapData = {
                places: [],
                objects: [],
                groundPatches: []
            }, this.mapLoaded = !1, this.mapTexture = null, this.pe = new g.Pool(_), this.zt = new g.Pool(b), this.Mt = new g.Pool(S), this.deadObstacleIds = [], this.deadCeilingIds = [], this.solvedPuzzleIds = [], this.terrain = null, this.cameraEmitter = null, this.pa = 0, this.Rt = !1, this.H = !1
        }
        var l = a("8b1dfb45"),
            c = a("34e32c48"),
            m = a("6b42806d"),
            p = a("ceee80d9"),
            d = (a("7b5bbf6e"), a("e100c355")),
            h = a("1901e2d9"),
            u = a("c2a798c8"),
            g = a("753d6e4b"),
            y = a("119e8c4c"),
            w = a("ce29f17f"),
            x = (a("26be8056"), a("300e2704"), a("10899aea")),
            f = a("989ad62a"),
            b = a("33375c30"),
            _ = (a("af8ba00f"), a("c347b8dd"), a("0c8ffd27")),
            S = a("ce089fd5"),
            k = a("4cddfd71"),
            v = function e(t, a) {
                i(this, e), this.type = t, this.river = a || null
            };
        s.prototype = {
            n: function() {
                this.mapTexture && this.mapTexture.destroy(!0), this.display.ground.destroy({
                    children: !0
                }), this.cameraEmitter && this.cameraEmitter.stop(), this.cameraEmitter = null
            },
            resize: function(e, t) {
                this.renderMap(e, t)
            },
            loadMap: function(e, t, a, i) {
                this.mapName = e.mapName;
                var r = k[this.mapName];
                if (!r) throw new Error("Failed loading mapDef " + this.mapName);
                this.mapDef = h.cloneDeep(r), this.factionMode = !!this.mapDef.gameMode.factionMode, this.potatoMode = !!this.mapDef.gameMode.potatoMode, this.seed = e.seed, this.width = e.width, this.height = e.height, this.terrain = d.generateTerrain(this.width, this.height, e.shoreInset, e.grassInset, e.rivers, this.seed), this.mapData = {
                    places: e.places,
                    objects: e.objects,
                    groundPatches: e.groundPatches
                }, this.mapLoaded = !0;
                var o = this.mapDef.biome.particles.camera;
                if (o) {
                    var n = u.normalize(u.create(1, -1));
                    this.cameraEmitter = i.addEmitter(o, u.create(0, 0), n, 1, 99999, Number.MAX_VALUE)
                }
                this.display.ground.clear(), this.renderTerrain(this.display.ground, 2 / t.ppu, a)
            },
            getMapDef: function() {
                if (!this.mapLoaded) throw new Error("Map not loaded!");
                return this.mapDef
            },
            getMapTexture: function() {
                return this.mapTexture
            },
            c: function(e, t, a, i, r, o, n, s, l, c) {
                this._ = !0, this.qe = !0;
                for (var m = this.pe.m(), d = 0; d < m.length; d++) {
                    var h = m[d];
                    h.active && (h.c(e, this, a, i, r, t, n), h.render(s, c))
                }
                for (var g = this.zt.m(), w = 0; w < g.length; w++) {
                    var f = g[w];
                    f.active && (f.c(e, this, i, r, o, t, n, s), f.render(s, c))
                }
                for (var b = this.Mt.m(), _ = 0; _ < b.length; _++) {
                    var S = b[_];
                    S.active && S.c(s, c)
                }
                if (this.cameraEmitter) {
                    this.cameraEmitter.pos = u.copy(s.pos), this.cameraEmitter.enabled = !0;
                    var k = 2.5 * t.Bt();
                    this.cameraEmitter.radius = x.min(k, 120);
                    var v = (y.EmitterDefs.falling_leaf, this.cameraEmitter.radius),
                        z = v * v / 14400;
                    this.cameraEmitter.rateMult = 1 / z;
                    var M = 0 == t.layer ? 1 : 0;
                    this.cameraEmitter.alpha = x.lerp(6 * e, this.cameraEmitter.alpha, M)
                }
                if (++this.pa % 180 == 0) {
                    this.Rt = !0;
                    for (var T = 0, P = p.jt, I = 0; I < l.length; I++) {
                        var C = l[I];
                        C.active && !C.fade && P(C, p.Nt) && T++
                    }
                    for (var A = 0; A < m.length; A++) {
                        var E = m[A];
                        E.active && !E.dead && P(E, p.Vt) && T++
                    }
                    T && (this.H = !0)
                }
            },
            renderTerrain: function(e, t, a) {
                var i = this.width,
                    s = this.height,
                    l = this.terrain,
                    c = {
                        x: 0,
                        y: 0
                    },
                    m = {
                        x: i,
                        y: 0
                    },
                    p = {
                        x: 0,
                        y: s
                    },
                    d = {
                        x: i,
                        y: s
                    },
                    h = this.mapDef.biome.colors;
                e.beginFill(h.background), e.drawRect(-120, -120, i + 240, 120), e.drawRect(-120, s, i + 240, 120), e.drawRect(-120, -120, 120, s + 240), e.drawRect(i, -120, 120, s + 240), e.endFill(), e.beginFill(h.beach), o(e, l.shore), o(e, l.grass), e.addHole(), e.endFill(), a && (e.beginFill(h.grass), o(e, l.grass), e.endFill());
                for (var u = this.mapData.groundPatches, g = 0; g < u.length; g++) {
                    var y = u[g];
                    e.beginFill(y.color), n(e, y, this.seed), e.endFill()
                }
                e.beginFill(h.riverbank);
                for (var w = 0; w < l.rivers.length; w++) o(e, l.rivers[w].shorePoly);
                e.endFill(), e.beginFill(h.water);
                for (var x = 0; x < l.rivers.length; x++) o(e, l.rivers[x].waterPoly);
                e.endFill(), e.beginFill(h.water), e.moveTo(p.x, p.y), e.lineTo(d.x, d.y), e.lineTo(m.x, m.y), e.lineTo(c.x, c.y), o(e, l.shore), e.addHole(), e.closePath(), e.endFill();
                var b = e;
                b.lineStyle(t, 0, .15);
                for (var _ = 0; _ <= i; _ += f.map.gridSize) r(b, {
                    x: _,
                    y: 0
                }, {
                    x: _,
                    y: s
                });
                for (var S = 0; S <= s; S += f.map.gridSize) r(b, {
                    x: 0,
                    y: S
                }, {
                    x: i,
                    y: S
                })
            },
            render: function(e) {
                var t = e.pointToScreen(u.create(0, 0)),
                    a = e.pointToScreen(u.create(1, 1)),
                    i = u.sub(a, t);
                this.display.ground.position.set(t.x, t.y), this.display.ground.scale.set(i.x, i.y)
            },
            getMinimapRender: function(e) {
                var t = p.Defs[e.type],
                    a = "building" == t.type ? 750 + (t.zIdx || 0) : t.img.zIdx || 0,
                    i = [];
                if (void 0 !== t.map.shapes) i = t.map.shapes;
                else {
                    var r = null;
                    (r = "obstacle" == t.type ? t.collision : t.ceiling.scopeIn.length > 0 ? t.ceiling.scopeIn[0] : p.getBoundingCollider(e.type)) && i.push({
                        collider: m.copy(r),
                        scale: t.map.scale || 1,
                        color: t.map.color
                    })
                }
                return {
                    obj: e,
                    zIdx: a,
                    shapes: i
                }
            },
            renderMap: function(e, t) {
                if (this.mapLoaded) {
                    var a = new l.Container,
                        i = new l.Container,
                        o = this.mapDef.biome.colors,
                        n = this.mapData.places,
                        s = this.mapData.objects,
                        c = w.screenHeight;
                    w.mobile && (w.isLandscape || (c = w.screenWidth), c *= x.min(w.pixelRatio, 2));
                    var d = this.height / c,
                        h = new l.Graphics;
                    h.beginFill(o.grass), h.drawRect(0, 0, this.width, this.height), h.endFill(), this.renderTerrain(h, d, t);
                    var g = {
                            x: 0,
                            y: 0
                        },
                        y = {
                            x: this.width,
                            y: 0
                        },
                        f = {
                            x: 0,
                            y: this.height
                        },
                        b = {
                            x: this.width,
                            y: this.height
                        };
                    h.lineStyle(2 * d, 0, 1), r(h, g, f), r(h, f, b), r(h, b, y), r(h, y, g), h.position.y = this.height, h.scale.y = -1, a.addChild(h);
                    for (var _ = [], S = 0; S < s.length; S++) {
                        var k = s[S];
                        _.push(this.getMinimapRender(k))
                    }
                    _.sort(function(e, t) {
                        return e.zIdx - t.zIdx
                    });
                    for (var v = new l.Graphics, z = 0; z < _.length; z++)
                        for (var M = _[z], T = M.obj, P = 0; P < M.shapes.length; P++) {
                            var I = M.shapes[P],
                                C = m.transform(I.collider, T.pos, p.oriToRad(T.ori), T.scale),
                                A = void 0 !== I.scale ? I.scale : 1;
                            switch (v.beginFill(I.color, 1), C.type) {
                                case m.Type.Circle:
                                    v.drawCircle(C.pos.x, this.height - C.pos.y, C.rad * A);
                                    break;
                                case m.Type.Aabb:
                                    var E = u.mul(u.sub(C.max, C.min), .5),
                                        D = u.add(C.min, E);
                                    E = u.mul(E, A), v.drawRect(D.x - E.x, this.height - D.y - E.y, 2 * E.x, 2 * E.y)
                            }
                            v.endFill()
                        }
                    a.addChild(v);
                    for (var O = new l.Container, B = 0; B < n.length; B++) {
                        var L = n[B],
                            R = new l.TextStyle({
                                fontFamily: "Arial",
                                fontSize: w.mobile ? 20 : 22,
                                fontWeight: "bold",
                                fill: ["#ffffff"],
                                stroke: "#000000",
                                strokeThickness: 1,
                                dropShadow: !0,
                                dropShadowColor: "#000000",
                                dropShadowBlur: 1,
                                dropShadowAngle: Math.PI / 3,
                                dropShadowDistance: 1,
                                wordWrap: !1,
                                align: "center"
                            }),
                            F = new l.Text(L.name, R);
                        F.anchor.set(.5, .5), F.x = L.pos.x * this.height / d, F.y = L.pos.y * this.height / d, F.alpha = .75, O.addChild(F)
                    }
                    i.addChild(O), this.mapTexture ? this.mapTexture.resize(c, c) : this.mapTexture = l.RenderTexture.create(c, c, l.SCALE_MODES.LINEAR, 1), a.scale = new l.Point(c / this.height, c / this.height), e.render(a, this.mapTexture, !0), e.render(i, this.mapTexture, !1), a.destroy({
                        children: !0,
                        texture: !0,
                        baseTexture: !0
                    }), i.destroy({
                        children: !0,
                        texture: !0,
                        baseTexture: !0
                    })
                }
            },
            getGroundSurface: function(e, t) {
                for (var a = "", i = this.zt.m(), r = 0, o = 2 & t, n = 0; n < i.length; n++) {
                    var s = i[n];
                    if (s.active && !(s.zIdx < r) && !(s.layer != t && !o || 1 == s.layer && o))
                        for (var l = 0; l < s.surfaces.length; l++)
                            for (var p = s.surfaces[l], d = 0; d < p.colliders.length; d++) {
                                var h = m.intersectCircle(p.colliders[d], e, 1e-4);
                                if (h) {
                                    r = s.zIdx, a = p.surface;
                                    break
                                }
                            }
                }
                if (a) return new v(a);
                var u = !1;
                if (1 != t)
                    for (var g = this.terrain.rivers, y = 0; y < g.length; y++) {
                        var w = g[y];
                        if (c.testPointAabb(e, w.aabb.min, w.aabb.max) && x.pointInsidePolygon(e, w.shorePoly) && (u = !0, x.pointInsidePolygon(e, w.waterPoly))) return new v("water", w)
                    }
                return new v(x.pointInsidePolygon(e, this.terrain.grass) ? u ? this.mapDef.biome.sound.riverShore : "grass" : x.pointInsidePolygon(e, this.terrain.shore) ? "sand" : "water")
            },
            isInOcean: function(e) {
                return !x.pointInsidePolygon(e, this.terrain.shore)
            },
            distanceToShore: function(e) {
                return x.distToPolygon(e, this.terrain.shore)
            },
            insideStructureStairs: function(e) {
                for (var t = this.Mt.m(), a = 0; a < t.length; a++) {
                    var i = t[a];
                    if (i.active && i.insideStairs(e)) return !0
                }
                return !1
            },
            insideStructureMask: function(e) {
                for (var t = this.Mt.m(), a = 0; a < t.length; a++) {
                    var i = t[a];
                    if (i.active && i.insideMask(e)) return !0
                }
                return !1
            },
            insideBuildingCeiling: function(e, t) {
                for (var a = this.zt.m(), i = 0; i < a.length; i++) {
                    var r = a[i];
                    if (r.active && (!t || !(r.ceiling.visionTicker <= 0 || r.ceilingDead || r.disableScopeIn)))
                        for (var o = 0; o < r.ceiling.scopeIn.length; o++) {
                            var n = r.ceiling.scopeIn[o];
                            if (m.intersect(n, e)) return !0
                        }
                }
                return !1
            }
        }, e.exports = {
            Qe: s
        }
    },
    d5ec3c16: function(e, t, a) {
        "use strict";
        var i = (a("989ad62a"), a("c2a798c8"), {
            desc: {
                name: "Main",
                icon: "img/gui/surviv.svg",
                mode: "main"
            },
            assets: {
                audio: [],
                atlases: ["gradient", "shared", "main"]
            },
            biome: {
                colors: {
                    background: 2118510,
                    water: 3310251,
                    beach: 13480795,
                    riverbank: 9461284,
                    grass: 8433481,
                    underground: 1772803,
                    playerSubmerge: 2854052
                },
                valueAdjust: 1,
                sound: {
                    riverShore: "sand"
                },
                particles: {
                    camera: "",
                    ripple: "waterRipple"
                },
                tracerColors: {},
                airdrop: {
                    planeImg: "map-plane-01.img",
                    planeSound: "plane_01",
                    airdropImg: "map-chute-01.img"
                }
            },
            gameMode: {
                maxPlayers: 80
            }
        });
        e.exports = i
    },
    d84c74f8: function(e, t, a) {
        "use strict";

        function i(e) {
            var t = null;
            window.cookieconsent.initialise({
                palette: {
                    popup: {
                        background: "#3c404d",
                        text: "#d6d6d6"
                    },
                    button: {
                        background: "#8bed4f"
                    }
                },
                theme: "classic",
                position: "bottom-left",
                content: {
                    message: "This website uses ad monetization services of AdinPlay BV and uses cookies to personalize ads, ad serving, analytics and verification. By clicking 'Got it!' you confirm that you consent to setting cookies and processing your personal data for all the listed purposes. If you are under the age of consent in your jurisdiction for data processing purposes, or if you wish to deny consent, click \"Learn more\".",
                    dismiss: "Got it!",
                    deny: "Decline",
                    link: "Learn more.",
                    href: "/privacy"
                },
                revokable: !1,
                animateRevokable: !1,
                law: {
                    regionalLaw: !1
                },
                location: !1,
                onStatusChange: function(t) {
                    var a = (this.options.type, this.hasConsented()),
                        i = e.get("cookiesConsented");
                    e.set("cookiesConsented", a), o.storeGeneric("cookiesConsented", a), i != a && window.location.reload(!1)
                }
            }, function(e) {
                t = e
            }, function(e) {
                console.error(e)
            }), r("#btn-cookie-opt-out").click(function(a) {
                t && (t.setStatus("deny"), e.get("cookiesConsented") && (e.set("cookiesConsented", !1), o.storeGeneric("cookiesConsented", !1), window.location.reload(!1)))
            }), r(".btn-cookies-close").click(function(a) {
                t && (t.setStatus("allow"), e.get("cookiesConsented") || (e.set("cookiesConsented", !0), o.storeGeneric("cookiesConsented", !0), window.location.reload(!1)))
            }), r(".btn-cookie-settings").css("display", "inline-block");
            var a = r("#modal-cookie-settings");
            r(".btn-cookie-settings").click(function(e) {
                return t && (void 0 == t.getStatus() && r(this).hasClass("cc-link") && (t.setStatus("dismiss"), t.close()), a.finish(), a.css("display", "block"), r("#modal-hamburger").fadeOut(200), n.addModalCloseListener()), !1
            })
        }
        var r = a("8ee62bea"),
            o = (a("81a1fce4"), a("f398b7c7")),
            n = a("484b3444");
        e.exports = {
            showCookieConsent: i
        }
    },
    e100c355: function(e, t, a) {
        "use strict";

        function i(e, t, a, i, r) {
            var o = c.create(e.min.x, e.min.y),
                n = c.create(e.max.x, e.min.y),
                s = c.create(e.min.x, e.max.y),
                l = c.create(e.max.x, e.max.y),
                m = n.x - o.x,
                p = s.y - o.y,
                d = m / (t + 1),
                h = p / (a + 1),
                u = [];
            u.push(c.copy(o));
            for (var g = 1; g <= t; ++g) u.push(c.create(o.x + d * g, o.y + r(-i, i)));
            u.push(c.copy(n));
            for (var y = 1; y <= a; ++y) u.push(c.create(n.x + r(-i, i), n.y + h * y));
            u.push(c.copy(l));
            for (var w = 1; w <= t; ++w) u.push(c.create(l.x - d * w, l.y + r(-i, i)));
            u.push(c.copy(s));
            for (var x = 1; x <= a; ++x) u.push(c.create(s.x + r(-i, i), s.y - h * x));
            return u
        }

        function r(e, t, a, r, m, p) {
            for (var d = n.map.shoreVariation, h = n.map.grassVariation, u = l.seededRand(p), g = c.create(a, a), y = (c.create(e - a, a), c.create(a, t - a), c.create(e - a, t - a)), w = c.create(g.x, g.y), x = c.create(y.x, y.y), f = o.createAabb(w, x), b = i(f, 64, 64, d, u), _ = c.create(.5 * e, .5 * t), S = b.map(function(e) {
                    var t = c.normalize(c.sub(_, e)),
                        a = u(-h, h),
                        i = r + a;
                    return c.add(e, c.mul(t, i))
                }), k = {
                    min: c.create(0, 0),
                    max: c.create(e, t)
                }, v = [], z = 0; z < m.length; z++) {
                var M = m[z],
                    T = new s(M.points, M.width, M.looped, v, k);
                v.push(T)
            }
            return {
                shore: b,
                grass: S,
                rivers: v
            }
        }
        var o = a("6b42806d"),
            n = a("989ad62a"),
            s = (a("10899aea"), a("be22c643")),
            l = a("1901e2d9"),
            c = a("c2a798c8");
        e.exports = {
            generateJaggedAabbPoints: i,
            generateTerrain: r
        }
    },
    e2094860: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }
        var r = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            o = a("8ee62bea"),
            n = a("8b1dfb45"),
            s = a("6b42806d"),
            l = a("989ad62a"),
            c = (a("10899aea"), a("1901e2d9")),
            m = a("c2a798c8"),
            p = (a("26be8056"), a("ce29f17f")),
            d = (a("af8ba00f"), function() {
                function e(t, a) {
                    var r = this;
                    i(this, e), this.input = t, this.config = a, this.container = new n.Container, this.da = new h, this.padScaleBase = 1, this.padScaleDown = .6, this.padScalePos = .25, this.moveDetected = !1, this.Lt = !1, this.ha = !1, this.touchingAim = !1, this.display = !0, this.moveStyle = "locked", this.aimStyle = "locked", this.touchAimLine = !0;
                    var o = function(e, t) {
                            var a = n.Sprite.fromImage("pad.img");
                            return a.anchor.set(.5, .5), a.scale.set(1, 1), a.alpha = .2, a.visible = !1, a.tint = t, e.addChild(a), a
                        },
                        s = function() {
                            return {
                                touched: !1,
                                centerPos: m.create(0, 0),
                                touchPos: m.create(0, 0),
                                centerSprite: o(r.container, 0),
                                touchSprite: o(r.container, 16777215)
                            }
                        };
                    this.touchPads = [s(), s()], this.playerMovement = {
                        left: !1,
                        right: !1,
                        up: !1,
                        down: !1,
                        moveLen: 0
                    }, this.analogMovement = {
                        toMoveDir: m.create(1, 0),
                        toMoveLen: 0
                    }, this.aimMovement = {
                        toAimDir: m.create(1, 0),
                        toAimLen: 0
                    }, this.leftLockedPadCenter = m.create(0, 0), this.rightLockedPadCenter = m.create(0, 0), this.padPosBase = 48, this.padPosRange = 0, this.movePadDetectMult = 1, this.shotPadDetectMult = 1.075, this.turnDirCooldown = .5, this.turnDirTicker = 0, this.mobileOffsetLandscape = 25, this.mobileOffsetPortrait = 100, this.lockedPadOffsetLandscape = m.create(126, 100), this.lockedPadOffsetPortrait = m.create(96, 160), this.lockedPadOffsetYLandscapeSafari = 120, this.lockedPadOffsetYPortraitSafari = 240;
                    var l = function(e) {
                            return -1 === ["locked", "anywhere"].indexOf(e) ? "anywhere" : e
                        },
                        c = l(a.get("touchMoveStyle")),
                        p = l(a.get("touchAimStyle"));
                    this.setMoveStyle(c), this.setAimStyle(p), this.setTouchAimLine(!!a.get("touchAimLine")), this.init()
                }
                return r(e, [{
                    key: "getTouchMovement",
                    value: function(e) {
                        return this.getMovement(e)
                    }
                }, {
                    key: "getAimMovement",
                    value: function(e, t) {
                        var a = e.re.curWeapIdx == l.WeaponSlot.Throwable;
                        return this.getAim(a, t)
                    }
                }, {
                    key: "setAimDir",
                    value: function(e) {
                        this.aimMovement.toAimDir = m.copy(e)
                    }
                }, {
                    key: "getMovement",
                    value: function(e) {
                        var t = null,
                            a = null,
                            i = !1,
                            r = void 0;
                        this.moveDetected = !1;
                        for (var o = 0; o < this.input.touches.length; o++) {
                            var n = this.input.touches[o];
                            if (!n.isDead && this.isLeftSideTouch(n.posDown.x, e)) {
                                var s = "anywhere" == this.moveStyle ? n.posDown : this.leftLockedPadCenter,
                                    l = m.sub(n.pos, s),
                                    c = m.length(l);
                                if (c > 2) {
                                    var p = (c - 2) / (this.padPosRange / this.movePadDetectMult - 2);
                                    r = p > 1e-5 ? m.div(l, p) : this.analogMovement.toMoveDir, this.analogMovement = {
                                        toMoveDir: m.create(r.x, -1 * r.y),
                                        toMoveLen: p
                                    }, this.moveDetected = !0
                                }
                                a = this.getConstrainedPos(s, n.pos, c), t = s, i = !0;
                                break
                            }
                        }
                        var d = this.touchPads[0];
                        return d.touched = i, i && "anywhere" == this.moveStyle ? d.centerPos = m.copy(t) : d.centerPos = m.copy(this.leftLockedPadCenter), d.touchPos.x = i ? a.x : this.leftLockedPadCenter.x, d.touchPos.y = i ? a.y : this.leftLockedPadCenter.y, this.analogMovement
                    }
                }, {
                    key: "getAim",
                    value: function(e, t) {
                        for (var a = !1, i = null, r = null, o = void 0, n = 0; n < this.input.touches.length; n++) {
                            var s = this.input.touches[n];
                            if (!s.isDead && !this.isLeftSideTouch(s.posDown.x, t)) {
                                var l = "anywhere" == this.aimStyle ? s.posDown : this.rightLockedPadCenter,
                                    c = m.sub(s.pos, l),
                                    p = m.length(c);
                                if (p > 2) {
                                    var d = m.sub(s.pos, l),
                                        h = m.length(d);
                                    o = h > 1e-5 ? m.div(d, h) : this.aimMovement.toAimDir, this.aimMovement = {
                                        toAimDir: m.create(o.x, -1 * o.y),
                                        toAimLen: h
                                    }
                                } else this.aimMovement.toAimLen = 0;
                                r = this.getConstrainedPos(l, s.pos, p), i = l, a = !0;
                                break
                            }
                        }
                        this.ha = this.Lt, this.Lt = this.aimMovement.toAimLen > this.padPosRange / this.shotPadDetectMult && a, this.touchingAim = a, e && this.ha && a && (this.Lt = !0);
                        var u = this.touchPads[1];
                        return u.touched = a, a && "anywhere" == this.aimStyle ? u.centerPos = m.copy(i) : u.centerPos = m.copy(this.rightLockedPadCenter), u.touchPos.x = a ? r.x : this.rightLockedPadCenter.x, u.touchPos.y = a ? r.y : this.rightLockedPadCenter.y, {
                            aimMovement: this.aimMovement,
                            touched: u.touched
                        }
                    }
                }, {
                    key: "update",
                    value: function(e, t, a, i, r) {
                        for (var o = 0; o < this.touchPads.length; o++) {
                            var n = this.touchPads[o];
                            n.centerSprite.position.x = n.centerPos.x, n.centerSprite.position.y = n.centerPos.y, n.centerSprite.scale.x = this.padScaleBase * this.padScaleDown, n.centerSprite.scale.y = this.padScaleBase * this.padScaleDown, n.centerSprite.visible = p.touch && this.display, n.touchSprite.position.x = n.touchPos.x, n.touchSprite.position.y = n.touchPos.y, n.touchSprite.scale.x = this.padScaleBase * this.padScalePos, n.touchSprite.scale.y = this.padScaleBase * this.padScalePos, n.touchSprite.visible = p.touch && this.display
                        }
                        this.da.update(this, t, a, i, r)
                    }
                }, {
                    key: "isLeftSideTouch",
                    value: function(e, t) {
                        return e < .5 * t.screenWidth
                    }
                }, {
                    key: "getConstrainedPos",
                    value: function(e, t, a) {
                        if (a <= this.padPosRange) return t;
                        var i = t.x - e.x,
                            r = t.y - e.y,
                            o = Math.atan2(r, i);
                        return m.create(Math.cos(o) * this.padPosRange + e.x, Math.sin(o) * this.padPosRange + e.y)
                    }
                }, {
                    key: "getConstrainedPosDown",
                    value: function(e, t, a) {
                        var i = m.normalizeSafe(t);
                        return m.add(e, m.mul(i, Math.max(0, a - this.padPosRange)))
                    }
                }, {
                    key: "toggleMoveStyle",
                    value: function() {
                        this.setMoveStyle("locked" == this.moveStyle ? "anywhere" : "locked")
                    }
                }, {
                    key: "setMoveStyle",
                    value: function(e) {
                        this.moveStyle = e, this.config.set("touchMoveStyle", e);
                        var t = document.getElementById("btn-game-move-style");
                        t && ("locked" == this.moveStyle ? (t.classList.remove("unlocked-on-icon"), t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"), t.classList.add("unlocked-on-icon")))
                    }
                }, {
                    key: "toggleAimStyle",
                    value: function() {
                        this.setAimStyle("locked" == this.aimStyle ? "anywhere" : "locked")
                    }
                }, {
                    key: "setAimStyle",
                    value: function(e) {
                        this.aimStyle = e, this.config.set("touchAimStyle", e);
                        var t = document.getElementById("btn-game-aim-style");
                        "locked" == this.aimStyle ? (t.classList.remove("unlocked-on-icon"), t.classList.add("locked-on-icon")) : (t.classList.remove("locked-on-icon"), t.classList.add("unlocked-on-icon"))
                    }
                }, {
                    key: "toggleAimLine",
                    value: function() {
                        this.setTouchAimLine(!this.touchAimLine)
                    }
                }, {
                    key: "setTouchAimLine",
                    value: function(e) {
                        this.touchAimLine = e, this.config.set("touchAimLine", this.touchAimLine);
                        var t = document.getElementById("btn-game-aim-line");
                        this.touchAimLine ? (t.classList.remove("aim-line-off-icon"), t.classList.add("aim-line-on-icon")) : (t.classList.remove("aim-line-on-icon"), t.classList.add("aim-line-off-icon"))
                    }
                }, {
                    key: "init",
                    value: function() {
                        this.resize()
                    }
                }, {
                    key: "resize",
                    value: function() {
                        var e = p.isLandscape,
                            t = this.lockedPadOffsetLandscape,
                            a = this.lockedPadOffsetPortrait;
                        p.tablet && (t.x = 1 * t.x, a.x = 1.25 * a.x);
                        var i = m.create(t.x, t.y),
                            r = m.create(a.x, a.y),
                            o = m.create(p.screenWidth - t.x, t.y),
                            n = m.create(p.screenWidth - a.x, a.y);
                        if ("ios" == p.os)
                            if ("iphonex" == p.model) i.x = i.x + 56, o.x = o.x - 56, i.y = .9 * i.y, o.y = .9 * o.y;
                            else if (p.webview) p.tablet && p.webview && (i.y = 1.1 * i.y, o.y = 1.1 * o.y);
                        else {
                            var s = this.lockedPadOffsetYLandscapeSafari,
                                l = this.lockedPadOffsetYPortraitSafari;
                            p.tablet && (window.navigator.standalone, s *= 1, l *= 1), i.y = s, r.y = l, o.y = s, n.y = l
                        }
                        this.padScaleBase = e ? 1 : .8, this.padPosRange = this.padPosBase * this.padScaleBase;
                        var c = e ? i : r;
                        this.leftLockedPadCenter = m.create(c.x, p.screenHeight - c.y);
                        var d = e ? o : n;
                        this.rightLockedPadCenter = m.create(d.x, p.screenHeight - d.y), this.setMobileStyling(e)
                    }
                }, {
                    key: "setMobileStyling",
                    value: function(e) {
                        if (p.touch && (o("#btn-touch-styles").find(".btn-game-container").css("display", "inline-block"), o("#ui-emote-button").css("display", "block")), p.uiLayout == p.UiLayout.Sm ? (o("#ui-map-wrapper").addClass("ui-map-wrapper-mobile").removeClass("ui-map-wrapper-desktop"), o("#ui-settings-container-mobile").css("display", "block"), o("#ui-settings-container-desktop").css("display", "none"), o("#ui-right-center").addClass("ui-right-center-mobile").removeClass("ui-right-center-desktop"), o("#ui-leaderboard-wrapper").css("display", "none"), o("#big-map-close").css("display", "block"), o("#ui-game-menu").removeClass("ui-game-menu-desktop"), o("#btn-game-tabs").css("display", "none"), o("#ui-game-tab-settings").removeClass("ui-game-tab-settings-desktop"), o(".ui-ability-key").css("display", "none")) : (o("#ui-map-wrapper").removeClass("ui-map-wrapper-mobile").addClass("ui-map-wrapper-desktop"), o("#ui-settings-container-mobile").css("display", "none"), o("#ui-settings-container-desktop").css("display", "block"), o("#ui-right-center").removeClass("ui-right-center-mobile").addClass("ui-right-center-desktop"), o("#ui-leaderboard-wrapper").css("display", "block"), o("#big-map-close").css("display", "none"), o("#ui-game-menu").addClass("ui-game-menu-desktop"), o("#btn-game-tabs").css("display", "flex"), o("#ui-game-tab-settings").addClass("ui-game-tab-settings-desktop"), o(".ui-ability-key").css("display", "block")), p.tablet && (e ? ("ios" == p.os ? p.webview ? (o("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-webview"), o("#ui-right-center").addClass("ui-right-center-tablet")) : (o("#ui-bottom-right").addClass("ui-bottom-right-tablet-ipad-browser"), o("#ui-right-center").addClass("ui-right-center-tablet-ipad-browser")) : (o("#ui-bottom-right").addClass("ui-bottom-right-tablet"), o("#ui-right-center").addClass("ui-right-center-tablet")), o("#ui-bottom-center-right").addClass("ui-bottom-center-right-tablet"), o("#ui-top-left").addClass("ui-top-left-tablet"), o("#ui-spectate-options-wrapper").addClass("ui-spectate-options-wrapper-tablet"), o("#ui-killfeed-wrapper").addClass("ui-killfeed-wrapper-tablet")) : (o("#ui-bottom-right").removeClass("ui-bottom-right-tablet"), o("#ui-right-center").removeClass("ui-right-center-tablet"), o("#ui-bottom-center-right").removeClass("ui-bottom-center-right-tablet"), o("#ui-top-left").removeClass("ui-top-left-tablet"), o("#ui-spectate-options-wrapper").removeClass("ui-spectate-options-wrapper-tablet"), o("#ui-killfeed-wrapper-wrapper").removeClass("ui-killfeed-wrapper-tablet"))), "ios" == p.os)
                            if ("iphonex" == p.model) {
                                var t = p.isLandscape ? "99%" : "90%",
                                    a = p.isLandscape ? 0 : 32;
                                o("#ui-game").css({
                                    height: t,
                                    top: a
                                }), o("#ui-stats-contents").css({
                                    transform: "translate(-50%) scale(0.95)",
                                    "transform-origin": "top"
                                }), e ? o("#ui-game").css({
                                    left: "50%",
                                    transform: "translateX(-50%)",
                                    width: "93%"
                                }) : o("#ui-game").css({
                                    left: "",
                                    transform: "",
                                    width: ""
                                })
                            } else if (window.navigator.standalone && !p.tablet) o("#ui-game").css({
                            height: "95%"
                        });
                        else {
                            var i = p.isLandscape ? "86%" : "82%";
                            p.tablet ? i = "100%" : p.webview && (i = "98%"), o("#ui-game").css({
                                height: i
                            });
                            var r = p.webview && !p.tablet ? 0 : 6,
                                n = o("#ui-right-center, #ui-top-center-scopes-wrapper, #ui-top-center, #ui-menu-display");
                            n.css({
                                "margin-top": r
                            })
                        }
                        this.reorderAmmo(!p.tablet && !e)
                    }
                }, {
                    key: "reorderAmmo",
                    value: function(e) {
                        e ? (o("#ui-loot-9mm").insertBefore("#ui-loot-45acp"), o("#ui-loot-12gauge").insertBefore("#ui-loot-45acp"), o("#ui-loot-762mm").insertBefore("#ui-loot-45acp"), o("#ui-loot-556mm").insertBefore("#ui-loot-45acp"), o("#ui-loot-50AE").insertBefore("#ui-loot-45acp"), o("#ui-loot-308sub").insertBefore("#ui-loot-45acp"), o("#ui-loot-flare").insertBefore("#ui-loot-45acp")) : (o("#ui-loot-50AE").insertBefore("#ui-loot-556mm"), o("#ui-loot-9mm").insertBefore("#ui-loot-556mm"), o("#ui-loot-308sub").insertBefore("#ui-loot-556mm"), o("#ui-loot-12gauge").insertBefore("#ui-loot-556mm"), o("#ui-loot-flare").insertBefore("#ui-loot-556mm"), o("#ui-loot-762mm").insertBefore("#ui-loot-556mm"), o("#ui-loot-45acp").insertBefore("#ui-loot-556mm"))
                    }
                }, {
                    key: "hideAll",
                    value: function() {
                        this.display = !1
                    }
                }]), e
            }()),
            h = function() {
                function e() {
                    i(this, e), this.container = new n.Container, this.container.visible = !1, this.dots = []
                }
                return r(e, [{
                    key: "createDot",
                    value: function() {
                        var e = new n.Sprite;
                        return e.texture = n.Texture.fromImage("dot.img"), e.anchor.set(.5, .5), e.position.set(0, 0), e.scale.set(1, 1), e.tint = 16777215, e.alpha = 1, e.visible = !1, e
                    }
                }, {
                    key: "update",
                    value: function(e, t, a, i, r) {
                        var o = p.touch && e.touchingAim && e.touchAimLine;
                        if (o) {
                            var n = t.ie.curWeapType,
                                d = l.items[n],
                                h = 30;
                            if ("gun" == d.type) {
                                var u = l.bullets[d.bulletType].distance;
                                h = d.barrelLength + u
                            }
                            var g = t.Bt(),
                                y = Math.sqrt(1.414 * g * g);
                            h = Math.min(h, y);
                            for (var w = m.copy(t.pos), x = m.add(w, m.mul(t.dir, h)), f = a.pe.m(), b = 0; b < f.length; b++) {
                                var _ = f[b];
                                if (!(!_.active || _.dead || _.height < l.bullet.height || !_.collidable || _.isWindow) && c.sameLayer(t.layer, _.layer) && !("throwable" == d.type && _.height <= l.projectile.maxHeight)) {
                                    var S = s.intersectSegment(_.collider, w, x);
                                    if (S) {
                                        var k = m.length(m.sub(S.point, w));
                                        k < h && (h = k, x = S.point)
                                    }
                                }
                            }
                            for (var v = m.length(m.sub(x, w)), z = Math.max(Math.ceil((v - 3.5) / 1.5), 0); this.dots.length < z;) {
                                var M = this.createDot();
                                this.container.addChild(M), this.dots.push(M)
                            }
                            for (var T = 0; T < this.dots.length; T++) {
                                var P = this.dots[T],
                                    I = 3.5 + 1.5 * T,
                                    C = m.add(t.pos, m.mul(t.dir, I));
                                P.position.set(C.x, C.y), P.scale.set(.01171875, .01171875), P.visible = T < z
                            }
                            var A = i.pointToScreen(m.create(0, 0)),
                                E = i.pointToScreen(m.create(1, 1)),
                                D = m.sub(E, A);
                            this.container.position.set(A.x, A.y), this.container.scale.set(D.x, D.y), this.container.alpha = .3, r.addPIXIObj(this.container, t.layer, 19, 0)
                        }
                        this.container.visible = o
                    }
                }]), e
            }();
        e.exports = {
            Ke: d
        }
    },
    e5d16b4d: function(e, t, a) {
        "use strict";

        function i(e) {
            return "close.img" == e ? "img/gui/close.svg" : e && e.length > 4 ? "img/emotes/" + e.slice(0, -4) + ".svg" : ""
        }

        function r(e) {
            var t = 180 * Math.atan2(e.y, e.x) / Math.PI;
            return t < 0 && (t += 360), t
        }

        function o(e, t, a) {
            return t <= a ? a - t <= 180 ? t <= e && e <= a : a <= e || e <= t : t - a <= 180 ? a <= e && e <= t : t <= e || e <= a
        }

        function n(e, t, a, i, o) {
            var n = this;
            this.audioManager = e, this.uiManager = t, this.gameElem = s("#ui-game"), this.disable = !1, this.At = null, this.playerBarn = a, this.camera = i, this.map = o, this.worldPos = f.create(0, 0), this.zIdxNext = 0, this.emoteSelector = {
                ping: g.None,
                emote: d.None
            }, this.emoteSoftTicker = 0, this.emoteHardTicker = 0, this.emoteCounter = 0, this.emoteWheelsGreyed = !1, this.teamEmotesGreyed = !1, this.wheelKeyTriggered = !1, this.emoteTimeoutTicker = 0, this.ua = !1, this.pingKeyDown = !1, this.pingMouseTriggered = !1, this.wheelDisplayed = !1, this.emoteMouseTriggered = !1, this.emoteScreenPos = f.create(0, 0), this.triggerPing = function() {
                if (this.At) {
                    var e = void 0;
                    this.emoteSelector.ping == g.None || this.emoteWheelsGreyed ? this.emoteSelector.emote == d.None || this.emoteWheelsGreyed || (e = this.At.pos, this.sendEmote({
                        type: this.emoteSelector.emote,
                        useLoadout: this.emoteSelector.useLoadout,
                        emoteSlot: this.emoteSelector.emoteSlot,
                        pos: e
                    }), this.uiManager.displayMapLarge(!0)) : y[this.emoteSelector.ping].pingMap && (e = this.uiManager.getWorldPosFromMapPos(this.bigmapPingPos || this.emoteScreenPos, this.map, this.camera), e || (e = this.camera.O(this.emoteScreenPos)), e.x = b.clamp(e.x, 0, this.map.width), e.y = b.clamp(e.y, 0, this.map.height), this.sendPing({
                        type: this.emoteSelector.ping,
                        pos: e
                    })), this.inputReset(), this.ua = this.pingKeyDown
                }
            }, this.triggerEmote = function() {
                if (this.At) {
                    var e = void 0;
                    this.emoteSelector.emote == d.None || this.emoteWheelsGreyed || (e = this.At.pos, this.sendEmote({
                        type: this.emoteSelector.emote,
                        useLoadout: this.emoteSelector.useLoadout,
                        emoteSlot: this.emoteSelector.emoteSlot,
                        pos: e
                    })), this.inputReset()
                }
            }, this.emoteTouchedPos = null, this.bigmapPingPos = null, S.touch && (this.emoteElems = s(".ui-emote"), this.emoteElems.css("pointer-events", "auto"), this.bigmapCollision = s("#big-map-collision"), this.bigmapCollision.on("touchend", function(e) {
                e.stopPropagation(), n.bigmapPingPos = {
                    x: e.originalEvent.changedTouches[0].pageX,
                    y: e.originalEvent.changedTouches[0].pageY
                }, n.emoteScreenPos = f.create(n.camera.screenWidth / 2, n.camera.screenHeight / 2), n.pingMouseTriggered = !0
            }), this.emoteButtonElem = s("#ui-emote-button"), this.emoteButtonElem.css("pointer-events", "auto"), this.emoteButtonElem.on("touchstart", function(e) {
                e.stopPropagation(), n.emoteScreenPos = f.create(n.camera.screenWidth / 2, n.camera.screenHeight / 2), n.emoteMouseTriggered = !0
            }), this.emoteElems.on("touchstart", function(e) {
                e.stopPropagation(), n.emoteTouchedPos = {
                    x: e.originalEvent.changedTouches[0].pageX,
                    y: e.originalEvent.changedTouches[0].pageY
                }
            }), s(document).on("touchstart", function(e) {
                n.wheelDisplayed && (e.stopPropagation(), n.inputReset())
            })), this.emoteWheels = s("#ui-emotes, #ui-team-pings"), this.teamEmotes = s(".ui-emote-bottom-left, .ui-emote-top-left"), this.emoteWheel = s("#ui-emotes"), this.emoteWheelData = {
                middle: {
                    parent: s("#ui-emote-middle"),
                    vA: f.create(-1, 1),
                    vC: f.create(1, 1),
                    ping: g.None,
                    emote: d.None,
                    modular: !1,
                    displayCloseIcon: !0
                },
                top: {
                    parent: s("#ui-emote-top"),
                    vA: f.create(-1, 1),
                    vC: f.create(1, 1),
                    ping: g.None,
                    emote: d.HappyFace,
                    modular: !1,
                    useLoadout: !0,
                    emoteSlot: p.Top
                },
                right: {
                    parent: s("#ui-emote-right"),
                    vA: f.create(1, 1),
                    vC: f.create(1, -1),
                    ping: g.None,
                    emote: d.ThumbsUp,
                    modular: !1,
                    useLoadout: !0,
                    emoteSlot: p.Right
                },
                bottom: {
                    parent: s("#ui-emote-bottom"),
                    vA: f.create(1, -1),
                    vC: f.create(-1, -1),
                    ping: g.None,
                    emote: d.Surviv,
                    modular: !1,
                    useLoadout: !0,
                    emoteSlot: p.Bottom
                },
                left: {
                    parent: s("#ui-emote-left"),
                    vA: f.create(-1, -1),
                    vC: f.create(-1, 1),
                    ping: g.None,
                    emote: d.SadFace,
                    modular: !1,
                    useLoadout: !0,
                    emoteSlot: p.Left
                }
            }, this.teamPingWheel = s("#ui-team-pings");
            var c = {
                middle: {
                    parent: s("#ui-team-ping-middle"),
                    vA: f.create(-1, 1),
                    vC: f.create(1, 1),
                    ping: g.None,
                    emote: d.None,
                    modular: !1,
                    displayCloseIcon: !0
                },
                top: {
                    parent: s("#ui-team-ping-top"),
                    vA: f.create(-1, 1),
                    vC: f.create(1, 1),
                    ping: g.Danger,
                    emote: d.None,
                    modular: !1
                },
                right: {
                    parent: s("#ui-team-ping-right"),
                    vA: f.create(1, 1),
                    vC: f.create(1, -1),
                    ping: g.Coming,
                    emote: d.None,
                    modular: !1
                },
                bottom: {
                    parent: s("#ui-team-ping-bottom"),
                    vA: f.create(1, -1),
                    vC: f.create(-1, -1),
                    ping: g.Help,
                    emote: d.None,
                    modular: !1
                },
                "bottom-left": {
                    parent: s("#ui-team-ping-bottom-left"),
                    vA: f.create(-1, -1),
                    vC: f.create(-1, 0),
                    ping: g.None,
                    emote: d.Medical,
                    modular: !1
                },
                "top-left": {
                    parent: s("#ui-team-ping-top-left"),
                    vA: f.create(-1, 0),
                    vC: f.create(-1, 1),
                    ping: g.None,
                    emote: d.Ammo,
                    modular: !0
                }
            };
            this.teamPingSelectors = [];
            for (var m in c)
                if (c.hasOwnProperty(m)) {
                    var u = c[m],
                        x = u.ping != g.None ? y[u.ping] : h[u.emote],
                        _ = r(u.vA),
                        z = r(u.vC),
                        M = x.texture;
                    x.displayCloseIcon && (M = "close.img"), this.teamPingSelectors.push({
                        parent: u.parent,
                        angleA: _,
                        angleC: z,
                        highlight: u.parent.find(".ui-emote-hl"),
                        highlightDisplayed: !1,
                        texture: M,
                        ping: u.ping,
                        emote: u.emote,
                        modular: u.modular
                    })
                }
            this.displayedSelectors = this.teamPingSelectors, this.baseScale = 1, this.container = new w.Container, this.container.scale = new w.Point(this.baseScale, this.baseScale), this.pingContainer = new w.Container, this.container.addChild(this.pingContainer), this.indContainer = new w.Container;
            var T = function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 16777215,
                    a = new w.Container,
                    i = new w.Container,
                    r = l.groupColors[e] || t,
                    o = w.Sprite.fromImage("ping-border.img");
                o.scale = new w.Point(.4, .4), o.anchor = new w.Point(.5, .5), o.tint = r, o.alpha = 0, o.visible = !0, a.addChild(o);
                var n = w.Sprite.fromImage("ping-team-danger.img");
                n.scale = new w.Point(.4, .4), n.anchor = new w.Point(.5, .5), n.tint = r, n.alpha = 0, n.visible = !0, a.addChild(n);
                var c = w.Sprite.fromImage("ping-team-danger.img");
                c.scale = new w.Point(.5, .5), c.anchor = new w.Point(.5, .5), c.tint = r, c.alpha = 0, c.visible = !0, i.addChild(c);
                var m = w.Sprite.fromImage("ping-indicator.img");
                return m.scale = new w.Point(.5, .5), m.anchor = new w.Point(.5, 0), m.alpha = 0, m.visible = !0, i.addChild(m), {
                    elem: s("#ui-team-indicators").find(".ui-indicator-ping[data-id=" + e + "]"),
                    borderElem: s("#ui-team-indicators").find(".ui-indicator-ping-border[data-id=" + e + "]"),
                    pingContainer: a,
                    indContainer: i,
                    borderSprite: {
                        sprite: o,
                        baseScale: .4
                    },
                    pingSprite: {
                        sprite: n,
                        baseScale: .4
                    },
                    indSpriteOuter: {
                        sprite: m,
                        baseScale: .5,
                        baseTint: m.tint
                    },
                    indSpriteInner: {
                        sprite: c,
                        baseScale: .5,
                        baseTint: c.tint
                    },
                    displayed: !1,
                    fadeIn: 0,
                    life: 0,
                    fadeOut: 0,
                    pos: f.create(0, 0)
                }
            };
            this.pingIndicators = [];
            for (var P = 0; P < 4; P++) {
                var I = T(P);
                this.pingContainer.addChild(I.pingContainer), this.indContainer.addChild(I.indContainer), this.pingIndicators.push({
                    ping: I
                })
            }
            this.airdropIndicator = T(k, y[g.Airdrop].tint), this.pingContainer.addChild(this.airdropIndicator.pingContainer), this.indContainer.addChild(this.airdropIndicator.indContainer), this.pingIndicators.push({
                ping: this.airdropIndicator
            }), this.airstrikeIndicator = T(v, y[g.Airstrike].tint), this.pingContainer.addChild(this.airstrikeIndicator.pingContainer), this.indContainer.addChild(this.airstrikeIndicator.indContainer), this.pingIndicators.push({
                ping: this.airstrikeIndicator
            }), this.emoteLifeIn = .75, this.emoteLife = 1, this.emoteLifeOut = .1, this.pingFadeIn = .5, this.pingLife = 4.25, this.pingFadeOut = .1, this.wedgeOpacityReset = S.touch ? 1 : .75, this.teamEmoteOpacityReset = .2, this.emotes = [], this.newPings = [], this.newEmotes = []
        }
        var s = a("8ee62bea"),
            l = a("989ad62a"),
            c = l.Input,
            m = a("b78cf179"),
            p = m.EmoteSlot,
            d = m.EmoteType,
            h = m.EmoteData,
            u = a("b198b546"),
            g = u.PingType,
            y = u.PingData,
            w = a("8b1dfb45"),
            x = a("34e32c48"),
            f = a("c2a798c8"),
            b = a("10899aea"),
            _ = a("1901e2d9"),
            S = a("ce29f17f"),
            k = (a("119e8c4c"), a("4b8d140f"), 4),
            v = 5;
        n.prototype = {
            n: function() {
                S.touch && (s(document).off("touchstart"), this.emoteButtonElem.off("touchstart"), this.emoteElems.off("touchstart"), this.bigmapCollision.off("touchend")), this.o()
            },
            o: function() {
                this.emoteWheelsGreyed = !1, this.emoteWheels.css("opacity", 1), this.teamEmotesGreyed = !1, this.teamEmotes.css("opacity", 1), this.disable = !1, this.inputReset()
            },
            hasCustomEmotes: function() {
                for (var e = 0, t = Object.keys(this.emoteWheelData), a = 0; a < t.length; a++) {
                    var i = t[a];
                    (this.emoteWheelData[i].emoteSlot > 0 || this.emoteWheelData[i].useLoadout) && e++
                }
                return e > 0
            },
            inputReset: function() {
                this.pingMouseTriggered = !1, this.ua = !1, this.emoteMouseTriggered = !1, this.wheelDisplayed = !1, this.displayWheel(this.teamPingWheel, !1), this.displayWheel(this.emoteWheel, !1), this.emoteTouchedPos = null, this.bigmapPingPos = null, this.emoteTimeoutTicker = 0;
                for (var e = 0; e < this.displayedSelectors.length; e++) {
                    var t = this.displayedSelectors[e],
                        a = h[t.emote];
                    this.teamEmotesGreyed && a.teamOnly ? t.parent.css("opacity", this.teamEmoteOpacityReset) : t.parent.css("opacity", this.wedgeOpacityReset), t.highlight.css("display", "none"), t.highlightDisplayed = !1
                }
            },
            sendPing: function(e) {
                var t = {};
                t.type = e.type, t.pos = e.pos, this.newPings.push(t), this.incrementEmote()
            },
            addPing: function(e, t) {
                if (this.At) {
                    var a = y[e.type];
                    if (a) {
                        this.uiManager.createPing(e.type, e.pos, e.playerId, this.At.__id, this.playerBarn, t);
                        var i = null,
                            r = a.sound;
                        if (e.type == g.Airdrop) i = this.pingIndicators[k].ping;
                        else if (e.type == g.Airstrike) i = this.pingIndicators[v].ping;
                        else {
                            var o = this.playerBarn.ne(e.playerId);
                            if (o) {
                                var n = this.playerBarn.ne(this.At.__id).groupId,
                                    s = o.groupId;
                                if (n == s) {
                                    var l = this.playerBarn.getGroupInfo(s),
                                        c = l.playerIds.indexOf(e.playerId); - 1 !== c && (i = this.pingIndicators[c].ping)
                                }
                            }
                            var m = this.playerBarn.se(e.playerId);
                            m && m.factionLeader && (r = a.soundLeader)
                        }
                        t || e.type != g.Airstrike ? this.audioManager.playSound(r, {
                            channel: "ui"
                        }) : this.audioManager.playSound(r, {
                            channel: "ui",
                            fallOff: 1,
                            soundPos: e.pos,
                            rangeMult: 20
                        }), i && (i.pos = e.pos, i.pingSprite.sprite.texture = w.Texture.fromImage(a.texture), i.indSpriteInner.sprite.texture = w.Texture.fromImage(a.texture), i.indSpriteInner.sprite.tint = a.mapEvent ? a.tint : i.indSpriteInner.baseTint, i.indSpriteOuter.sprite.tint = a.mapEvent ? a.tint : i.indSpriteOuter.baseTint, i.fadeIn = this.pingFadeIn, i.life = this.pingLife, i.fadeOut = this.pingFadeOut, i.mapEvent = a.mapEvent, i.worldDisplay = a.worldDisplay)
                    }
                }
            },
            sendEmote: function(e) {
                var t = {};
                t.useLoadout = e.useLoadout, t.type = e.useLoadout ? e.emoteSlot : e.type, t.pos = e.pos, this.newEmotes.push(t), this.incrementEmote()
            },
            addEmote: function(e) {
                var t = h[e.type];
                if (t) {
                    for (var a = null, i = 0; i < this.emotes.length; i++) this.emotes[i].alive || a ? this.emotes[i].alive && this.emotes[i].playerId == e.playerId && (this.emotes[i].alive = !1) : a = this.emotes[i];
                    if (a || (a = {}, a.alive = !1, a.pos = f.create(0, 0), a.container = new w.Container, a.circleOuter = new w.Sprite.fromImage("emote-circle-outer.img"), a.circleOuter.anchor = new w.Point(.5, .5), a.baseScale = .55, a.circleOuter.scale = new w.Point(.8 * a.baseScale, .8 * a.baseScale), a.circleOuter.tint = 0, a.circleOuter.visible = !0, a.container.addChild(a.circleOuter), a.sprite = new w.Sprite, a.sprite.anchor = new w.Point(.5, .5), a.container.addChild(a.sprite), a.sprite.scale = new w.Point(a.baseScale, a.baseScale), a.posOffset = new w.Point(0, 4), a.container.scale = new w.Point(1, 1), a.container.visible = !1, this.emotes.push(a)), a.alive = !0, a.isNew = !0, a.type = e.type, a.playerId = e.playerId, a.pos = f.create(0, 0), a.lifeIn = this.emoteLifeIn, a.life = this.emoteLife, a.lifeOut = this.emoteLifeOut, a.zIdx = this.zIdxNext++, a.sprite.texture = w.Texture.fromImage(t.texture), a.container.visible = !1, a.baseScale = .55, a.sound = t.sound, e.type == d.Loot) {
                        var r = l.items[e.itemType];
                        if (r) {
                            a.sprite.texture = w.Texture.fromImage(r.lootImg.sprite);
                            var o = l.items[r.ammo];
                            a.circleOuter.tint = o ? o.lootImg.tintDark : 0, r.lootImg.rot ? a.sprite.rotation = r.lootImg.rot : a.sprite.rotation = 0, r.lootImg.mirror ? a.sprite.scale = new w.Point(-1 * a.baseScale, a.baseScale) : a.sprite.scale = new w.Point(a.baseScale, a.baseScale), r.sound && r.sound.deploy && (a.sound = r.sound.deploy)
                        }
                    } else a.circleOuter.tint = 0, a.sprite.rotation = 0, a.sprite.scale = new w.Point(a.baseScale, a.baseScale)
                }
            },
            incrementEmote: function() {
                ++this.emoteCounter >= l.player.emoteThreshold && (this.emoteHardTicker = this.emoteHardTicker > 0 ? this.emoteHardTicker : 1.5 * l.player.emoteHardCooldown)
            },
            c: function(e, t, a, n, s, m, p, u, y) {
                var w = this.playerBarn,
                    k = this.camera,
                    v = f.create(p.de.x, p.de.y);
                if (p.lostFocus && this.inputReset(), u.isBindPressed(c.TeamPingMenu) && (this.pingKeyDown || y || (this.pingKeyDown = !0, this.ua = !0)), u.isBindReleased(c.TeamPingMenu) && this.pingKeyDown && (this.pingKeyDown = !1, this.ua = this.wheelDisplayed), u.isBindPressed(c.TeamPingSingle) && (this.pingMouseTriggered || this.emoteMouseTriggered || (this.emoteScreenPos = f.copy(v), this.pingMouseTriggered = !0)), u.isBindReleased(c.TeamPingSingle) && this.pingMouseTriggered && this.triggerPing(), u.isBindPressed(c.EmoteMenu) && (this.pingMouseTriggered || this.emoteMouseTriggered || !this.pingKeyDown || (this.emoteScreenPos = f.copy(v), this.pingMouseTriggered = !0), this.pingMouseTriggered || (this.emoteScreenPos = f.copy(v), this.emoteMouseTriggered = !0)), u.isBindReleased(c.EmoteMenu) && (this.ua && this.pingMouseTriggered && this.triggerPing(), this.emoteMouseTriggered && this.triggerEmote()), this.At = a, t == a.__id && !a.ie.dead || this.disable || (this.n()/*free888*/, this.disable = !0), !this.disable) {
                    var z = a.re.weapons[a.re.curWeapIdx],
                        M = l.items[z.name],
                        T = "";
                    if (M && (T = M.ammo ? M.ammo : T), this.wheelKeyTriggered = this.ua || this.emoteMouseTriggered, this.emoteSoftTicker -= e, this.emoteCounter >= l.player.emoteThreshold && this.emoteHardTicker > 0 ? (this.emoteHardTicker -= e, this.emoteHardTicker < 0 && (this.emoteCounter = 0)) : this.emoteSoftTicker < 0 && this.emoteCounter > 0 && (this.emoteCounter--, this.emoteSoftTicker = 1.5 * l.player.emoteSoftCooldown), !this.pingMouseTriggered && !this.emoteMouseTriggered || this.wheelDisplayed || (this.parentDisplayed = this.pingMouseTriggered ? this.teamPingWheel : this.emoteWheel, this.parentDisplayed.css({
                            display: "block",
                            left: this.emoteScreenPos.x,
                            top: this.emoteScreenPos.y
                        }), this.displayWheel(this.parentDisplayed, !0), this.wheelDisplayed = !0, this.displayedSelectors = this.pingMouseTriggered ? this.teamPingSelectors : this.emoteWheelSelectors, this.worldPos = k.O(this.emoteScreenPos)), this.wheelDisplayed)
                        if (this.emoteTimeoutTicker += e, this.emoteTimeoutTicker > 10) this.inputReset();
                        else {
                            this.emoteHardTicker > 0 && !this.emoteWheelsGreyed ? (this.emoteWheels.css("opacity", .5), this.emoteWheelsGreyed = !0) : this.emoteHardTicker <= 0 && this.emoteWheelsGreyed && (this.emoteWheels.css("opacity", 1), this.emoteWheelsGreyed = !1), this.teamEmotesGreyed || 1 != n || (this.teamEmotes.css("opacity", this.teamEmoteOpacityReset), this.teamEmotesGreyed = !0);
                            var P = null;
                            if (g.None, S.touch && (v = this.emoteTouchedPos), v) {
                                var I = f.sub(v, this.emoteScreenPos);
                                I.y *= -1;
                                for (var C = f.length(I), A = r(I), E = 0; E < this.displayedSelectors.length; E++) {
                                    var D = this.displayedSelectors[E];
                                    if (D.modular) {
                                        var O = D.emote;
                                        switch (T) {
                                            case "9mm":
                                                D.emote = d.Ammo9mm, D.texture = h[d.Ammo9mm].texture;
                                                break;
                                            case "12gauge":
                                                D.emote = d.Ammo12Gauge, D.texture = h[d.Ammo12Gauge].texture;
                                                break;
                                            case "762mm":
                                                D.emote = d.Ammo762mm, D.texture = h[d.Ammo762mm].texture;
                                                break;
                                            case "556mm":
                                                D.emote = d.Ammo556mm, D.texture = h[d.Ammo556mm].texture;
                                                break;
                                            case "50AE":
                                                D.emote = d.Ammo50AE, D.texture = h[d.Ammo50AE].texture;
                                                break;
                                            case "308sub":
                                                D.emote = d.Ammo308sub, D.texture = h[d.Ammo308sub].texture;
                                                break;
                                            case "flare":
                                                D.emote = d.AmmoFlare, D.texture = h[d.AmmoFlare].texture;
                                                break;
                                            case "45acp":
                                                D.emote = d.Ammo45acp, D.texture = h[d.Ammo45acp].texture;
                                                break;
                                            default:
                                                D.emote = d.Ammo, D.texture = h[d.Ammo].texture
                                        }
                                        if (O != D.emote) {
                                            var B = D.parent.find(".ui-emote-image"),
                                                L = i(D.texture);
                                            B.css("background-image", "url(" + L + ")")
                                        }
                                    }
                                    var R = D.ping != g.None || D.emote != d.None,
                                        F = h[D.emote],
                                        j = F.teamOnly && 1 == n;
                                    C <= 35 && !R && this.emoteHardTicker <= 0 && !j ? P = D : o(A, D.angleC, D.angleA) && C > 35 && R && this.emoteHardTicker <= 0 && !j ? P = D : D.highlightDisplayed && (D.parent.css("opacity", this.wedgeOpacityReset), D.highlight.css("display", "none"), D.highlightDisplayed = !1)
                                }
                            }
                            P && (this.emoteSelector = P, P.highlightDisplayed || (P.parent.css("opacity", 1), P.highlight.css("display", "block"), P.highlightDisplayed = !0), S.touch && this.emoteTouchedPos && (this.pingMouseTriggered ? this.triggerPing() : this.triggerEmote()))
                        }
                }
                for (var N = 0; N < this.emotes.length; N++) {
                    var V = this.emotes[N];
                    if (V.alive) {
                        var q = !1,
                            G = f.create(0, 0),
                            U = 0,
                            H = w.ve(V.playerId);
                        if (H && !H.ie.dead && (G = f.copy(H.pos), U = H.layer, q = !0), !q) {
                            var W = s.getDeadBodyById(V.playerId);
                            W && (G = f.copy(W.pos), U = W.layer, q = !0)
                        }
                        if (q) {
                            if (V.isNew) {
                                var K = h[V.type];
                                this.audioManager.playSound(V.sound, {
                                    channel: K.channel,
                                    soundPos: G,
                                    layer: U
                                })
                            }
                            V.isNew = !1, V.pos = G, V.lifeIn > 0 ? V.lifeIn -= e : V.life > 0 ? V.life -= e : V.lifeOut > 0 && (V.lifeOut -= e);
                            var Z = _.sameLayer(U, this.At.layer) ? 3 : U;
                            m.addPIXIObj(V.container, Z, 5e4, V.zIdx), V.alive = V.alive && V.lifeOut > 0
                        } else V.alive = !1
                    }
                }
                for (var X = f.create(.5 * k.screenWidth / k.z(), .5 * k.screenHeight / k.z()), Y = {
                        min: f.sub(k.pos, X),
                        max: f.add(k.pos, X)
                    }, J = w.ne(a.__id).groupId, Q = w.getGroupInfo(J), $ = (Q.playerIds.length, 0); $ < this.pingIndicators.length; $++) {
                    var ee = this.pingIndicators[$].ping,
                        te = Q.playerIds[$],
                        ae = ee.pingContainer,
                        ie = ee.indContainer;
                    if (void 0 != te || ee.mapEvent) {
                        var re = (w.ne(te), te == this.At.__id),
                            oe = w.se(te),
                            ne = ee.borderSprite.sprite,
                            se = ee.pingSprite.sprite,
                            le = ee.indSpriteOuter.sprite,
                            ce = ee.indSpriteInner.sprite,
                            me = !0;
                        if (ee.fadeIn -= e, ee.life -= e, ee.fadeOut -= ee.life > 0 ? 0 : e, ee.fadeOut > 0) {
                            var pe = ee.pos,
                                de = f.normalizeSafe(f.sub(pe, k.pos), f.create(1, 0)),
                                he = x.intersectRayAabb(k.pos, de, Y.min, Y.max),
                                ue = Math.atan2(de.y, -de.x) + .5 * Math.PI,
                                ge = k.pointToScreen(he),
                                ye = x.testCircleAabb(pe, l.player.radius, Y.min, Y.max),
                                we = k.pixels(ee.borderSprite.baseScale),
                                xe = k.pixels(ee.pingSprite.baseScale);
                            if (ne.scale.set(we, we), se.scale.set(xe, xe), oe && oe.dead) continue;
                            me = ee.fadeOut < 0;
                            var fe = ye ? k.pointToScreen(pe).x : b.clamp(ge.x, 64, k.screenWidth - 64),
                                be = ye ? k.pointToScreen(pe).y : b.clamp(ge.y, 64, k.screenHeight - 64),
                                _e = k.pointToScreen(pe).x,
                                Se = k.pointToScreen(pe).y;
                            se.position.x = _e, se.position.y = Se, ne.position.x = _e, ne.position.y = Se, le.position.x = fe, le.position.y = be, le.rotation = ue, ce.position.x = fe, ce.position.y = be;
                            var ke = ne.alpha <= 0 ? 1 : ne.alpha - e;
                            ne.alpha = ke;
                            var ve = k.pixels(ee.borderSprite.baseScale * (2 - ke));
                            if (ne.scale.set(ve, ve), ce.alpha = ye ? 0 : ke, ee.fadeIn > 0) {
                                var ze = 1 - ee.fadeIn / this.pingFadeIn;
                                ae.alpha = 1, ie.alpha = 1, se.alpha = 1, le.alpha = ye ? 0 : ze
                            } else le.alpha = ye ? 0 : 1;
                            if (ee.life < 0) {
                                var Me = ee.fadeOut / this.pingFadeOut;
                                ae.alpha = Me, ie.alpha = Me
                            }
                            ee.displayed || (ae.visible = ee.worldDisplay, ie.visible = !re || ee.mapEvent, ee.displayed = !0)
                        }
                        me && ee.displayed && (ae.visible = !1, ie.visible = !1, ee.displayed = !1)
                    } else ae.visible = !1, ie.visible = !1, ee.displayed = !1
                }
            },
            displayWheel: function(e, t) {
                e.css("display", t ? "block" : "none")
            },
            updateEmoteWheel: function(e) {
                var t = {
                    top: e[p.Top],
                    right: e[p.Right],
                    bottom: e[p.Bottom],
                    left: e[p.Left]
                };
                for (var a in t)
                    if (t.hasOwnProperty(a)) {
                        var o = h[t[a]];
                        if (this.emoteWheelData[a] && void 0 != o) {
                            var n = h[t[a]];
                            n.teamOnly || (this.emoteWheelData[a].emote = t[a])
                        }
                    }
                this.emoteWheelSelectors = [];
                for (var s in this.emoteWheelData)
                    if (this.emoteWheelData.hasOwnProperty(s)) {
                        var l = this.emoteWheelData[s],
                            c = h[l.emote],
                            m = r(l.vA),
                            d = r(l.vC),
                            u = c.texture;
                        l.displayCloseIcon && (u = "close.img"), this.emoteWheelSelectors.push(Object.assign({}, {
                            angleA: m,
                            angleC: d,
                            highlight: l.parent.find(".ui-emote-hl"),
                            highlightDisplayed: !1,
                            texture: u
                        }, l));
                        var g = l.parent.find(".ui-emote-image"),
                            y = i(u);
                        g.css("background-image", "url(" + y + ")")
                    }
            },
            render: function(e) {
                for (var t = 0; t < this.emotes.length; t++) {
                    var a = this.emotes[t];
                    if (a.container.visible = a.alive, a.alive) {
                        var i = 0;
                        if (a.lifeIn > 0) {
                            var r = 1 - a.lifeIn / this.emoteLifeIn;
                            i = b.easeOutElastic(r)
                        } else if (a.life > 0) i = 1;
                        else if (a.lifeOut > 0) {
                            var o = a.lifeOut / this.emoteLifeOut;
                            i = o
                        }
                        var n = f.add(a.pos, f.mul(a.posOffset, 1 / b.clamp(e.k, .75, 1))),
                            s = e.pointToScreen(n),
                            l = i * a.baseScale * b.clamp(e.k, .9, 1.75);
                        a.container.position.set(s.x, s.y), a.container.scale.set(l, l)
                    }
                }
            }
        }, e.exports = {
            St: n
        }
    },
    e9735f40: function(e, t, a) {
        "use strict";
        var i = {
            "@metadata": {
                "last-updated": "2018-04-07",
                locale: "jp"
            },
            "word-order": "svo",
            "index-slogan": "2Dバトルロワイヤル",
            "index-region": "地域",
            "index-north-america": "北アメリカ",
            "index-europe": "ヨーロッパ",
            "index-asia": "アジア",
            "index-south-america": "南アメリカ",
            "index-korea": "大韓民国",
            "index-players": "プレイヤー",
            "index-play-solo": "1人で遊ぶ",
            "index-play-duo": "2人で遊ぶ",
            "index-play-squad": "4人で遊ぶ",
            "index-join-team": "チームに参加",
            "index-create-team": "チームを作成",
            "index-leave-team": "キャンセル",
            "index-joining-team": "チームに参加中",
            "index-creating-team": "チームを作成中",
            "index-invite-link": "招待リンク",
            "index-solo": "ソロ",
            "index-duo": "デュオ",
            "index-squad": "スクワッド",
            "index-auto-fill": "自動編成あり",
            "index-no-fill": "自動編成なし",
            "index-waiting-for-leader": "リーダーがゲームを開始するのを待っています",
            "index-play": "出発する",
            "index-featured-youtuber": "おすすめYoutuber",
            "index-settings": "設定",
            "index-high-resolution": "高画質モード",
            "index-screen-shake": "振動エフェクト",
            "index-master-volume": "Master Volume",
            "index-sfx-volume": "SFX Volume",
            "index-music-volume": "Music Volume",
            "index-mobile-announce": "スマートフォンでもプレイできるようになりました！",
            "index-mobile-tooltip": "スマートフォンで <span>surviv.io</span> を開いていつでもどこでもプレイしましょう！",
            "index-team-is-full": "チームは満員です！",
            "index-failed-joining-team": "チームへの参加に失敗しました",
            "index-failed-creating-team": "チームの作成に失敗しました",
            "index-failed-finding-game": "ゲームの検索に失敗しました",
            "index-failed-joining-game": "ゲームへの参加に失敗しました",
            "index-lost-connection": "チームとの接続が切断されました",
            "index-host-closed": "ホストが接続を終了しました",
            "index-invalid-protocol": "Old client version.",
            "index-view-more": "詳細",
            "index-back-to-main": "メインメニューに戻る",
            "index-most-kills": "キル数",
            "index-total-kills": "総キル数",
            "index-total-wins": "ドン勝数",
            "index-top-5-percent": "上位5%",
            "index-kill-death-ratio": "キル / デス",
            "index-mode": "Mode",
            "index-for": "For",
            "index-today": "今日",
            "index-this-week": "今週",
            "index-all-time": "全期間",
            "index-top-100": "上位100名",
            "index-rank": "順位",
            "index-player": "プレイヤー名",
            "index-total-games": "Total Games",
            "index-controls": "操作方法",
            "index-movement": "移動",
            "index-movement-ctrl": "[W] , [A] , [S] , [D]",
            "index-aim": "照準",
            "index-aim-ctrl": "マウスカーソル",
            "index-punch": "殴る",
            "index-shoot": "射撃",
            "index-shoot-ctrl": "左クリック",
            "index-change-weapons": "武器変更",
            "index-change-weapons-ctrl": "[1] 〜 [2] , スクロールホイール",
            "index-stow-weapons": "武器をしまう（拳で抵抗）",
            "index-stow-weapons-ctrl": "[3] , [E]",
            "index-swap-weapons": "直前の武器を装備",
            "index-swap-weapons-ctrl": "[Q]",
            "index-reload": "リロード",
            "index-reload-ctrl": "[R]",
            "index-scope-zoom": "スコープ倍率変更",
            "index-scope-zoom-ctrl": "倍率を左クリック",
            "index-pickup": "拾う",
            "index-loot": "奪う",
            "index-revive": "蘇生",
            "index-pickup-ctrl": "[F]",
            "index-use-medical": "医薬品の使用",
            "index-use-medical-ctrl": "アイテムを左クリック , [7]～[0]",
            "index-drop-item": "アイテムを捨てる",
            "index-drop-item-ctrl": "アイテムを右クリック",
            "index-cancel-action": "行動キャンセル",
            "index-cancel-action-ctrl": "[X]",
            "index-view-map": "マップを表示",
            "index-view-map-ctrl": "[M] , [G]",
            "index-toggle-minimap": "ミニマップ表示切替",
            "index-toggle-minimap-ctrl": "[V]",
            "index-use-ping": "チームエモートの使用",
            "index-use-ping-ctrl": "[C]を押しながら右クリックをドラッグして表示. 該当のエモート上で右クリックを離す.",
            "index-use-emote": "エモートの使用",
            "index-use-emote-ctrl": "右クリックをドラッグして表示. 該当のエモート上で右クリックを離す.",
            "index-how-to-play": "遊び方",
            "index-tips-1-desc": "Surviv.ioの勝利条件は最後の一人になるまで生き残ることです. 同じ試合では一度死亡した時点でゲームオーバーとなります.",
            "index-tips-2": "2D PUBG",
            "index-tips-2-desc": "既にPUBGやFortnite、H1Z1といった他のバトルロワイヤルゲームをプレイしたことがあるのであれば、勝利への道は目前です！Surviv.ioは2D版PUBGのようなものです.",
            "index-tips-3": "アイテムを略奪せよ",
            "index-tips-3-desc": "ゲーム開始時点では簡潔なバックパックしかありません. マップ中を駆け巡り、武器や銃弾、スコープ、医薬品など様々なアイテムを手に入れましょう. 他のプレイヤーを討ち取り戦利品をゲットしましょう！",
            "index-tips-4": "赤色 = ガスから逃げろ！",
            "index-tips-4-desc": "敵はプレイヤーだけではありません. マップの端から迫ってくるレッドゾーン内に入れば、断続的なダメージを受けて死に至る危険があります. マップに目を光らせて安全地帯で生き残りましょう.",
            "index-movement-ctrl-touch": "Left stick",
            "index-aim-ctrl-touch": "Right stick",
            "index-shoot-ctrl-touch": "Drag right stick outside stick border",
            "index-change-weapons-ctrl-touch": "Tap weapon slot",
            "index-reload-ctrl-touch": "Tap equipped ammo counter",
            "index-scope-zoom-ctrl-touch": "Tap zoom item",
            "index-pickup-ctrl-touch": "Tap interaction button or loot name",
            "index-use-medical-ctrl-touch": "Tap medical item",
            "index-drop-item-ctrl-touch": "Touch and hold item",
            "index-cancel-action-ctrl-touch": "Tap interaction button",
            "index-view-map-ctrl-touch": "Tap minimap",
            "index-use-ping-ctrl-touch": "View map and tap anywhere on map",
            "index-use-emote-ctrl-touch": "Tap surviv icon",
            "game-alive": "生存",
            "game-reloading": "リロード中",
            "game-using": "使用中",
            "game-reviving": "蘇生中",
            "game-revive-teammate": "チームメイトを蘇生",
            "game-equip": "装備",
            "game-cancel": "キャンセル",
            "game-open-door": "ドアを開く",
            "game-close-door": "ドアを閉める",
            "game-You": "あなた",
            "game-you": "あなた",
            "game-themselves": "自分自身",
            "game-yourself": "あなた自身",
            "game-you-died": "が死亡しました",
            "game-player-died": "が死亡しました",
            "game-with": "使用して",
            "game-knocked-out": "が気絶させました",
            "game-killed": "が殺しました",
            "game-finally-killed": "ついに殺しました",
            "game-finally-bled-out": "ついに息絶えました",
            "game-died-outside": "がセーフゾーンの外で死亡しました",
            "game-the-red-zone": "レッドゾーン",
            "game-waiting-for-players": "プレイヤーを待っています",
            "game-spectating": "観戦中",
            "game-red-zone-advances": "ガス汚染エリア拡大まで",
            "game-red-zone-advancing": "ガス汚染エリアが拡大中、安全地帯に逃げてください！",
            "game-seconds": "秒",
            "game-minutes": "分",
            "game-minute": "分",
            "game-m": "分",
            "game-s": "秒",
            "game-not-enough-space": "インベントリに空きがありません！",
            "game-item-already-owned": "既に所持しているアイテムです！",
            "game-item-already-equipped": "既に装備しているアイテムです！",
            "game-better-item-equipped": "より優れたアイテムを装備しています！",
            "game-play-new-game": "次の試合に参加する",
            "game-spectate": "観戦する",
            "game-full-screen": "全画面表示",
            "game-sound": "ミュート",
            "game-quit-game": "撤退する",
            "game-return-to-game": "試合に戻る",
            "game-hide-match-stats": "戦績を非表示",
            "game-view-match-stats": "戦績を表示",
            "game-previous-teammate": "前のチームメイト",
            "game-next-teammate": "次のチームメイト",
            "game-leave-game": "試合から離脱する",
            "game-your-results": "あなたの戦績",
            "game-chicken": "勝った！勝った！夕飯はドン勝だ！！",
            "game-won-the-game": "がゲームに勝利しました",
            "game-team-eliminated": "まあ、こんな日もあるのさ！次はもう少しツイてますように！",
            "game-solo-rank": "Solo 順位",
            "game-duo-rank": "Duo 順位",
            "game-squad-rank": "Squad 順位",
            "game-rank": "順位",
            "game-team-rank": "チーム順位",
            "game-team-kills": "チームキル数",
            "game-kill": "キル数",
            "game-kills": "キル数",
            "game-damage-dealt": "与ダメージ",
            "game-damage-taken": "被ダメージ",
            "game-survived": "生存時間",
            "game-backpack00": "ポーチ",
            "game-backpack01": "スモールバックパック",
            "game-backpack02": "レギュラーバックパック",
            "game-backpack03": "ミリタリーバックパック",
            "game-bandage": "包帯",
            "game-bandage-tooltip": "左クリックでHPを15回復します",
            "game-healing-tooltip": "75HP以上の場合は回復できません",
            "game-healthkit": "救急箱",
            "game-healthkit-tooltip": "左クリックでHPを100回復します",
            "game-soda": "ソーダ",
            "game-soda-tooltip": "左クリックでアドレナリンを25増加させます",
            "game-adrenaline-tooltip": "アドレナリンはHPを時間とともに自動回復させます",
            "game-painkiller": "鎮痛剤",
            "game-painkiller-tooltip": "左クリックでアドレナリンを50増加させます",
            "game-9mm": "9mm",
            "game-9mm-tooltip": "MP5, MAC-10, UMP9, Vector, CZ-3A1, M9, G18C用の弾薬",
            "game-12gauge": "12 gauge",
            "game-12gauge-tooltip": "M870, M1100, SPAS-12, MP220, Saiga-12用の弾薬",
            "game-762mm": "7.62mm",
            "game-762mm-tooltip": "AK-47, SCAR-H, DP-28, Mosin-Nagant, SV-98, M1, M39, OT-38用の弾薬",
            "game-556mm": "5.56mm",
            "game-556mm-tooltip": "FAMAS, M416, M4A1-S, QBB-97, Mk 12 SPR, M249用の弾薬",
            "game-50AE": ".50 AE",
            "game-50AE-tooltip": "DEagle 50用の弾薬",
            "game-308sub": ".308 Subsonic",
            "game-308sub-tooltip": "AWM-S用の弾薬",
            "game-flare": "Flare",
            "game-flare-tooltip": "Flare Gun用の弾薬",
            "game-45acp": ".45 ACP",
            "game-45acp-tooltip": "M1911, M1A1, Model 94, Peacemaker用の弾薬",
            "game-chest01": "レベル1 ベスト",
            "game-chest02": "レベル2 ベスト",
            "game-chest03": "レベル3 ベスト",
            "game-helmet01": "レベル1 ヘルメット",
            "game-helmet02": "レベル2 ヘルメット",
            "game-helmet03": "レベル3 ヘルメット",
            "game-helmet03_forest": "シシガミのカブト",
            "game-helmet03_moon": "月読のカブト",
            "game-1xscope": "1x スコープ",
            "game-2xscope": "2x スコープ",
            "game-4xscope": "4x スコープ",
            "game-8xscope": "8x スコープ",
            "game-15xscope": "15x スコープ",
            "game-level-1": "レベル1",
            "game-level-2": "レベル2",
            "game-level-3": "レベル3",
            "game-level-4": "レベル4",
            "game-outfitBase": "Basic Outfit",
            "game-outfitRoyalFortune": "Royal Fortune",
            "game-outfitKeyLime": "Key Lime",
            "game-outfitCobaltShell": "Cobalt Shell",
            "game-outfitCarbonFiber": "Carbon Fiber",
            "game-outfitDarkGloves": "The Professional",
            "game-outfitGhillie": "Ghillie Suit",
            "game-outfitCamo": "Forest Camo",
            "game-outfitRed": "Target Practice",
            "game-outfitWhite": "Arctic Avenger",
            "game-outfitWoodland": "Woodland Combat",
            "game-outfitJester": "Jester's Folly",
            "game-fists": "拳",
            "game-ak47": "AK-47",
            "game-dp28": "DP-28",
            "game-mosin": "Mosin-Nagant",
            "game-m39": "M39 EMR",
            "game-mp5": "MP5",
            "game-mac10": "MAC-10",
            "game-ump9": "UMP9",
            "game-m870": "M870",
            "game-mp220": "MP220",
            "game-saiga": "Saiga-12",
            "game-m9": "M9",
            "game-m9_dual": "Dual M9",
            "game-hud-m9_dual": "M9",
            "game-glock": "G18C",
            "game-glock_dual": "Dual G18C",
            "game-hud-glock_dual": "G18C",
            "game-ot38": "OT-38",
            "game-ot38_dual": "Dual OT-38",
            "game-hud-ot38_dual": "OT-38",
            "game-famas": "FAMAS",
            "game-hk416": "M416",
            "game-mk12": "Mk 12 SPR",
            "game-m249": "M249",
            "game-frag": "手榴弾",
            "game-hud-frag": "手榴弾",
            "game-smoke": "スモークグレネード",
            "game-hud-smoke": "スモーク",
            "game-potato": "じゃが芋",
            "game-hud-potato": "じゃが芋",
            "game-potato_heavy": "じゃが芋",
            "game-katana": "刀",
            "game-katana_rusted": "刀錆びた",
            "game-hud-katana_rusted": "刀",
            "game-katana_orchid": "花の刀",
            "game-hud-katana_orchid": "刀",
            "game-naginata": "なぎなた",
            "game-hud-naginata": "なぎなた",
            "game-barrel_01": "バレル",
            "game-silo_01": "サイロ",
            "game-oven_01": "オーブン",
            "index-play-50v50": "Play 50v50",
            "index-50v50": "50v50",
            "game-red-team": "Red Team",
            "game-blue-team": "Blue Team",
            "game-red-leader": "Red Leader",
            "game-blue-leader": "Blue Leader",
            "game-is-down": "is down",
            "game-is-dead": "is dead",
            "game-promoted-to": "promoted to",
            "game-youve-been-promoted-to": "You've been promoted to",
            "game-perk-title-1": "Leadership",
            "game-perk-desc-1": "Max adrenaline.</br>Increased size.",
            "game-perk-title-2": "Firepower",
            "game-perk-desc-2": "High-capacity magazines.",
            "game-perk-title-3": "森林王",
            "game-perk-desc-3": "Increased size.",
            "game-perk-title-4": "Smoke Bomb",
            "game-perk-desc-4": "Throw a smoke bomb at your feet."
        };
        e.exports = i
    },
    e98400ad: function(e, t, a) {
        "use strict";

        function i(e) {
            this.config = e, this.config.addModifiedListener(this.onConfigModified.bind(this)), this.enabled = !1, this.wasEnabled = !1, this.zoom = n.scopeZoomRadius.desktop["1xscope"], this.loadNewMap = !1, this.mapSeed = 0, this.printLootStats = !1, this.setEnabled(!1)
        }
        var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                return typeof e
            } : function(e) {
                return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
            },
            o = a("8ee62bea"),
            n = (a("8b1dfb45"), a("989ad62a")),
            s = a("10899aea"),
            l = a("1901e2d9"),
            c = (a("c2a798c8"), a("ce29f17f"), a("af8ba00f"), a("4b8d140f"));
        i.prototype = {
            n: function() {},
            onConfigModified: function(e) {
                this.refreshUi()
            },
            setEnabled: function(e) {
                this.enabled = e, this.refreshUi()
            },
            newMap: function(e) {
                this.loadNewMap = !0, this.mapSeed = Math.max(e, 1)
            },
            refreshUi: function() {
                var e = this,
                    t = this.enabled;
                o("#ui-editor").css("display", t ? "block" : "none"), o("#ui-leaderboard-wrapper,#ui-right-center").css("display", t ? "none" : "block"), o("#gameAreaWrapper").css("cursor", t ? "default" : "crosshair"), this.uiPos = o("<div/>"), this.uiZoom = o("<div/>");
                var a = function(e, t) {
                    var a = o("<div/>", {
                        class: "btn-game-menu btn-darken",
                        css: {
                            height: "30px",
                            "line-height": "28px"
                        },
                        html: e
                    });
                    return a.on("click", function(e) {
                        e.stopPropagation(), t()
                    }), a
                };
                this.uiMapSeed = o("<div/>");
                var i = o("<div/>", {
                    css: {
                        display: "flex"
                    }
                });
                i.append(a("<", function() {
                    e.newMap(e.mapSeed - 1)
                })), i.append(o("<span/>", {
                    css: {
                        width: "12px"
                    }
                })), i.append(a(">", function() {
                    e.newMap(e.mapSeed + 1)
                })), i.append(o("<span/>", {
                    css: {
                        width: "12px"
                    }
                })), i.append(a("?", function() {
                    e.newMap(l.randomInt(1, 1 << 30))
                }));
                var n = o("<div/>", {
                    css: {
                        display: "flex"
                    }
                });
                n.append(a("Loot summary", function() {
                    e.printLootStats = !0
                }));
                var s = function(t, a) {
                        var i = o("<input/>", {
                            type: "checkbox",
                            value: "value",
                            checked: e.config.get(a)
                        });
                        return i.on("click", function(t) {
                            t.stopPropagation();
                            var r = i.prop("checked");
                            e.config.set(a, r)
                        }), i
                    },
                    c = this.config.get("debug"),
                    m = o("<div/>");
                m.append(function e(t, a) {
                    var i = o("<ul/>", {
                        class: "ui-editor-list"
                    });
                    1 == a.split(".").length && i.css("padding", "0px");
                    for (var n = Object.keys(t), l = 0; l < n.length; l++) {
                        var c = n[l],
                            m = t[c],
                            p = a + "." + c,
                            d = o("<li/>", {
                                class: "ui-editor-list"
                            });
                        if ("object" == (void 0 === m ? "undefined" : r(m))) d.html("" + c), d.append(e(m, p));
                        else if ("boolean" == typeof m) {
                            var h = s(0, p),
                                u = o("<div/>", {
                                    css: {
                                        display: "inline-block"
                                    },
                                    html: c
                                });
                            d.append(h), d.append(u)
                        }
                        i.append(d)
                    }
                    return i
                }(c, "debug"));
                var p = o("<div/>");
                p.append(o("<li/>").append(this.uiPos)), p.append(o("<li/>").append(this.uiZoom)), p.append(o("<li/>").append(o("<hr/>"))), p.append(o("<li/>").append(this.uiMapSeed)), p.append(o("<li/>").append(i)), p.append(o("<li/>").append(n)), p.append(o("<li/>").append(o("<hr/>"))), p.append(o("<li/>").append(m)), o("#ui-editor-info-list").html(p)
            },
            c: function(e, t, a, i) {
                t.ue(c.Key.Plus) && (this.zoom -= 8), t.ue(c.Key.Minus) && (this.zoom += 8), t.ue(c.Key.Zero) && (this.zoom = a.Bt()), this.zoom = s.clamp(this.zoom, .5, 400);
                var r = a.pos.x.toFixed(2),
                    o = a.pos.y.toFixed(2);
                this.uiPos.html("Pos:  " + r + ", " + o), this.uiZoom.html("Zoom: " + this.zoom), this.uiMapSeed.html("Map seed: " + i.seed), this.loadNewMap || (this.mapSeed = i.seed)
            },
            renderCamera: function(e) {},
            postSerialization: function() {
                this.loadNewMap = !1, this.printLootStats = !1
            }
        }, e.exports = i
    },
    edfa1d55: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r(e, t) {
            if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !t || "object" != typeof t && "function" != typeof t ? e : t
        }

        function o(e, t) {
            if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
            e.prototype = Object.create(t && t.prototype, {
                constructor: {
                    value: e,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t)
        }

        function n() {
            this.active = !1, this.retained = !0, this.sprite = new p, this.sprite.anchor.set(.5, .5), this.sprite.scale.set(1, 1), this.sprite.visible = !1, this.pos = m.create(0, 0), this.scale = 1, this.alpha = 1, this.visible = !0, this.pulse = !1, this.lifetime = 0, this.ticker = 0, this.zOrder = 0
        }

        function s() {
            this.container = new l.Container, this.mapSprites = []
        }
        var l = a("8b1dfb45"),
            c = a("10899aea"),
            m = a("c2a798c8"),
            p = function(e) {
                function t(e) {
                    i(this, t);
                    var a = r(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                    return a.__zOrder = -1, a
                }
                return o(t, e), t
            }(l.Sprite);
        n.prototype = {
            init: function() {
                this.active = !0, this.retained = !0, this.pos = m.create(0, 0), this.scale = 1, this.alpha = 1, this.pulse = !1, this.visible = !0, this.lifetime = Number.MAX_VALUE, this.ticker = 0, this.zOrder = 0
            },
            free: function() {
                this.active = !1, this.sprite.visible = !1
            },
            release: function() {
                this.retained = !1
            }
        }, s.prototype = {
            n: function() {
                for (var e = 0; e < this.mapSprites.length; e++) {
                    var t = this.mapSprites[e].sprite;
                    t.parent && t.parent.removeChild(t), t.destroy({
                        children: !0
                    })
                }
            },
            addSprite: function() {
                for (var e = null, t = 0; t < this.mapSprites.length; t++)
                    if (!this.mapSprites[t].active) {
                        e = this.mapSprites[t];
                        break
                    }
                return e || (e = new n, this.mapSprites.push(e), this.container.addChild(e.sprite)), e.init(), e
            },
            update: function(e, t, a) {
                for (var i = !1, r = 0; r < this.mapSprites.length; r++) {
                    var o = this.mapSprites[r];
                    if (o.active) {
                        o.zOrder != o.sprite.__zOrder && (o.sprite.__zOrder = o.zOrder, i = !0), o.ticker += e, o.pulse && (o.scale += e / 2.5);
                        var n = t.getMapPosFromWorldPos(o.pos, a),
                            s = o.scale,
                            l = c.smoothstep(o.ticker, 0, .1) * (1 - c.smoothstep(o.ticker, o.lifetime - .5, o.lifetime));
                        o.sprite.position.set(n.x, n.y), o.sprite.scale.set(s, s), o.sprite.alpha = o.alpha * l, o.sprite.visible = o.visible && o.sprite.alpha > 1e-4, o.ticker >= o.lifetime && !o.retained && o.free()
                    }
                }
                i && this.container.children.sort(function(e, t) {
                    return e.__zOrder - t.__zOrder
                })
            }
        }, e.exports = {
            MapSpriteBarn: s
        }
    },
    ef7c973f: function(e, t, a) {
        "use strict";
        var i = (a("989ad62a"), a("1901e2d9")),
            r = (a("c2a798c8"), a("d5ec3c16")),
            o = {
                desc: {
                    name: "Desert",
                    icon: "img/loot/loot-weapon-flare-gun.svg"
                },
                assets: {
                    audio: [{
                        name: "piano_02",
                        channel: "sfx"
                    }, {
                        name: "log_03",
                        channel: "sfx"
                    }, {
                        name: "log_04",
                        channel: "sfx"
                    }, {
                        name: "piano_music_01",
                        channel: "ambient"
                    }],
                    atlases: ["gradient", "shared", "desert"]
                },
                biome: {
                    colors: {
                        background: 6976835,
                        water: 9083726,
                        beach: 13206586,
                        riverbank: 11689508,
                        grass: 14657367,
                        underground: 4001027,
                        playerSubmerge: 5151631
                    },
                    particles: {
                        ripple: "desertRipple"
                    }
                },
                gameMode: {
                    maxPlayers: 80
                }
            };
        e.exports = i.mergeDeep({}, r, o)
    },
    f034d167: function(e, t, a) {
        "use strict";

        function i() {
            this.bullets = []
        }
        var r = a("8b1dfb45"),
            o = a("989ad62a"),
            n = (a("8649e148"), a("34e32c48"), a("6b42806d")),
            s = a("10899aea"),
            l = a("1901e2d9"),
            c = a("c2a798c8");
        a("ce29f17f"), a("af8ba00f"), i.prototype = {
            addFlare: function(e, t, a) {
                for (var i = null, n = 0; n < this.bullets.length; n++)
                    if (!this.bullets[n].alive && !this.bullets[n].collided) {
                        i = this.bullets[n];
                        break
                    }
                i || (i = {}, i.alive = !1, i.flareContainer = new r.Container, i.flareContainer.visible = !1, i.flare = r.Sprite.fromImage("part-flare-01.img"), i.flare.anchor.set(.5, .5), i.flareContainer.addChild(i.flare), i.trailContainer = new r.Container, i.trailContainer.visible = !1, i.trailContainer.pivot.set(14.5, 0), i.bulletTrail = r.Sprite.fromImage("player-bullet-trail-02.img"), i.bulletTrail.anchor.set(.5, .5), i.trailContainer.addChild(i.bulletTrail), this.bullets.push(i));
                var l = o.bullets[e.bulletType],
                    m = 1 + e.varianceT * l.variance,
                    p = s.remap(e.distAdjIdx, 0, 32, -1, 1),
                    d = l.distance / Math.pow(o.bullet.reflectDistDecay, e.reflectCount);
                i.alive = !0, i.isNew = !0, i.collided = !1, i.flareScale = .01, i.trailScale = 1, i.timeAlive = 0, i.maxTimeAlive = 2.5, i.startPos = c.copy(e.pos), i.pos = c.copy(e.pos), i.dir = c.copy(e.dir), i.layer = e.layer, i.speed = l.speed * m, i.distance = d * m + p;
                var h = Math.atan2(i.dir.x, i.dir.y);
                i.flareContainer.rotation = h - Math.PI / 2, i.trailContainer.rotation = h - Math.PI / 2, i.layer = e.layer;
                var u = t.ve(i.playerId);
                u && 2 & u.layer && (i.layer |= 2);
                var g = o.tracerColors[l.tracerColor],
                    y = g.regular;
                u && u.isOnBrightSurface && (y = g.saturated), i.bulletTrail.scale.set(.8, l.tracerWidth), i.tracerLength = l.tracerLength, i.bulletTrail.tint = y, i.tracerAlphaRate = g.alphaRate, i.tracerAlphaMin = g.alphaMin, i.bulletTrail.alpha = 1, i.flare.scale.set(1, 1), i.flare.tint = l.flareColor, i.flare.alpha = .8, i.maxFlareScale = l.maxFlareScale, i.smokeThrottle = 0, i.flareContainer.visible = !0, i.trailContainer.visible = !0
            },
            c: function(e, t, a, i, r, o, m, p) {
                for (var d = (t.Se.m(), 0); d < this.bullets.length; d++) {
                    var h = this.bullets[d];
                    if (h.collided && (h.flareScale = s.max(h.flareScale - .5 * e, 0), h.flare.alpha = s.max(h.flare.alpha - e, 0), h.trailScale = s.max(h.trailScale - 6 * e, 0), h.bulletTrail.alpha = s.max(h.bulletTrail.alpha - e, 0), h.pos = c.add(h.pos, c.mul(h.dir, e * h.speed)), h.flare.alpha <= 0 && (h.collided = !1, h.flareContainer.visible = !1, h.trailContainer.visible = !1)), h.alive) {
                        if (h.tracerAlphaRate) {
                            var u = (r.__id, h.playerId, r.__id == h.playerId ? h.tracerAlphaRate : .9 * h.tracerAlphaRate);
                            h.bulletTrail.alpha = s.max(h.tracerAlphaMin, h.bulletTrail.alpha * u)
                        }
                        h.timeAlive += e, h.flareScale = s.easeOutExpo(h.timeAlive / h.maxTimeAlive) * h.maxFlareScale, h.smokeThrottle <= 0 ? h.smokeThrottle = .05 : h.smokeThrottle -= e;
                        var g = h.distance - c.length(c.sub(h.startPos, h.pos)),
                            y = s.min(g, e * h.speed);
                        c.copy(h.pos), h.pos = c.add(h.pos, c.mul(h.dir, y)), s.eqAbs(g, y) && (h.collided = !0, h.alive = !1);
                        var w = 0;
                        !(l.sameLayer(w, r.layer) || 2 & r.layer) || 2 & r.layer && a.insideStructureMask(n.createCircle(h.pos, 1)) || (w |= 2), o.addPIXIObj(h.trailContainer, w, 1e3, 0), o.addPIXIObj(h.flareContainer, w, 1e3, 1), h.isNew = !1
                    }
                }
            },
            render: function(e) {
                for (var t = (e.pixels(1), 0); t < this.bullets.length; t++) {
                    var a = this.bullets[t];
                    if (a.alive || a.collided) {
                        var i = e.pointToScreen(a.pos);
                        a.flareContainer.position.set(i.x, i.y);
                        var r = e.pixels(1);
                        a.flareContainer.scale.set(r * a.flareScale, r * a.flareScale);
                        var o = c.length(c.sub(a.pos, a.startPos));
                        a.trailContainer.position.set(i.x, i.y);
                        var n = s.min(15 * a.tracerLength, o / 2);
                        a.trailContainer.scale.set(r * n * a.trailScale, r)
                    }
                }
            }
        }, e.exports = {
            rt: i
        }
    },
    f2372804: function(e, t, a) {
        "use strict";
        var i = {
            "@metadata": {
                "last-updated": "2018-01-28",
                locale: "ru"
            },
            "word-order": "svo",
            "index-slogan": "Королевская Битва в 2D",
            "index-region": "Регион",
            "index-north-america": "Северная Америка",
            "index-europe": "Европа",
            "index-asia": "Азия",
            "index-south-america": "Южная Америка",
            "index-korea": "Южная Корея",
            "index-players": "игроков",
            "index-play-solo": "Играть Соло",
            "index-play-duo": "Играть в Дуэте",
            "index-play-squad": "Играть в Отряд",
            "index-join-team": "Войти в команду",
            "index-create-team": "Создать Команду",
            "index-how-to-play": "Как играть",
            "index-leave-team": "Покинуть Команду",
            "index-joining-team": "Присоединение к Команде",
            "index-creating-team": "Создание Команды",
            "index-invite-link": "Ссылка-приглашение",
            "index-invite-code": "Код приглашения",
            "index-join-team-help": "Есть ссылка на команду или код? Напиши его сюда:",
            "index-solo": "Соло",
            "index-duo": "Дуэт",
            "index-squad": "Отряд",
            "index-auto-fill": "Автозаполнение",
            "index-no-fill": "Не заполнять",
            "index-waiting-for-leader": "Ожидание лидера, чтобы начать игру",
            "index-play": "Играть",
            "index-customize-loadout": "Настраиваемые эмоции",
            "index-twitter-follow": "Следовать в Twitter",
            "index-youtube-subscribe": "Подписаться на YouTube",
            "index-facebook-like": "Лайкнуть в Facebook",
            "index-featured-youtuber": "Рекомендуемые Ютуберы",
            "index-streaming-live": "Сейчас стримят!",
            "index-settings": "Настройки",
            "index-high-resolution": "Высокое разрешение (проверьте, чтобы увеличить качество изображения)",
            "index-screen-shake": "Дрожание экрана",
            "index-master-volume": "Уровень Громкости",
            "index-sfx-volume": " Громкость Эффектов",
            "index-music-volume": "Громкость Музыки",
            "index-mobile-announce": "Теперь доступно на ваших телефонах!",
            "index-mobile-tooltip": "Вы можете зайти в surviv.io на своём телефоне, играйте в <span>surviv.io</span> в любом месте!",
            "index-version": "версия",
            "index-privacy": "Конфиденциальность",
            "index-attributions": "атрибуции",
            "index-proxy-sites": "прокси сайты",
            "index-team-is-full": "Команда заполнена!",
            "index-failed-joining-team": "Не удалось присоединиться к команде.",
            "index-failed-creating-team": "Не удалось создать команду.",
            "index-failed-finding-game": "Не удалось найти игру.",
            "index-failed-joining-game": "Не удалось присоединиться к игре.",
            "index-lost-connection": "Соединение с командой прервалось.",
            "index-host-closed": "Соединение с сервером закрыто.",
            "index-view-more": "Посмотреть ещё",
            "index-back-to-main": "Вернуться в главное меню",
            "index-most-kills": "Наибольшее кол-во убийств",
            "index-total-kills": "Всего убийств",
            "index-total-wins": "Всего побед",
            "index-top-5-percent": "Процент Топ 5",
            "index-kill-death-ratio": "Соотношение убийство-смерть",
            "index-for": "За",
            "index-today": "Сегодня",
            "index-this-week": "Эту неделю",
            "index-all-time": "Всё время",
            "index-top-100": "TOP 100",
            "index-rank": "Ранг",
            "index-player": "Игрок",
            "index-total-games": "Всего игр",
            "index-controls": "Управление",
            "index-movement": "Перемещение",
            "index-movement-ctrl": "W, A, S, D",
            "index-aim": "Целиться",
            "index-aim-ctrl": "Мышь",
            "index-punch": "Ударить",
            "index-shoot": "Выстрелить",
            "index-shoot-ctrl": "Левый Щелчок",
            "index-change-weapons": "Сменить Оружие",
            "index-change-weapons-ctrl": "1-4 или Колесо Прокрутки",
            "index-stow-weapons": "Убрать оружие из рук",
            "index-stow-weapons-ctrl": "3 или Е",
            "index-swap-weapons": "Смена на Предыдущее Оружие",
            "index-swap-weapons-ctrl": "Q",
            "index-reload": "Перезарядка",
            "index-reload-ctrl": "R",
            "index-scope-zoom": "Смена прицела",
            "index-scope-zoom-ctrl": "Левый щелчок на Прицел",
            "index-pickup": "Подобрать добычу",
            "index-loot": "Добычу",
            "index-revive": "оживление",
            "index-pickup-ctrl": "F",
            "index-use-medical": "Медицинский Предмет change on Медикамент",
            "index-use-medical-ctrl": "Левый Щелчок на Предмет или цифры от 0-7",
            "index-drop-item": "Выкинуть предмет",
            "index-drop-item-ctrl": "Правый Щелчок на Предмет",
            "index-cancel-action": "Отменить действие",
            "index-cancel-action-ctrl": "X",
            "index-view-map": "Посмотреть Карту",
            "index-view-map-ctrl": "M или G",
            "index-toggle-minimap": "Переключить режим просмотра",
            "index-toggle-minimap-ctrl": "V",
            "index-use-ping": "Использование команд",
            "index-use-ping-ctrl": "Удерживая C зажать Правую кнопку мыши и водить мышкой, затем выбрав команду отпустить",
            "index-use-emote": "Использование Эмодзи",
            "index-use-emote-ctrl": "Зажать Правую кнопку мыши и водить мышкой, затем отпустить Правую кнопку мыши",
            "index-tips-1-desc": "Цель surviv.io - остаться последним выжившим. В одном раунде у вас только одна жизнь и нет возможности возродиться.",
            "index-tips-2": "PUBG в 2D",
            "index-tips-2-desc": "Если вы играли в другие игры жанра Королевской Битвы (такие как PUBG, Fortnite или H1Z1), то вы уже знаете правила. По сути, surviv.io - это двумерный PUBG (только меньше лагает).",
            "index-tips-3": "Убивай и добывай",
            "index-tips-3-desc": "Вы начнете игру без каких-либо предметов или оружия, у вас есть только простой рюкзак. Передвигайтесь по карте, чтобы найти полезные вещи: оружие, боеприпасы, прицелы и медикаменты. Убивайте других игроков и забирайте себе их вещи!",
            "index-tips-4": "Красный - опасный!",
            "index-tips-4-desc": "Другие игроки - это не единственное, что может вас ранить. По ходу игры Красная Зона будет надвигаться с краёв карты и наносить всё больше урона, если вы окажетесь в ней. Так что посматривайте на карту и будьте осторожны!",
            "game-alive": "В живых",
            "game-reloading": "Перезарядка",
            "game-using": "Использование",
            "game-reviving": "Возрождение",
            "game-revive-teammate": "Возродить Союзника",
            "game-equip": "Взять",
            "game-cancel": "Отмена",
            "game-open-door": "Открыть дверь",
            "game-close-door": "Закрыть дверь",
            "game-You": "Вы",
            "game-you": "вы",
            "game-themselves": "себя",
            "game-yourself": "себя",
            "game-you-died": "умерли",
            "game-player-died": "Умер",
            "game-with": "с помощью",
            "game-knocked-out": "Нокаутировал",
            "game-killed": "убили",
            "game-finally-killed": "наконец убили",
            "game-finally-bled-out": "наконец умер",
            "game-died-outside": "умер за пределами безопасной зоны",
            "game-the-red-zone": "Красная зона",
            "game-waiting-for-players": "Ожидание игроков",
            "game-spectating": "Наблюдение за",
            "game-red-zone-advances": "Красная зона наступит через",
            "game-red-zone-advancing": "Красная зона наступает, доберитесь до безопасной зоны!",
            "game-seconds": "секунды",
            "game-minutes": "минуты",
            "game-minute": "минута",
            "game-m": "м",
            "game-s": "с",
            "game-not-enough-space": "Недостаточно места!",
            "game-item-already-owned": "Этот предмет уже есть!",
            "game-item-already-equipped": "Этот предмет уже экипирован!",
            "game-better-item-equipped": "Предмет получше уже есть!",
            "game-play-new-game": "Начать Новую Игру",
            "game-spectate": "Наблюдать",
            "game-full-screen": "Полный экран",
            "game-sound": "Звук",
            "game-quit-game": "Выйти из Игры",
            "game-return-to-game": "Вернуться в Игру",
            "game-hide-match-stats": "Скрыть Статистику Матча",
            "game-view-match-stats": "Посмотреть Статистику Матча",
            "game-previous-teammate": "Предыдущий Напарник",
            "game-next-teammate": "Следующий Напарник",
            "game-spectate-previous": "",
            "game-spectate-next": "",
            "game-leave-game": "Покинуть Игру",
            "game-your-results": "Твои Результаты",
            "game-chicken": "Победа, победа после обеда!",
            "game-won-the-game": "выиграл игру.",
            "game-team-eliminated": "Ваша команда потерпела поражение.",
            "game-rank": "Ранг",
            "game-team-rank": "Ранг команды",
            "game-team-kills": "Командных убийств",
            "game-kill": "Убийство",
            "game-kills": "Убийства",
            "game-damage-dealt": "Нанесённый Урон",
            "game-damage-taken": "Полученный Урон",
            "game-survived": "Выжил",
            "game-backpack00": "Патронташ",
            "game-backpack01": "Маленький Рюкзак",
            "game-backpack02": "Обычный Рюкзак",
            "game-backpack03": "Военный Рюкзак",
            "game-bandage": "Бинт",
            "game-bandage-tooltip": "Левый Щелчок, чтобы восстановить 15 здоровья.",
            "game-healing-tooltip": "Не востанавливает больше 75 здоровья.",
            "game-healthkit": "Аптечка",
            "game-healthkit-tooltip": "Левый Щелчок, чтобы восстановить 100 здоровья.",
            "game-soda": "Сода",
            "game-soda-tooltip": "Левый Щелчок, чтобы увеличить адреналин на 25.",
            "game-adrenaline-tooltip": "Адреналин со временем восстанавливает здоровье.",
            "game-painkiller": "Таблетки",
            "game-painkiller-tooltip": "Левый Щелчок, чтобы увеличить адреналин на 50.",
            "game-9mm": "9мм",
            "game-9mm-tooltip": "Патроны для M9, G18C, MP5, MAC-10, CZ-3A1, UMP9 и Vector.",
            "game-12gauge": "12 калибр",
            "game-12gauge-tooltip": "Патроны для M870, M1100, SPAS-12, Сайга-12 и MP220.",
            "game-762mm": "7.62мм",
            "game-762mm-tooltip": "Патроны для AK-47, SCAR-H, M39, Винтовка Мосина, SV-98, M1, OT-38 и DP-28.",
            "game-556mm": "5.56мм",
            "game-556mm-tooltip": "Патроны для FAMAS, M416, QBB-97, Mk 12 и M249.",
            "game-50AE": ".50 AE",
            "game-50AE-tooltip": "Патроны для DEagle 50.",
            "game-308sub": ".308 Subsonic",
            "game-308sub-tooltip": "Патроны для AWM-S.",
            "game-flare": "Flare",
            "game-flare-tooltip": "Патроны для Flare Gun.",
            "game-45acp": ".45 ACP",
            "game-45acp-tooltip": "Патроны M1911, M1A1, Model 94 для Peacemaker.",
            "game-chest01": "Жилет 1-ого уровня",
            "game-chest02": "Жилет 2-ого уровня",
            "game-chest03": "Жилет 3-ого уровня",
            "game-helmet01": "Шлем 1-ого уровня",
            "game-helmet02": "Шлем 2-ого уровня",
            "game-helmet03": "Шлем 3-ого уровня",
            "game-1xscope": "1x Прицел",
            "game-2xscope": "2x Прицел",
            "game-4xscope": "4x Прицел",
            "game-8xscope": "8x Прицел",
            "game-15xscope": "15x Прицел",
            "game-level-1": "1-й Ур.",
            "game-level-2": "2-й Ур.",
            "game-level-3": "3-й Ур.",
            "game-level-4": "4-й Ур.",
            "game-outfitBase": "Базовая Экипировка",
            "game-outfitRoyalFortune": "Королевская удача",
            "game-outfitKeyLime": "Лаймовый оттенок",
            "game-outfitCobaltShell": "Кобальтовая Оболочка",
            "game-outfitCarbonFiber": "Углеродное волокно",
            "game-outfitDarkGloves": "Профессионал",
            "game-outfitGhillie": "Маскировочный костюм",
            "game-outfitCamo": "Лесной камуфляж",
            "game-outfitRed": "Мишень",
            "game-outfitWhite": "Арктический Мститель",
            "game-outfitWoodland": "Боевой камуфляж",
            "game-outfitJester": "Шутовской Наряд",
            "game-outfitPrisoner": "Новый Чёрный",
            "game-outfitCasanova": "Сатиновая куртка",
            "game-outfitKhaki": "Положивший Начало",
            "game-fists": "удар",
            "game-woodaxe": "Топор",
            "game-woodaxe_bloody": "Окровавленный топор",
            "game-hud-woodaxe_bloody": "Топор",
            "game-katana": "Катана",
            "game-katana_rusted": "Ржавая катана",
            "game-hud-katana_rusted": "Катана",
            "game-katana_orchid": "Катана орхидея",
            "game-hud-katana_orchid": "Катана",
            "game-stonehammer": "Каменный молот",
            "game-hook": "Крюк",
            "game-pan": "Сковорода",
            "game-ak47": "AK-47",
            "game-dp28": "ДП-28",
            "game-mosin": "Винтовка Мосина",
            "game-m39": "M39 EMR",
            "game-mp5": "MP5",
            "game-mac10": "MAC-10",
            "game-ump9": "UMP9",
            "game-m870": "M870",
            "game-mp220": "MP220",
            "game-saiga": "Сайга-12",
            "game-m9": "M9",
            "game-glock": "G18C",
            "game-ot38": "ОЦ-38",
            "game-flare_gun": "Сигнальная ракетница",
            "game-flare_gun_dual": "Сигнальная ракетница",
            "game-hud-flare_gun_dual": "Сигнальная ракетница",
            "game-frag": "Осколочная Граната",
            "game-hud-frag": "Осколочная",
            "game-smoke": "Дымовая Граната",
            "game-hud-smoke": "Дымовая",
            "game-potato": "Картофель",
            "game-hud-potato": "Картофель",
            "game-potato_heavy": "Картофель",
            "game-barrel_01": "взрывом бочки",
            "game-silo_01": "a silo",
            "index-play-50v50": "Играть в 50v50",
            "index-50v50": "50v50",
            "game-red-team": "Красная команда",
            "game-blue-team": "Синяя команда",
            "game-red-leader": "расного лидера",
            "game-blue-leader": "синего лидера",
            "game-lieutenant": "лейтенанта",
            "game-is-down": "is down",
            "game-is-dead": "is dead",
            "game-promoted-to": "повышен до",
            "game-youve-been-promoted-to": "Вы были повышены до"
        };
        e.exports = i
    },
    f398b7c7: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r() {
            function e() {
                return Math.floor(Math.random() * Math.pow(2, 32)).toString(16)
            }
            return e() + e()
        }
        var o = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            n = a("8ee62bea"),
            s = function() {
                function e() {
                    i(this, e), this.instanceId = r(), this.requests = 0, this.enabled = !0, this.throttle = !1, this.throttleTimeout = 0, this.errorLogCount = 0, this.appErrorLogCount = 0
                }
                return o(e, [{
                    key: "update",
                    value: function() {
                        var e = (new Date).getTime();
                        this.throttle ? e > this.throttleTimeout && (this.throttle = !1, this.requests = 0) : this.requests = Math.max(this.requests - 1, 0)
                    }
                }, {
                    key: "sample",
                    value: function() {
                        return Math.random() <= .01
                    }
                }, {
                    key: "store",
                    value: function(e, t) {
                        if (this.enabled) {
                            if (++this.requests > 5) return this.throttleTimeout = (new Date).getTime() + 18e4, void(this.throttle = !0);
                            var a = "https://us-central1-surviv-fa40f.cloudfunctions.net/" + e;
                            t.key = "AIzaSyCrPuZeAQ2-aXZdTwZNwQJdv4rvsTE-2i8", n.ajax({
                                type: "POST",
                                dataType: "html",
                                url: a,
                                data: t,
                                timeout: 1e4
                            })
                        }
                    }
                }, {
                    key: "storeGeneric",
                    value: function(e, t) {
                        this.sample() && this.store("storeGeneric", {
                            parent: e,
                            child: t
                        })
                    }
                }, {
                    key: "logWindowOnError",
                    value: function(e) {
                        this.errorLogCount < 2 && (this.store("windowOnError", {
                            error: e
                        }), this.errorLogCount++)
                    }
                }, {
                    key: "logWindowOnAppError",
                    value: function(e) {
                        this.appErrorLogCount < 2 && (this.store("windowOnAppError", {
                            error: e
                        }), this.appErrorLogCount++)
                    }
                }, {
                    key: "logError",
                    value: function(e) {
                        this.store("errorLog", {
                            error: e
                        })
                    }
                }, {
                    key: "logTest",
                    value: function(e) {
                        this.store("testLog", {
                            error: e
                        })
                    }
                }, {
                    key: "logProxy",
                    value: function(e) {
                        this.store("onProxy", {
                            data: e
                        })
                    }
                }]), e
            }(),
            l = new s;
        setInterval(function() {
            l.update()
        }, 1e3), e.exports = l
    },
    f4ccd911: function(e, t, a) {
        "use strict";

        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }

        function r(e) {
            try {
                return e.createGain().disconnect(e.destination), !1
            } catch (e) {
                return !0
            }
        }
        var o = function() {
                function e(e, t) {
                    for (var a = 0; a < t.length; a++) {
                        var i = t[a];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
                    }
                }
                return function(t, a, i) {
                    return a && e(t.prototype, a), i && e(t, i), t
                }
            }(),
            n = window.navigator.userAgent.indexOf("iPod") > -1 || window.navigator.userAgent.indexOf("iPhone") > -1 || window.navigator.userAgent.indexOf("iPad") > -1,
            s = null,
            l = !1,
            c = 128,
            m = function() {
                function e(t) {
                    i(this, e), this.ctx = t, this.sound = null, this.id = 0, this.volume = 1, this.volumeOld = this.volume, this.pan = 0, this.panOld = this.pan, this.sourceNode = null, this.gainNode = this.ctx.createGain(), this.pannerNode = this.ctx.createPanner(), this.pannerNode.panningModel = "equalpower", this.gainNode.connect(this.pannerNode), this.destination = null, this.paramEvents = 0, this.stopTime = 0, this.stopping = !1, this.playState = "playFinished"
                }
                return o(e, [{
                    key: "setGain",
                    value: function(e) {
                        this.stopping || (n ? this.gainNode.gain.value = e : (this.gainNode.gain.setTargetAtTime(e, this.ctx.currentTime, .02), ++this.paramEvents))
                    }
                }, {
                    key: "setPan",
                    value: function(e) {
                        this.stopping || (this.pannerNode.setPosition(e, 0, -.5), this.paramEvents += 3)
                    }
                }, {
                    key: "start",
                    value: function(e, t, a, i, r, o, s, l) {
                        this.volume = this.volumeOld = a, this.pan = this.panOld = i, this.ambient = l, this.stopping = !1, this.destination = e, this.sourceNode = this.ctx.createBufferSource(), this.sourceNode.buffer = t, this.sourceNode.connect(this.gainNode), this.pannerNode.connect(this.destination), this.sourceNode.loop = r, n ? this.gainNode.gain.value = a : (this.gainNode.gain.setValueAtTime(a, this.ctx.currentTime), ++this.paramEvents), this.setPan(i), this.sourceNode.start(this.ctx.currentTime + o, s), this.stopTime = r ? 1e100 : this.ctx.currentTime + o + t.duration - s, this.playState = "playSucceeded"
                    }
                }, {
                    key: "stop",
                    value: function() {
                        this.stopping || (this.setGain(0), this.stopTime = this.ctx.currentTime + .1, this.stopping = !0, this.playState = "playInterrupted")
                    }
                }, {
                    key: "disconnect",
                    value: function() {
                        if (this.sound.instances.splice(this.sound.instances.indexOf(this), 1), this.sound = null, this.sourceNode.stop(0), this.sourceNode.disconnect(this.gainNode), this.pannerNode.disconnect(this.destination), n) try {
                            this.sourceNode.buffer = s
                        } catch (e) {}
                        this.destination = null, this.sourceNode = null, this.playState = "playFinished"
                    }
                }, {
                    key: "reallocNodes",
                    value: function() {
                        this.gainNode.disconnect(this.pannerNode), this.gainNode = this.ctx.createGain(), this.pannerNode = this.ctx.createPanner(), this.pannerNode.panningModel = "equalpower", this.gainNode.connect(this.pannerNode), this.paramEvents = 0
                    }
                }]), e
            }(),
            p = null,
            d = function() {
                function e(t) {
                    i(this, e), this.instance = t, this.id = t.id
                }
                return o(e, [{
                    key: "check",
                    value: function(e) {
                        this.id != this.instance.id && (this.instance = p, this.id = p.id)
                    }
                }, {
                    key: "stop",
                    value: function() {
                        this.check(), this.instance.stop()
                    }
                }, {
                    key: "volume",
                    get: function() {
                        return this.check(), this.instance.volume
                    },
                    set: function(e) {
                        this.check(!0), this.instance.volume = e
                    }
                }, {
                    key: "pan",
                    get: function() {
                        return this.check(), this.instance.pan
                    },
                    set: function(e) {
                        this.check(!0), this.instance.pan = e
                    }
                }, {
                    key: "playState",
                    get: function() {
                        return this.check(), this.instance.playState
                    }
                }]), e
            }(),
            h = null,
            u = function() {
                function e(t, a, r, o, n) {
                    if (i(this, e), this.ctx = t, this.inNode = a, this.outNode = r, this.name = o, this.volume = void 0 != n.volume ? n.volume : 1, this.echoVolume = n.echoVolume || 0, this.echoDelay = n.echoDelay || 0, this.echoLowPass = n.echoLowPass || 3e3, this.stereoSpread = n.stereoSpread || 0, !l) {
                        var s = this.ctx.createGain();
                        this.inNode.connect(s), this.inNode = s
                    }
                    this.gainNode = null, this.convolverNode = null, this.echoGainNode = null, this.echoLowPassNode = null, this.echoDelayNode = null, this.stereoDelayNode = null, this.mergerNode = null, this.convolverNode = this.ctx.createConvolver(), this.echoVolume && (this.echoLowPassNode = this.ctx.createBiquadFilter(), this.echoLowPassNode.type = "lowpass", this.echoLowPassNode.frequency.setValueAtTime(this.echoLowPass, 0), this.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0), this.echoDelayNode = this.ctx.createDelay(this.echoDelay || .01), this.echoDelayNode.delayTime.setValueAtTime(this.echoDelay, 0)), this.stereoSpread && (this.stereoDelayNode = this.ctx.createDelay(this.stereoSpread), this.stereoDelayNode.delayTime.setValueAtTime(this.stereoSpread, 0), this.mergerNode = this.ctx.createChannelMerger(2)), this.targetLevel = 0, this.gain = 0, this.drainEndTime = 0, this.active = !1
                }
                return o(e, [{
                    key: "isConnected",
                    value: function() {
                        return null != this.gainNode
                    }
                }, {
                    key: "connect",
                    value: function() {
                        if (this.gainNode = this.ctx.createGain(), this.gainNode.channelCount = 1, this.gainNode.channelCountMode = "explicit", this.gainNode.gain.setValueAtTime(0, 0), this.echoVolume && (this.echoGainNode = this.ctx.createGain(), this.echoGainNode.channelCount = 1, this.echoGainNode.channelCountMode = "explicit", this.echoGainNode.gain.setValueAtTime(this.echoVolume, 0)), this.inNode.connect(this.gainNode), this.gainNode.connect(this.convolverNode), this.echoVolume && (this.convolverNode.connect(this.echoGainNode), this.echoGainNode.connect(this.echoLowPassNode), this.echoLowPassNode.connect(this.echoDelayNode), this.echoDelayNode.connect(this.convolverNode)), this.stereoSpread) {
                            var e = this.convolverNode.buffer;
                            e && 1 != e.numberOfChannels && console.error("stereoSpread can only be applied to mono IRs"), this.convolverNode.connect(this.stereoDelayNode), this.convolverNode.connect(this.mergerNode, 0, 0), this.stereoDelayNode.connect(this.mergerNode, 0, 1), this.mergerNode.connect(this.outNode)
                        } else this.convolverNode.connect(this.outNode)
                    }
                }, {
                    key: "disconnect",
                    value: function() {
                        this.inNode.disconnect(this.gainNode), this.gainNode.disconnect(this.convolverNode), this.echoVolume && (this.convolverNode.disconnect(this.echoGainNode), this.echoGainNode.disconnect(this.echoLowPassNode), this.echoLowPassNode.disconnect(this.echoDelayNode), this.echoDelayNode.disconnect(this.convolverNode)), this.stereoSpread ? (this.convolverNode.disconnect(this.stereoDelayNode), this.convolverNode.disconnect(this.mergerNode, 0, 0), this.stereoDelayNode.disconnect(this.mergerNode, 0, 1), this.mergerNode.disconnect(this.outNode)) : this.convolverNode.disconnect(this.outNode), this.gainNode = null, this.echoGainNode = null
                    }
                }, {
                    key: "setGain",
                    value: function(e, t, a) {
                        if (e *= this.volume, this.gain != e) {
                            if (0 == e || this.gainNode || this.connect(), 0 == e) {
                                this.echoGainNode && this.echoGainNode.gain.setValueAtTime(0, a);
                                var i = this.convolverNode.buffer,
                                    r = i ? i.duration : 0;
                                this.drainEndTime = a + r + this.echoDelay + this.stereoSpread
                            }
                            0 == this.gain && this.echoGainNode && this.echoGainNode.gain.setValueAtTime(this.echoVolume, t), this.gainNode.gain.setValueAtTime(this.gain, t), this.gainNode.gain.linearRampToValueAtTime(e, a), this.gain = e
                        }
                    }
                }]), e
            }(),
            g = function() {
                function e() {
                    var t = this;
                    if (i(this, e), this.ctx = new(window.AudioContext || window.webkitAudioContext), n) {
                        var a = this.ctx.createBuffer(1, 1, 44100),
                            o = this.ctx.createBufferSource();
                        o.buffer = a, o.connect(this.ctx.destination), o.start(), o.disconnect(this.ctx.destination), this.ctx.close(), this.ctx = new(window.AudioContext || window.webkitAudioContext)
                    }
                    l = r(this.ctx), window.audioEngine = this, this.masterGainNode = this.ctx.createGain(), this.compressorNode = this.ctx.createDynamicsCompressor(), this.masterGainNode.connect(this.compressorNode), this.compressorNode.connect(this.ctx.destination), this.reverbNode = this.ctx.createGain(), this.reverbNode.connect(this.masterGainNode), this.muffleNode = this.ctx.createGain(), this.muffleNode.gain.setValueAtTime(16, 0);
                    for (var u = [
                            [20, 1.4142, -6],
                            [40, 1.4142, -7],
                            [80, 1.4142, -10],
                            [160, 1.4142, -13],
                            [320, 1.4142, -22],
                            [640, 1.4142, -18],
                            [1280, 1.4142, -25],
                            [2560, 1.4142, -10],
                            [5120, 1.4142, -30],
                            [10240, 1.4142, -25]
                        ], g = this.muffleNode, y = 0; y < u.length; y++) {
                        var w = this.ctx.createBiquadFilter();
                        g.connect(w), g = w, w.type = "peaking", w.frequency.setValueAtTime(u[y][0], 0), w.Q.setValueAtTime(u[y][1], 0), w.gain.setValueAtTime(u[y][2], 0)
                    }
                    g.connect(this.reverbNode), this.files = {}, this.sounds = {}, this.instances = [];
                    for (var x = 0; x < c; x++) {
                        var f = new m(this.ctx);
                        this.instances[x] = f
                    }
                    if (this.instanceId = 0, this.playingInstances = [], p = new m(this.ctx), h = new d(p), this.reverbs = {}, this.activeReverbs = [], this.reverbFadeEndTime = 0, this.volume = 1, this.volumeOld = this.volume, this.muted = !1, this.mutedOld = this.muted, "suspended" == this.ctx.state) {
                        var b = function e() {
                            t.ctx.resume();
                            var a = t.ctx.createBufferSource();
                            a.buffer = t.ctx.createBuffer(1, 1, 22050), a.connect(t.ctx.destination), a.start(), setTimeout(function() {
                                "running" == t.ctx.state && (document.body.removeEventListener("mousedown", e, !1), document.body.removeEventListener("touchend", e, !1))
                            }, 0)
                        };
                        document.body.addEventListener("mousedown", b, !1), document.body.addEventListener("touchend", b, !1)
                    }
                    n && (s = this.ctx.createBuffer(1, 1, 22050)), this.onfileload = function() {}, this.PLAY_INITED = "playInited", this.PLAY_SUCCEEDED = "playSucceeded", this.PLAY_INTERRUPTED = "playInterrupted", this.PLAY_FINISHED = "playFinished", this.PLAY_FAILED = "playFailed"
                }
                return o(e, [{
                    key: "loadFile",
                    value: function(e, t) {
                        var a = this;
                        if (void 0 != this.files[e]) return t(e), this.files[e];
                        this.files[e] = {
                            buffer: null
                        };
                        var i = new XMLHttpRequest;
                        i.open("GET", e), i.responseType = "arraybuffer";
                        var r = function(t) {
                            console.error("Failed loading sound file: " + e)
                        };
                        return i.addEventListener("load", function(o) {
                            var n = i.response;
                            if (!n) return void r();
                            a.ctx.decodeAudioData(n, function(i) {
                                a.files[e].buffer = i, t(e)
                            }, function() {
                                console.error("Failed decoding sound: " + e)
                            })
                        }), i.addEventListener("abort", r), i.addEventListener("error", r), i.addEventListener("timeout", r), i.send(), this.files[e]
                    }
                }, {
                    key: "registerSound",
                    value: function(e, t, a) {
                        var i = this.loadFile(e, this.onfileload.bind(this)),
                            r = {
                                file: i,
                                canCoalesce: !!a.canCoalesce,
                                maxInstances: a.channels || 16,
                                volume: a.volume || 1,
                                instances: []
                            };
                        this.sounds[t] = r
                    }
                }, {
                    key: "play",
                    value: function(e, t) {
                        var a = this.sounds[e];
                        if (!a) return console.error("No sound named: " + e), h;
                        var i = t.filter || "none",
                            r = void 0 != t.volume ? t.volume : 1;
                        r *= a.volume, r = this.muted ? 0 : r;
                        var o = t.pan || 0,
                            n = !!t.loop,
                            s = t.delay ? .001 * t.delay : 0,
                            l = t.offset ? t.offset : 0,
                            m = t.ambient || !1;
                        if (!a.file.buffer) return h;
                        if (this.muted && !t.loop) return h;
                        if ("none" !== i && "reverb" !== i && "muffled" !== i) return console.error("Invalid filter: " + i + ". Only valid filters are 'none', 'reverb' and 'muffled'."), h;
                        if (a.canCoalesce)
                            for (var p = this.ctx.currentTime + a.file.buffer.duration, u = 0; u < a.instances.length; u++) {
                                var g = a.instances[u];
                                if (!(Math.abs(p - g.stopTime) > .03)) {
                                    var y = g.volume * g.volume + r * r,
                                        w = g.volume * g.pan + r * o,
                                        x = g.volume + r;
                                    return g.volume = Math.sqrt(y), g.pan = w / Math.max(.001, x), h
                                }
                            }
                        for (var f = 0; f < c && (++this.instanceId, this.instances[this.instanceId % c].sound); f++);
                        var b = this.instances[this.instanceId % c];
                        if (b.sound) return console.error("All " + c + " sound instances in use. You are using way too many sounds!"), h;
                        b.id = this.instanceId;
                        var _ = b.paramEvents > 150,
                            S = b.paramEvents > 20 && !(this.instanceId % 7);
                        for ((_ || S) && b.reallocNodes(); a.instances.length >= a.maxInstances;) {
                            for (var k = a.instances[0], v = 1; v < a.instances.length; v++) k.stopTime > a.instances[v].stopTime && (k = a.instances[v]);
                            k.disconnect()
                        }
                        b.sound = a, a.instances.push(b);
                        var z = "none" === i ? this.masterGainNode : "reverb" === i ? this.reverbNode : this.muffleNode;
                        return b.start(z, a.file.buffer, r, o, n, s, l, m), -1 == this.playingInstances.indexOf(b) && this.playingInstances.push(b), new d(b)
                    }
                }, {
                    key: "registerReverb",
                    value: function(e, t, a) {
                        var i = this,
                            r = new u(this.ctx, this.reverbNode, this.masterGainNode, t, a);
                        this.loadFile(e, function(e) {
                            r.convolverNode.buffer = i.files[e].buffer, i.onfileload(e)
                        }), this.reverbs[t] = r
                    }
                }, {
                    key: "setReverbs",
                    value: function(e) {
                        for (var t = 0; t < this.activeReverbs.length; t++) {
                            var a = this.activeReverbs[t];
                            e[a.name] || (a.targetLevel = 0)
                        }
                        for (var i in e)
                            if (e[i]) {
                                var r = this.reverbs[i];
                                r ? (this.reverbs[i].active || (this.activeReverbs.push(r), r.active = !0), r.targetLevel = e[i]) : console.error("No reverb named " + i)
                            }
                    }
                }, {
                    key: "stop",
                    value: function() {
                        for (var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0], t = 0; t < c; t++) {
                            var a = this.instances[t];
                            e && a.ambient || a.sound && a.stop()
                        }
                    }
                }, {
                    key: "update",
                    value: function(e) {
                        "suspended" == this.ctx.state && this.ctx.resume();
                        var t = this.muted ? 0 : this.volume,
                            a = this.mutedOld ? 0 : this.volumeOld;
                        this.volumeOld = this.volume, this.mutedOld = this.muted, t != a && this.masterGainNode.gain.setTargetAtTime(t, this.ctx.currentTime, .02);
                        for (var i = this.playingInstances.length - 1; i >= 0; i--) {
                            var r = this.playingInstances[i];
                            r.volumeOld != r.volume && (r.volumeOld = r.volume, r.setGain(r.volume)), r.panOld != r.pan && (r.panOld = r.pan, r.setPan(r.pan)), r.sound && this.ctx.currentTime > r.stopTime && r.disconnect(), r.sound || this.playingInstances.splice(i, 1)
                        }
                        if (this.ctx.currentTime > this.reverbFadeEndTime) {
                            var o = this.ctx.currentTime + .006;
                            this.reverbFadeEndTime = o + .025;
                            for (var n = 0, s = 0; s < this.activeReverbs.length; s++) n += this.activeReverbs[s].targetLevel;
                            for (var l = n > 1 ? 1 / n : 1, c = 0; c < this.activeReverbs.length; c++) {
                                var m = this.activeReverbs[c],
                                    p = Math.sqrt(l * m.targetLevel);
                                m.setGain(p, o, this.reverbFadeEndTime)
                            }
                            for (var d = this.activeReverbs.length - 1; d >= 0; d--) {
                                var h = this.activeReverbs[d],
                                    u = this.ctx.currentTime > h.drainEndTime;
                                0 == h.gain && u && (h.isConnected() && h.disconnect(), h.active = !1, this.activeReverbs.splice(d, 1))
                            }
                        }
                    }
                }, {
                    key: "setMute",
                    value: function(e) {
                        this.muted = e
                    }
                }, {
                    key: "on",
                    value: function(e, t, a) {
                        if ("fileload" != e) return void console.error('Only "fileload" event supported');
                        this.onfileload = t.bind(a)
                    }
                }, {
                    key: "updatePerformanceTest",
                    value: function() {
                        var e = this;
                        if (this.runningOfflineTest = void 0 != this.runningOfflineTest && this.runningOfflineTest, !this.runningOfflineTest) {
                            this.runningOfflineTest = !0, this.offlineCtx = new OfflineAudioContext(2, 10 * this.ctx.sampleRate, this.ctx.sampleRate);
                            for (var t = this.offlineCtx.createBuffer(2, 10 * this.ctx.sampleRate, this.ctx.sampleRate), a = 0; a < t.numberOfChannels; a++)
                                for (var i = t.getChannelData(a), r = 0; r < i.length; r++) i[r] = Math.sin(r / 2333) * Math.sin(r / 5741) * 2 * Math.random() - 1;
                            var o = this.offlineCtx.createBufferSource();
                            o.buffer = t;
                            for (var n = this.offlineCtx.createConvolver(), s = this.offlineCtx.createBuffer(1, 4 * this.ctx.sampleRate, this.ctx.sampleRate), l = 0; l < s.numberOfChannels; l++)
                                for (var c = s.getChannelData(l), m = 0; m < c.length; m++) c[m] = 2 * Math.random() - 1;
                            n.buffer = s;
                            var p = {
                                volume: .7,
                                echoVolume: .5,
                                echoLowPass: 800,
                                echoDelay: .25,
                                stereoSpread: .004
                            };
                            if (p.convolverNode = n, p.echoLowPassNode = this.offlineCtx.createBiquadFilter(), p.echoLowPassNode.type = "lowpass", p.echoLowPassNode.frequency.setValueAtTime(p.echoLowPass, 0), p.echoLowPassNode.Q.setValueAtTime(-3.0102999566398125, 0), p.echoDelayNode = this.offlineCtx.createDelay(p.echoDelay || .01), p.echoDelayNode.delayTime.setValueAtTime(p.echoDelay, 0), p.stereoSpread && (p.stereoDelayNode = this.offlineCtx.createDelay(p.stereoSpread), p.stereoDelayNode.delayTime.setValueAtTime(p.stereoSpread, 0), p.mergerNode = this.offlineCtx.createChannelMerger(2)), p.gainNode = this.offlineCtx.createGain(), p.gainNode.channelCount = 1, p.gainNode.channelCountMode = "explicit", p.gainNode.gain.setValueAtTime(1, 0), p.echoGainNode = this.offlineCtx.createGain(), p.echoGainNode.channelCount = 1, p.echoGainNode.channelCountMode = "explicit", p.echoGainNode.gain.setValueAtTime(p.echoVolume, 0), p.outNode = this.offlineCtx.createGain(), p.gainNode.connect(p.convolverNode), p.stereoSpread) {
                                var d = p.convolverNode.buffer;
                                d && 1 != d.numberOfChannels && console.error("stereoSpread can only be applied to mono IRs"), p.convolverNode.connect(p.stereoDelayNode), p.convolverNode.connect(p.mergerNode, 0, 0), p.stereoDelayNode.connect(p.mergerNode, 0, 1), p.mergerNode.connect(p.outNode)
                            } else p.convolverNode.connect(p.outNode);
                            this.offlineCtx.createDynamicsCompressor(), console.log("starting convolver"), o.connect(p.gainNode), p.outNode.connect(this.offlineCtx.destination), o.start(), this.startTime = performance.now(), this.offlineCtx.oncomplete = function(t) {
                                var a = performance.now();
                                console.log("Offline render time: ", a - e.startTime), e.runningOfflineTest = !1
                            }, this.offlineCtx.startRendering()
                        }
                    }
                }]), e
            }(),
            y = {
                Sound: new g
            };
        e.exports = y
    },
    f4d48896: function(e, t, a) {
        "use strict";

        function i(e) {
            facebookConnectPlugin.login(["public_profile"], function(t) {
                e(null, t)
            }, function(t) {
                e(t)
            })
        }

        function r(e) {
            window.plugins.googleplus.login({}, function(t) {
                e(null, t)
            }, function(t) {
                e(t)
            })
        }

        function o(e) {
            window.chrome.system.memory.getInfo(e)
        }

        function n(e) {
            AppRate.preferences = {
                useLanguage: "en",
                displayAppName: "surviv.io",
                usesUntilPrompt: 1,
                promptAgainForEachNewVersion: !0,
                inAppReview: !0,
                storeAppURL: {
                    ios: "1401727934",
                    android: "market://details?id=io.surviv.surviv_io_mobile"
                },
                customLocale: {
                    title: "Enjoying surviv.io?",
                    message: "Thanks for playing! It would be a huge help if you rated us. We appreciate your support!",
                    cancelButtonLabel: "No Thanks",
                    laterButtonLabel: "Remind Me Later",
                    rateButtonLabel: "Rate surviv.io"
                },
                callbacks: {
                    handleNegativeFeedback: function() {
                        window.open("mailto:admin@surviv.io", "_system")
                    },
                    onRateDialogShow: function(e) {},
                    onButtonClicked: function(t) {
                        e(t)
                    }
                }
            }, AppRate.preferences.simpleMode = !0, AppRate.promptForRating()
        }

        function s(e, t) {
            NativeStorage.getItem(e, function(e) {
                t(null, e)
            }, function(e) {
                t(e)
            })
        }

        function l(e, t, a) {
            NativeStorage.setItem(e, t, function(e) {
                a(null, e)
            }, function(e) {
                a(e)
            })
        }
        e.exports = {
            facebookLogin: i,
            getSystemMemoryInfo: o,
            googleLogin: r,
            promptAppRate: n,
            storageGetItem: s,
            storageSetItem: l
        }
    },
    fac69c0a: function(e, t, a) {
        function i(e) {
            return a(r(e))
        }

        function r(e) {
            var t = o[e];
            if (!(t + 1)) throw new Error("Cannot find module '" + e + "'.");
            return t
        }
        var o = {
            "./da.js": "8f9fd353",
            "./de.js": "29d4cdc4",
            "./en.js": "5bedf25d",
            "./es.js": "a5bf0544",
            "./fr.js": "15173389",
            "./it.js": "3bff36cf",
            "./jp.js": "e9735f40",
            "./ko.js": "064c0a93",
            "./nl.js": "bdd2570b",
            "./pl.js": "0cc73a5c",
            "./pt.js": "9e5281a7",
            "./ru.js": "f2372804",
            "./sv.js": "4426a45f",
            "./th.js": "4780d986",
            "./tr.js": "7aa4bfa8",
            "./vn.js": "6b9375bf",
            "./zh-cn.js": "51683873",
            "./zh-tw.js": "9085f81b"
        };
        i.keys = function() {
            return Object.keys(o)
        }, i.resolve = r, e.exports = i, i.id = "fac69c0a"
    },
    fc096113: function(e, t, a) {
        "use strict";
        var i = (a("989ad62a"), a("1901e2d9")),
            r = (a("c2a798c8"), a("d5ec3c16")),
            o = {
                desc: {
                    name: "Potato",
                    icon: "img/gui/surviv.svg"
                },
                assets: {
                    audio: [{
                        name: "pumpkin_break_01",
                        channel: "sfx"
                    }, {
                        name: "potato_01",
                        channel: "sfx"
                    }, {
                        name: "potato_02",
                        channel: "sfx"
                    }, {
                        name: "potato_pickup_01",
                        channel: "ui"
                    }],
                    atlases: ["gradient", "shared", "potato"]
                },
                biome: {
                    colors: {
                        background: 2118510,
                        water: 3310251,
                        beach: 16035400,
                        riverbank: 9079434,
                        grass: 6066442,
                        underground: 1772803,
                        playerSubmerge: 2854052
                    },
                    particles: {
                        camera: "falling_leaf_potato",
                        ripple: "waterRipple"
                    },
                    frozenSprites: ["player-mash-01.img", "player-mash-02.img", "player-mash-03.img"]
                },
                gameMode: {
                    potatoMode: !0
                }
            };
        e.exports = i.mergeDeep({}, r, o)
    },
    fc6a992a: function(e, t, a) {
        "use strict";

        function i() {
            this.active = !1, this.sprite = new n.Sprite, this.sprite.anchor.set(.5, .5), this.sprite.visible = !1
        }

        function r(e) {
            this.active = !1, this.pos = p.create(0, 0), this.rad = 0, this.duration = 0, this.ticker = 0, this.gfx = new n.Graphics, e.addChild(this.gfx)
        }

        function o(e) {
            this.ga = [], this.ya = [], this.airstrikeZoneContainer = new n.Container, this.audioManager = e
        }
        var n = a("8b1dfb45"),
            s = a("6b42806d"),
            l = a("989ad62a"),
            c = a("10899aea"),
            m = a("1901e2d9"),
            p = a("c2a798c8");
        a("af8ba00f"), i.prototype = {
            o: function(e, t) {
                switch (this.id = e.id, this.pos = p.copy(e.pos), this.planeDir = p.copy(e.planeDir), this.actionComplete = e.actionComplete, this.active = !0, this.dirty = !1, this.soundInstance = null, this.soundUpdateThrottle = 0, this.alpha = .75, this.renderAlpha = 1, this.spriteUpdateTime = 0, this.type = e.action, this.config = this.type == l.Plane.Airdrop ? l.airdrop : l.airstrike, this.rad = this.config.planeRad, this.type) {
                    case l.Plane.Airdrop:
                        this.sprite.texture = n.Texture.fromImage(t.getMapDef().biome.airdrop.planeImg), this.planeSound = t.getMapDef().biome.airdrop.planeSound;
                        break;
                    case l.Plane.Airstrike:
                        this.sprite.texture = n.Texture.fromImage("map-plane-02.img"), this.planeSound = "fighter_01"
                }
                this.sprite.visible = !0, this.sprite.rotation = Math.atan2(this.planeDir.x, this.planeDir.y)
            },
            n: function(e) {
                this.spriteUpdateTime < 2 || (this.soundInstance && (e.stopSound(this.soundInstance), this.soundInstance = null), this.sprite.visible = !1, this.active = !1)
            }
        }, r.prototype = {
            o: function(e, t, a) {
                this.active = !0, this.pos = p.copy(e), this.rad = t, this.duration = a, this.ticker = 0, this.renderPos = p.create(0, 0), this.renderRad = 0, this.gfx.visible = !0
            },
            c: function(e, t, a) {
                this.ticker += e, this.gfx.visible = !0, this.ticker >= this.duration && (this.gfx.visible = !1, this.active = !1)
            },
            Ft: function(e, t, a) {
                var i = e.getMapPosFromWorldPos(this.pos, t),
                    r = e.getMapPosFromWorldPos(p.add(this.pos, p.create(this.rad, 0)), t),
                    o = p.length(p.sub(r, i)),
                    n = !p.eq(this.renderPos, i, 1e-4),
                    s = !c.eqAbs(this.renderRad, o, 1e-4);
                n && (this.renderPos = p.copy(i)), s && (this.renderRad = o), n && this.gfx.position.set(this.renderPos.x, this.renderPos.y), s && (this.gfx.clear(), this.gfx.lineStyle(1.5, 15400704), this.gfx.beginFill(15400704, .2), this.gfx.drawCircle(0, 0, this.renderRad), this.gfx.endFill());
                var l = c.smoothstep(this.ticker, 0, .5) * (1 - c.smoothstep(this.ticker, this.duration - .5, this.duration));
                this.gfx.alpha = l
            }
        }, o.prototype = {
            n: function() {
                for (var e = 0; e < this.ga/*planes.planes888*/.length; e++) this.ga[e].n(this.audioManager)
            },
            Xt: function(e, t) {
                for (var a = 0; a < this.ga.length; a++) this.ga[a].dirty = !0;
                for (var i = 0; i < e.length; i++) {
                    for (var r = e[i], o = null, n = 0; n < this.ga.length; n++) {
                        var s = this.ga[n];
                        if (s.active && s.id == r.id) {
                            o = s;
                            break
                        }
                    }
                    o || (o = this.wa(r, t)), o.dirty = !1, o.actionComplete = r.actionComplete
                }
                for (var l = 0; l < this.ga.length; l++) {
                    var c = this.ga[l];/*planes.planes888*/
                    c.active && c.dirty && c.n(this.audioManager)
                }
            },
            wa: function(e, t) {
                for (var a = null, r = 0; r < this.ga.length; r++)
                    if (!this.ga[r].active) {
                        a = this.ga[r];
                        break
                    }
                return a || (a = new i, this.ga.push(a)), a.o(e, t), a
            },
            Yt: function(e) {
                for (var t = null, a = 0; a < this.ya.length; a++)
                    if (!this.ya[a]) {
                        t = this.ya[a];
                        break
                    }
                return t || (t = new r(this.airstrikeZoneContainer), this.ya.push(t)), t.o(e.pos, e.rad, e.duration), t
            },
            c: function(e, t, a, i, r) {
                for (var o = 0; o < this.ga.length; o++) {
                    var n = this.ga[o];
                    if (n.active) {
                        var d = 0;
                        if (!(m.sameLayer(d, a.layer) || 2 & a.layer) || 2 & a.layer && i.insideStructureMask(s.createCircle(n.pos, 1)) || (d |= 2), n.pos = p.add(n.pos, p.mul(n.planeDir, e * n.config.planeVel)), n.actionComplete && (n.spriteUpdateTime = Math.min(n.spriteUpdateTime + e, 2), n.spriteUpdateTime, n.rad = c.lerp(n.spriteUpdateTime, n.config.planeRad, 1.25 * n.config.planeRad), n.alpha = c.lerp(n.spriteUpdateTime, .75, .5625), n.soundRangeMult = c.max(0, c.lerp(n.spriteUpdateTime, n.config.soundRangeMult, n.config.soundRangeMult - n.config.soundRangeDelta))), n.soundInstance) n.soundUpdateThrottle < 0 ? (this.audioManager.updateSound(n.soundInstance, "sfx", n.pos, {
                            layer: d,
                            rangeMult: n.config.soundRangeMult,
                            muffled: !1,
                            ignoreMinAllowable: !0,
                            fallOff: n.config.fallOff
                        }), n.soundUpdateThrottle = .1) : n.soundUpdateThrottle -= e;
                        else {
                            var h = p.length(p.sub(a.pos, n.pos)),
                                u = n.config.soundRangeMax * n.config.soundRangeMult,
                                g = 0;
                            if (n.type == l.Plane.Airstrike) {
                                var y = c.max(150, h);
                                g = 2.25 * (1 - c.clamp(c.max(0, y) / 800, 0, 1))
                            }
                            h < u && (n.soundInstance = this.audioManager.playSound(n.planeSound, {
                                channel: "sfx",
                                soundPos: n.pos,
                                layer: d,
                                loop: !0,
                                rangeMult: 2.5,
                                muffled: !1,
                                ignoreMinAllowable: !0,
                                fallOff: n.config.fallOff,
                                offset: g
                            }))
                        }
                        r.addPIXIObj(n.sprite, d, 1501, n.id);
                        var w = t.pointToScreen(n.pos),
                            x = t.pixels(n.rad / t.ppu),
                            f = n.alpha;
                        1 == a.layer ? f = 0 : (a.re.scopedIn || 1 & a.layer) && (f = .15), n.renderAlpha = c.lerp(3 * e, n.renderAlpha, f), n.sprite.position.set(w.x, w.y), n.sprite.scale.set(x, x), n.sprite.tint = 16776960, n.sprite.alpha = n.renderAlpha, n.sprite.visible = !0
                    }
                }
                for (var b = 0; b < this.ya.length; b++) {
                    var _ = this.ya[b];
                    _.active && _.c(e)
                }
            },
            renderAirstrikeZones: function(e, t, a) {
                for (var i = 0; i < this.ya.length; i++) {
                    var r = this.ya[i];
                    r.active && r.Ft(e, t, a)
                }
            }
        }, e.exports = {
            ct: o
        }
    },
    feb8fc30: function(e, t, a) {
        "use strict";

        function i() {
            this.container = new r.Container, this.container.visible = !1, this.timerBackground = r.Sprite.fromImage("timer-background.img"), this.timerBackground.anchor.set(.5, .5), this.timerBackground.scale.set(1, 1), this.container.addChild(this.timerBackground), this.gfx = new r.Graphics, this.container.addChild(this.gfx), this.counterText = new r.Text, this.counterText.anchor.set(.5, .5), this.counterText.style = {
                fontFamily: "Roboto Condensed, Arial, sans-serif",
                fontWeight: "bold",
                fontSize: s,
                align: "center",
                fill: 16777215,
                stroke: 0,
                strokeThickness: 3
            }, this.container.addChild(this.counterText), this.labelText = new r.Text, this.labelText.anchor.set(.5, .5), this.labelText.style = {
                fontFamily: "Roboto Condensed, Arial, sans-serif",
                fontWeight: "100",
                fontSize: s,
                align: "center",
                fill: 16777215
            }, this.container.addChild(this.labelText), this.screenScaleFactor = 1, this.mobileOffset = 0, this.active = !1, this.label = "", this.elapsed = 0, this.duration = 0
        }
        var r = a("8b1dfb45"),
            o = a("10899aea"),
            n = a("ce29f17f"),
            s = 24;
        i.prototype = {
            destroy: function() {
                this.container.removeChild(this.timerBackground), this.timerBackground.destroy({
                    children: !0
                }), this.container.destroy({
                    children: !0,
                    texture: !0
                })
            },
            start: function(e, t, a) {
                this.active = !0, this.label = e, this.elapsed = t, this.duration = a
            },
            stop: function() {
                this.active = !1
            },
            resize: function(e, t) {
                this.screenScaleFactor = t, n.uiLayout == n.UiLayout.Sm ? (n.tablet || this.container.scale.set(.5, .5), this.mobileOffset = n.isLandscape ? e.mobileOffsetLandscape : e.mobileOffsetPortrait) : (this.container.scale.set(1, 1), this.mobileOffset = 0)
            },
            update: function(e, t) {
                if (!this.active) return void(this.container.visible = !1);
                this.elapsed = o.min(this.elapsed + e, this.duration);
                var a = 56 + this.label.length * s * .45,
                    i = 1.5 * s,
                    r = 0 - a / 2,
                    n = 87.5 - i / 2,
                    l = o.min(this.elapsed / this.duration, 1) * Math.PI * 2 - .5 * Math.PI;
                this.gfx.clear(), this.gfx.beginFill(0, .5), this.gfx.drawRoundedRect(r, n, a, i, 5), this.gfx.endFill(), this.gfx.lineStyle(6, 16777215), this.gfx.arc(0, 0, 35, .5 * -Math.PI, l, !1), this.counterText.text = o.max(0, this.duration - this.elapsed).toFixed(1), this.labelText.position.y = 87.5, this.labelText.text = this.label, this.container.position.set(t.screenWidth / 2, t.screenHeight / 3 * this.screenScaleFactor + this.mobileOffset), this.container.visible = !0
            }
        }, e.exports = {
            $: i
        }
    }
}, ["c99e6613"]);
//# sourceMappingURL=app.706cafe7.js.map
